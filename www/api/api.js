// Generated by Haxe 4.0.0-rc.2+77068e10c
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = true;
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileOutput
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,close: function() {
	}
	,__class__: haxe_io_Input
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: _$Sys_FileInput
});
var asys_FileSystem = function() { };
asys_FileSystem.__name__ = true;
asys_FileSystem.exists = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.stat(path,function(err,stats) {
		trigger.trigger(err == null);
	});
	return trigger;
};
asys_FileSystem.rename = function(path,newPath) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.rename(path,newPath,function(err) {
		var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 29, className : "asys.FileSystem", methodName : "rename"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_FileSystem.stat = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.stat(path,function(err,stat) {
		var tmp = err == null ? tink_core_Outcome.Success({ gid : stat.gid, uid : stat.uid, atime : stat.atime, mtime : stat.mtime, ctime : stat.ctime, size : stat.size | 0, dev : stat.dev, ino : stat.ino | 0, nlink : stat.nlink, rdev : stat.rdev, mode : stat.mode}) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 52, className : "asys.FileSystem", methodName : "stat"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_FileSystem.fullPath = function(relPath) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.realpath(relPath,function(err,path) {
		var tmp = err == null ? tink_core_Outcome.Success(path) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 63, className : "asys.FileSystem", methodName : "fullPath"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_FileSystem.absolutePath = function(relPath) {
	if(haxe_io_Path.isAbsolute(relPath)) {
		return relPath;
	}
	return haxe_io_Path.join([process.cwd(),relPath]);
};
asys_FileSystem.isDirectory = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.stat(path,function(err,stat) {
		var tmp = err == null && stat.isDirectory();
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_FileSystem.mkdir = function(path) {
	return tink_core__$Future_Future_$Impl_$.async(function(_cb) {
		js_node_Fs.mkdir(path,function(err) {
			var tmp = err == null || err.code == "EEXIST" ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(500,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 91, className : "asys.FileSystem", methodName : "mkdir"}));
			_cb(tmp);
		});
	});
};
asys_FileSystem.createDirectory = function(path) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		asys_FileSystem.isDirectory(path).handle(function(isDir) {
			if(isDir) {
				cb(tink_core_Outcome.Success(tink_core_Noise.Noise));
			} else {
				asys_FileSystem.mkdir(path).handle(function(o) {
					if(o._hx_index == 1) {
						var e = o.failure;
						if(e.data.code == "ENOENT") {
							tink_core__$Promise_Promise_$Impl_$.next(asys_FileSystem.createDirectory(js_node_Path.dirname(path)),function(_) {
								return asys_FileSystem.mkdir(path);
							}).handle(cb);
						} else {
							cb(o);
						}
					} else {
						cb(o);
					}
				});
			}
		});
	},false);
};
asys_FileSystem.deleteFile = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.unlink(path,function(err) {
		var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 116, className : "asys.FileSystem", methodName : "deleteFile"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_FileSystem.deleteDirectory = function(path) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(asys_FileSystem.readDirectory(path),function(files) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < files.length) {
				var file = files[_g1];
				++_g1;
				var cur = ["" + path + "/" + file];
				_g.push(tink_core__$Future_Future_$Impl_$.next(asys_FileSystem.isDirectory(cur[0]),(function(cur1) {
					return function(isDir) {
						if(isDir) {
							return asys_FileSystem.deleteDirectory(cur1[0]);
						} else {
							return asys_FileSystem.deleteFile(cur1[0]);
						}
					};
				})(cur)));
			}
			return tink_core__$Promise_Promise_$Impl_$.inParallel(_g);
		}),function(_) {
			return tink_core__$Future_Future_$Impl_$.async(function(cb1) {
				js_node_Fs.rmdir(path,function(err) {
					var this1 = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(500,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 132, className : "asys.FileSystem", methodName : "deleteDirectory"}));
					cb(this1);
				});
			});
		}).handle(cb);
	},false);
};
asys_FileSystem.readDirectory = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.readdir(path,function(err,files) {
		var tmp = err == null ? tink_core_Outcome.Success(files) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/FileSystem.hx", lineNumber : 143, className : "asys.FileSystem", methodName : "readDirectory"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
var asys_io_File = function() { };
asys_io_File.__name__ = true;
asys_io_File.readStream = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var r = js_node_Fs.createReadStream(path);
	var options = null;
	if(options == null) {
		options = { };
	}
	return tink_io_nodejs_NodejsSource.wrap("asys read stream",r,options.chunkSize,options.onEnd);
};
asys_io_File.writeStream = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	return tink_io_nodejs_NodejsSink.wrap("asys write stream",js_node_Fs.createWriteStream(path));
};
asys_io_File.getContent = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.readFile(path,"utf8",function(err,data) {
		var tmp = err == null ? tink_core_Outcome.Success(data) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 40, className : "asys.io.File", methodName : "getContent"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.saveContent = function(path,content) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.writeFile(path,content,"utf8",function(err) {
		var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 51, className : "asys.io.File", methodName : "saveContent"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.getBytes = function(path) {
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.readFile(path,function(err,buffer) {
		var tmp = err == null ? tink_core_Outcome.Success(js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 62, className : "asys.io.File", methodName : "getBytes"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.saveBytes = function(path,bytes) {
	var trigger = new tink_core_FutureTrigger();
	var data = bytes.b;
	js_node_Fs.writeFile(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length),function(err) {
		var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 73, className : "asys.io.File", methodName : "saveBytes"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.read = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"r",function(err,fd) {
		var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileInput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 84, className : "asys.io.File", methodName : "read"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.write = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"w",function(err,fd) {
		var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 95, className : "asys.io.File", methodName : "write"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.append = function(path,binary) {
	if(binary == null) {
		binary = true;
	}
	var trigger = new tink_core_FutureTrigger();
	js_node_Fs.open(path,"a",function(err,fd) {
		var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 106, className : "asys.io.File", methodName : "append"}));
		trigger.trigger(tmp);
	});
	return trigger;
};
asys_io_File.copy = function(srcPath,dstPath) {
	var trigger = new tink_core_FutureTrigger();
	var called = false;
	var done = function(err) {
		if(called) {
			return;
		}
		var done1 = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 119, className : "asys.io.File", methodName : "copy"}));
		trigger.trigger(done1);
		called = true;
	};
	var rd = js_node_Fs.createReadStream(srcPath);
	rd.on("error",done);
	var wr = js_node_Fs.createWriteStream(dstPath);
	wr.on("error",done);
	wr.on("close",function(ex) {
		done();
	});
	rd.pipe(wr);
	return trigger;
};
var asys_io_FileInput = function(fd) {
	this.position = 0;
	this.bufferPos = 0;
	this.bufferSize = 4;
	this.fd = fd;
	this.buffer = new js_node_buffer_Buffer(this.bufferSize);
};
asys_io_FileInput.__name__ = true;
asys_io_FileInput.__super__ = haxe_io_Input;
asys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.bufferPos == this.bufferSize) {
			this.bufferPos = 0;
		}
		if(this.bufferPos == 0) {
			js_node_Fs.readSync(this.fd,this.buffer,0,this.bufferSize,this.position);
		}
		this.position++;
		return this.buffer[this.bufferPos++];
	}
	,readBytes: function(s,pos,len) {
		this.bufferPos = 0;
		var b = new js_node_buffer_Buffer(len);
		var amount = js_node_Fs.readSync(this.fd,b,0,len,this.position);
		s.blit(pos,js_node_buffer__$Buffer_Helper.bytesOfBuffer(b),0,len);
		this.position += len;
		return amount;
	}
	,seek: function(length,pos) {
		this.bufferPos = 0;
		switch(pos._hx_index) {
		case 0:
			this.position = length;
			break;
		case 1:
			this.position += length;
			break;
		case 2:
			throw new js__$Boot_HaxeError("Not implemented");
		}
	}
	,tell: function() {
		return this.position;
	}
	,eof: function() {
		return this.buffer.length < this.bufferSize;
	}
	,close: function() {
		this.buffer = null;
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: asys_io_FileInput
});
var asys_io_FileOutput = function(fd) {
	this.buffer = new js_node_buffer_Buffer(1);
	this.position = 0;
	this.fd = fd;
};
asys_io_FileOutput.__name__ = true;
asys_io_FileOutput.__super__ = haxe_io_Output;
asys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.buffer[0] = c;
		js_node_Fs.writeSync(this.fd,this.buffer,0,1,this.position++);
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var amount = js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
		this.position += len;
		return amount;
	}
	,seek: function(length,pos) {
		switch(pos._hx_index) {
		case 0:
			this.position = 0;
			break;
		case 1:
			this.position += length;
			break;
		case 2:
			throw new js__$Boot_HaxeError("Not implemented");
		}
	}
	,tell: function() {
		return this.position;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,__class__: asys_io_FileOutput
});
var asys_io_FileSeek = $hxEnums["asys.io.FileSeek"] = { __ename__ : true, __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"asys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"asys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"asys.io.FileSeek",toString:$estr}
};
var conf_IConfig = function() { };
conf_IConfig.__name__ = true;
conf_IConfig.prototype = {
	__class__: conf_IConfig
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_Resource = function() { };
haxe_Resource.__name__ = true;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g = 1;
	var _g1 = paths1.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2 = 0;
	var _g3 = tmp.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g21;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g21;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i2);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.isAbsolute = function(path) {
	if(StringTools.startsWith(path,"/")) {
		return true;
	}
	if(path.charAt(1) == ":") {
		return true;
	}
	if(StringTools.startsWith(path,"\\\\")) {
		return true;
	}
	return false;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$ = {};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.__name__ = true;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toMessage = function(this1) {
	var this2 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(this1);
	return this2;
};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toInt = function(this1) {
	return this1;
};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.fromErrorCode = function(code) {
	return code;
};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toWebResponse = function(this1) {
	return httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toOutgoingResponse(this1);
};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.toOutgoingResponse = function(this1) {
	var this2 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(this1);
	var this3 = new tink_http_ResponseHeaderBase(this1,this2,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
	var this4 = new tink_http__$Response_OutgoingResponseData(this3,tink_io__$Source_Source_$Impl_$.EMPTY);
	return this4;
};
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.fromIncomingResponse = function(res) {
	return res.header.statusCode;
};
var httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$ = {};
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.__name__ = true;
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$._new = function(statusCode) {
	var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(statusCode);
	return this1;
};
httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode = function(statusCode) {
	switch(statusCode) {
	case 100:
		return "Continue";
	case 101:
		return "Switching Protocols";
	case 102:
		return "Processing";
	case 200:
		return "OK";
	case 201:
		return "Created";
	case 202:
		return "Accepted";
	case 203:
		return "Non-Authoritative Information";
	case 204:
		return "No Content";
	case 205:
		return "Reset Content";
	case 206:
		return "Partial Content";
	case 207:
		return "Multi-Status";
	case 208:
		return "Already Reported";
	case 226:
		return "IM Used";
	case 300:
		return "Multiple Choices";
	case 301:
		return "Moved Permanently";
	case 302:
		return "Found";
	case 303:
		return "See Other";
	case 304:
		return "Not Modified";
	case 305:
		return "Use Proxy";
	case 306:
		return "Switch Proxy";
	case 307:
		return "Temporary Redirect";
	case 308:
		return "Permanent Redirect";
	case 400:
		return "Bad Request";
	case 401:
		return "Unauthorized";
	case 402:
		return "Payment Required";
	case 403:
		return "Forbidden";
	case 404:
		return "Not Found";
	case 405:
		return "Method Not Allowed";
	case 406:
		return "Not Acceptable";
	case 407:
		return "Proxy Authentication Required";
	case 408:
		return "Request Timeout";
	case 409:
		return "Conflict";
	case 410:
		return "Gone";
	case 411:
		return "Length Required";
	case 412:
		return "Precondition Failed";
	case 413:
		return "Payload Too Large";
	case 414:
		return "URI Too Long";
	case 415:
		return "Unsupported Media Type";
	case 416:
		return "Range Not Satisfiable";
	case 417:
		return "Expectation Failed";
	case 418:
		return "I'm a teapot";
	case 421:
		return "Misdirected Request";
	case 422:
		return "Unprocessable Entity";
	case 423:
		return "Locked";
	case 424:
		return "Failed Dependency";
	case 426:
		return "Upgrade Required";
	case 428:
		return "Precondition Required";
	case 429:
		return "Too Many Requests";
	case 431:
		return "Request Header Fields Too Large";
	case 451:
		return "Unavailable For Legal Reasons";
	case 500:
		return "Internal Server Error";
	case 501:
		return "Not Implemented";
	case 502:
		return "Bad Gateway";
	case 503:
		return "Service Unavailable";
	case 504:
		return "Gateway Timeout";
	case 505:
		return "HTTP Version Not Supported";
	case 506:
		return "Variant Also Negotiates";
	case 507:
		return "Insufficient Storage";
	case 508:
		return "Loop Detected";
	case 510:
		return "Not Extended";
	case 511:
		return "Network Authentication Required";
	default:
		return "Unknown Status";
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(((o) instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = l;
			while(_g3 < _g11) {
				var i1 = _g3++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(((o) instanceof cl)) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		if(o.__enum__ != null) {
			return $hxEnums[o.__enum__] == cl;
		} else {
			return false;
		}
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_Fs = require("fs");
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_http_Server = require("http").Server;
var js_node_stream_PassThrough = require("stream").PassThrough;
var mime_Mime = function() { };
mime_Mime.__name__ = true;
mime_Mime.get_extensions = function() {
	if(mime_Mime.extensions != null) {
		return mime_Mime.extensions;
	} else {
		mime_Mime.extensions = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(mime_Mime.db);
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			var e = mime_Mime.db[type].extensions;
			if(e != null) {
				var _g2 = 0;
				while(_g2 < e.length) {
					var extension = e[_g2];
					++_g2;
					var _this = mime_Mime.extensions;
					if(__map_reserved[extension] != null) {
						_this.setReserved(extension,type);
					} else {
						_this.h[extension] = type;
					}
				}
			}
		}
		return mime_Mime.extensions;
	}
};
mime_Mime.lookup = function(path) {
	var this1 = mime_Mime.get_extensions();
	var key = path.split(".").pop().toLowerCase();
	var _this = this1;
	if(__map_reserved[key] != null) {
		return _this.getReserved(key);
	} else {
		return _this.h[key];
	}
};
mime_Mime.extension = function(type) {
	var _g = mime_Mime.db[type];
	if(_g == null) {
		return null;
	} else {
		var e = _g.extensions;
		if(e != null) {
			return e[0];
		} else {
			return null;
		}
	}
};
mime_Mime.init = function() {
};
var server_Api = function() { };
server_Api.__name__ = true;
server_Api.main = function() {
	console.log("src/server/Api.hx:13:","dev");
	var config = JSON.parse(haxe_Resource.getString("conf"));
	var container = new tink_http_containers_NodeContainer(tink_http_containers__$NodeContainer_ServerKindBase.Port(config.port));
	var router = new tink_web_routing_Router0(new server_ApiRoute());
	var staticMiddleware = new tink_http_middleware_Static("..","/");
	var handler = new tink_http_SimpleHandler(function(req) {
		var this1 = tink_web_routing_Context.ofRequest(req);
		var this2 = router.route(this1);
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_http__$Response_OutgoingResponse_$Impl_$.reportError);
		var ret = this2.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	});
	container.run(staticMiddleware.apply(handler));
};
var server_ApiRoute = function() {
	this.api = new server_Root();
};
server_ApiRoute.__name__ = true;
server_ApiRoute.prototype = {
	__class__: server_ApiRoute
};
var server_Root = function() {
};
server_Root.__name__ = true;
server_Root.prototype = {
	serve: function(name) {
		if(name == null) {
			name = "index.html";
		}
		return "Hello, " + name + "!";
	}
	,__class__: server_Root
};
var tink_chunk_ChunkBase = function() { };
tink_chunk_ChunkBase.__name__ = true;
tink_chunk_ChunkBase.prototype = {
	getCursor: function() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	,flatten: function(into) {
	}
	,__class__: tink_chunk_ChunkBase
};
var tink_chunk_ChunkObject = function() { };
tink_chunk_ChunkObject.__name__ = true;
tink_chunk_ChunkObject.prototype = {
	__class__: tink_chunk_ChunkObject
};
var tink__$Chunk_EmptyChunk = function() {
};
tink__$Chunk_EmptyChunk.__name__ = true;
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_EmptyChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getByte: function(i) {
		return 0;
	}
	,getLength: function() {
		return 0;
	}
	,slice: function(from,to) {
		return this;
	}
	,blitTo: function(target,offset) {
	}
	,toString: function() {
		return "";
	}
	,toBytes: function() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
	,__class__: tink__$Chunk_EmptyChunk
});
var tink__$Chunk_CompoundChunk = function(left,right) {
	this.left = left;
	this.right = right;
	this.split = left.getLength();
	this.length = this.split + right.getLength();
};
tink__$Chunk_CompoundChunk.__name__ = true;
tink__$Chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
tink__$Chunk_CompoundChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	getByte: function(i) {
		if(i < this.split) {
			return this.left.getByte(i);
		} else {
			return this.right.getByte(i - this.split);
		}
	}
	,getLength: function() {
		return this.length;
	}
	,flatten: function(into) {
		this.left.flatten(into);
		this.right.flatten(into);
	}
	,slice: function(from,to) {
		return tink__$Chunk_Chunk_$Impl_$.concat(this.left.slice(from,to),this.right.slice(from - this.split,to - this.split));
	}
	,blitTo: function(target,offset) {
		this.left.blitTo(target,offset);
		this.right.blitTo(target,offset + this.split);
	}
	,toString: function() {
		return this.toBytes().toString();
	}
	,toBytes: function() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
	,__class__: tink__$Chunk_CompoundChunk
});
var tink__$Chunk_Chunk_$Impl_$ = {};
tink__$Chunk_Chunk_$Impl_$.__name__ = true;
tink__$Chunk_Chunk_$Impl_$.get_length = function(this1) {
	return this1.getLength();
};
tink__$Chunk_Chunk_$Impl_$.getByte = function(this1,i) {
	return this1.getByte(i);
};
tink__$Chunk_Chunk_$Impl_$.concat = function(this1,that) {
	var _g = that.getLength();
	if(this1.getLength() == 0) {
		if(_g == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			return that;
		}
	} else if(_g == 0) {
		return this1;
	} else {
		return new tink__$Chunk_CompoundChunk(this1,that);
	}
};
tink__$Chunk_Chunk_$Impl_$.cursor = function(this1) {
	return this1.getCursor();
};
tink__$Chunk_Chunk_$Impl_$.iterator = function(this1) {
	return new tink_chunk_ChunkIterator(this1.getCursor());
};
tink__$Chunk_Chunk_$Impl_$.slice = function(this1,from,to) {
	return this1.slice(from,to);
};
tink__$Chunk_Chunk_$Impl_$.blitTo = function(this1,target,offset) {
	this1.blitTo(target,offset);
	return;
};
tink__$Chunk_Chunk_$Impl_$.toHex = function(this1) {
	return this1.toBytes().toHex();
};
tink__$Chunk_Chunk_$Impl_$.toString = function(this1) {
	return this1.toString();
};
tink__$Chunk_Chunk_$Impl_$.toBytes = function(this1) {
	return this1.toBytes();
};
tink__$Chunk_Chunk_$Impl_$.toBuffer = function(this1) {
	var b = this1.toBytes();
	var data = b.b;
	return js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
};
tink__$Chunk_Chunk_$Impl_$.join = function(chunks) {
	if(chunks == null) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	} else {
		switch(chunks.length) {
		case 0:
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		case 1:
			var v = chunks[0];
			return v;
		default:
			var v1 = chunks;
			var ret = tink__$Chunk_Chunk_$Impl_$.catChunk(v1[0],v1[1]);
			var _g = 2;
			var _g1 = v1.length;
			while(_g < _g1) {
				var i = _g++;
				ret = tink__$Chunk_Chunk_$Impl_$.catChunk(ret,v1[i]);
			}
			return ret;
		}
	}
};
tink__$Chunk_Chunk_$Impl_$.ofBytes = function(b) {
	return tink_chunk_ByteChunk.of(b);
};
tink__$Chunk_Chunk_$Impl_$.ofString = function(s) {
	return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
};
tink__$Chunk_Chunk_$Impl_$.ofBuffer = function(s) {
	return new tink_chunk_nodejs_BufferChunk(s);
};
tink__$Chunk_Chunk_$Impl_$.ofHex = function(s) {
	var length = s.length >> 1;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
	}
	return tink_chunk_ByteChunk.of(bytes);
};
tink__$Chunk_Chunk_$Impl_$.catChunk = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
};
tink__$Chunk_Chunk_$Impl_$.rcatString = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
};
tink__$Chunk_Chunk_$Impl_$.lcatString = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
};
tink__$Chunk_Chunk_$Impl_$.lcatBytes = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(a),b);
};
tink__$Chunk_Chunk_$Impl_$.rcatBytes = function(a,b) {
	return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(b));
};
tink__$Chunk_Chunk_$Impl_$.toRepresentation = function(this1) {
	var this2 = this1.toBytes();
	return this2;
};
tink__$Chunk_Chunk_$Impl_$.ofRepresentation = function(rep) {
	return tink_chunk_ByteChunk.of(tink_json__$Representation_Representation_$Impl_$.get(rep));
};
var tink__$Stringly_Stringly_$Impl_$ = {};
tink__$Stringly_Stringly_$Impl_$.__name__ = true;
tink__$Stringly_Stringly_$Impl_$.isNumber = function(s,allowFloat) {
	if(s.length == 0) {
		return false;
	}
	var pos = 0;
	var max = s.length;
	if(pos < max && s.charCodeAt(pos) == 45) {
		++pos;
	}
	if(!allowFloat) {
		if(pos < max && s.charCodeAt(pos) == 48 && pos++ > -1) {
			if(pos < max && s.charCodeAt(pos) == 120) {
				++pos;
			}
		}
	}
	while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
	if(allowFloat && pos < max) {
		if(pos < max && s.charCodeAt(pos) == 46 && pos++ > -1) {
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
		if(pos < max && s.charCodeAt(pos) == 101 && pos++ > -1 || pos < max && s.charCodeAt(pos) == 69 && pos++ > -1) {
			if(!(pos < max && s.charCodeAt(pos) == 43 && pos++ > -1)) {
				if(pos < max && s.charCodeAt(pos) == 45) {
					++pos;
				}
			}
			while(pos < max && (s.charCodeAt(pos) ^ 48) < 10) ++pos;
		}
	}
	return pos == max;
};
tink__$Stringly_Stringly_$Impl_$.toBool = function(this1) {
	if(this1 != null) {
		switch(StringTools.trim(this1).toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		default:
			return true;
		}
	} else {
		return false;
	}
};
tink__$Stringly_Stringly_$Impl_$.parseFloat = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,true)) {
		return tink_core_Outcome.Success(parseFloat(v));
	} else {
		var v1 = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid float",{ fileName : "tink/Stringly.hx", lineNumber : 60, className : "tink._Stringly.Stringly_Impl_", methodName : "parseFloat"}));
	}
};
tink__$Stringly_Stringly_$Impl_$.toFloat = function(this1) {
	return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseFloat(this1));
};
tink__$Stringly_Stringly_$Impl_$.parseInt = function(this1) {
	var _g = StringTools.trim(this1);
	var v = _g;
	if(tink__$Stringly_Stringly_$Impl_$.isNumber(v,false)) {
		return tink_core_Outcome.Success(Std.parseInt(v));
	} else {
		var v1 = _g;
		return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + v1 + " (encoded as " + this1 + ") is not a valid integer",{ fileName : "tink/Stringly.hx", lineNumber : 71, className : "tink._Stringly.Stringly_Impl_", methodName : "parseInt"}));
	}
};
tink__$Stringly_Stringly_$Impl_$.toInt = function(this1) {
	return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseInt(this1));
};
tink__$Stringly_Stringly_$Impl_$.parseDate = function(this1) {
	var _g = tink__$Stringly_Stringly_$Impl_$.parseFloat(this1);
	switch(_g._hx_index) {
	case 0:
		var f = _g.data;
		return tink_core_Outcome.Success(new Date(f));
	case 1:
		if(!tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX.match(this1)) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 92, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		}
		var date = new Date(this1);
		if(isNaN(date.getTime())) {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"" + this1 + " is not a valid date",{ fileName : "tink/Stringly.hx", lineNumber : 95, className : "tink._Stringly.Stringly_Impl_", methodName : "parseDate"}));
		} else {
			return tink_core_Outcome.Success(date);
		}
		break;
	}
};
tink__$Stringly_Stringly_$Impl_$.toDate = function(this1) {
	return tink_core_OutcomeTools.sure(tink__$Stringly_Stringly_$Impl_$.parseDate(this1));
};
tink__$Stringly_Stringly_$Impl_$.parse = function(this1,f) {
	var f1 = f;
	var a1 = this1;
	return tink_core_TypedError.catchExceptions(function() {
		return f1(a1);
	},null,{ fileName : "tink/Stringly.hx", lineNumber : 155, className : "tink._Stringly.Stringly_Impl_", methodName : "parse"});
};
tink__$Stringly_Stringly_$Impl_$.ofBool = function(b) {
	if(b) {
		return "true";
	} else {
		return "false";
	}
};
tink__$Stringly_Stringly_$Impl_$.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
tink__$Stringly_Stringly_$Impl_$.ofFloat = function(f) {
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
tink__$Stringly_Stringly_$Impl_$.ofDate = function(d) {
	var f = d.getTime();
	if(f == null) {
		return "null";
	} else {
		return "" + f;
	}
};
var tink__$Url_Url_$Impl_$ = {};
tink__$Url_Url_$Impl_$.__name__ = true;
tink__$Url_Url_$Impl_$.get_pathWithQuery = function(this1) {
	if(this1.query == null) {
		return this1.path;
	} else {
		return this1.path + "?" + this1.query;
	}
};
tink__$Url_Url_$Impl_$._new = function(parts) {
	var this1 = parts;
	return this1;
};
tink__$Url_Url_$Impl_$.resolve = function(this1,that) {
	if(that.scheme != null) {
		return that;
	} else if(that.host != null) {
		if(that.scheme != null) {
			return that;
		} else {
			var copy = Reflect.copy(that);
			copy.scheme = this1.scheme;
			return copy;
		}
	} else {
		var parts = { path : tink_url__$Path_Path_$Impl_$.join(this1.path,that.path), payload : "", scheme : this1.scheme, query : that.query, auth : this1.auth, host : this1.host, hash : that.hash};
		tink__$Url_Url_$Impl_$.makePayload(parts);
		var this2 = parts;
		return this2;
	}
};
tink__$Url_Url_$Impl_$.makePayload = function(parts) {
	var payload = "";
	if(parts.auth == null) {
		if(parts.host != null) {
			var host = parts.host;
			payload += "//" + host;
		}
	} else if(parts.host == null) {
		var auth = parts.auth;
		payload += "//" + (auth == null ? "" : "" + auth + "@");
	} else {
		var auth1 = parts.auth;
		var host1 = parts.host;
		payload += "//" + (auth1 == null ? "" : "" + auth1 + "@") + host1;
	}
	payload += parts.path;
	var _g = parts.query;
	if(_g != null) {
		var v = _g;
		payload += "?" + v;
	}
	var _g1 = parts.hash;
	if(_g1 != null) {
		var v1 = _g1;
		payload += "#" + v1;
	}
	parts.payload = payload.toString();
};
tink__$Url_Url_$Impl_$.toString = function(this1) {
	if(this1.scheme == null) {
		return this1.payload;
	} else {
		return "" + this1.scheme + ":" + this1.payload;
	}
};
tink__$Url_Url_$Impl_$.fromString = function(s) {
	return tink__$Url_Url_$Impl_$.parse(s);
};
tink__$Url_Url_$Impl_$.noop = function(_) {
};
tink__$Url_Url_$Impl_$.parse = function(s,onError) {
	if(s == null) {
		return tink__$Url_Url_$Impl_$.parse("");
	}
	if(onError == null) {
		onError = tink__$Url_Url_$Impl_$.noop;
	}
	s = StringTools.trim(s);
	if(StringTools.startsWith(s,"data:")) {
		var this1 = { scheme : "data", payload : HxOverrides.substr(s,5,null)};
		return this1;
	}
	var FORMAT = new EReg("^(([a-zA-Z][a-zA-Z0-9\\-+.]*):)?((//(([^@/]+)@)?([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?)$","");
	var HOST = new EReg("^(\\[(.*)\\]|([^:]*))(:(.*))?$","");
	FORMAT.match(s);
	var hosts;
	var _g = FORMAT.matched(7);
	if(_g == null) {
		hosts = [];
	} else {
		var v = _g;
		var _g1 = [];
		var _g11 = 0;
		var _g2 = v.split(",");
		while(_g11 < _g2.length) {
			var host = _g2[_g11];
			++_g11;
			HOST.match(host);
			var host1;
			var _g12 = HOST.matched(2);
			var _g21 = HOST.matched(3);
			if(_g12 == null) {
				var ipv4 = _g21;
				host1 = ipv4;
			} else if(_g21 == null) {
				var ipv6 = _g12;
				host1 = "[" + ipv6 + "]";
			} else {
				onError("invalid host " + host);
				host1 = null;
			}
			var port;
			var _g3 = HOST.matched(5);
			if(_g3 == null) {
				port = null;
			} else {
				var v1 = _g3;
				var _g31 = Std.parseInt(v1);
				if(_g31 == null) {
					onError("invalid port " + v1);
					port = null;
				} else {
					var p = _g31;
					port = p;
				}
			}
			_g1.push(tink_url__$Host_Host_$Impl_$._new(host1,port));
		}
		hosts = _g1;
	}
	var path = FORMAT.matched(8);
	if(hosts.length > 0 && path.charAt(0) != "/") {
		path = "/" + path;
	}
	var this2 = { scheme : FORMAT.matched(2), payload : FORMAT.matched(3), host : hosts[0], hosts : hosts, auth : FORMAT.matched(6), path : tink_url__$Path_Path_$Impl_$.ofString(path), query : FORMAT.matched(10), hash : FORMAT.matched(12)};
	return this2;
};
tink__$Url_Url_$Impl_$.make = function(parts) {
	var parts1 = { payload : "", path : parts.path, query : parts.query, host : parts.host, hosts : parts.hosts, auth : parts.auth, scheme : parts.scheme, hash : parts.hash};
	tink__$Url_Url_$Impl_$.makePayload(parts1);
	var this1 = parts1;
	return this1;
};
tink__$Url_Url_$Impl_$.fromRepresentation = function(v) {
	return tink__$Url_Url_$Impl_$.parse(tink_json__$Representation_Representation_$Impl_$.get(v));
};
tink__$Url_Url_$Impl_$.toRepresentation = function(this1) {
	var this2 = tink__$Url_Url_$Impl_$.toString(this1);
	return this2;
};
var tink_chunk_ByteChunk = function(data,from,to) {
	this.data = data;
	this.from = from;
	this.to = to;
};
tink_chunk_ByteChunk.__name__ = true;
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.of = function(b) {
	if(b.length == 0) {
		return tink__$Chunk_Chunk_$Impl_$.EMPTY;
	}
	var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
	ret.wrapped = b;
	return ret;
};
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
tink_chunk_ByteChunk.prototype = $extend(tink_chunk_ChunkBase.prototype,{
	get_wrapped: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	,getByte: function(index) {
		return this.data.bytes[this.from + index];
	}
	,flatten: function(into) {
		into.push(this);
	}
	,getLength: function() {
		return this.to - this.from;
	}
	,getSlice: function(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	,slice: function(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	,blitTo: function(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	,toBytes: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	,toString: function() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	,__class__: tink_chunk_ByteChunk
});
var tink_chunk_ChunkCursor = function() {
	this.currentByte = -1;
	this.currentPos = 0;
	this.length = 0;
	this.curLength = 0;
	this.curOffset = 0;
	this.curPartIndex = 0;
};
tink_chunk_ChunkCursor.__name__ = true;
tink_chunk_ChunkCursor.create = function(parts) {
	var ret = new tink_chunk_ChunkCursor();
	ret.parts = parts;
	ret.reset();
	return ret;
};
tink_chunk_ChunkCursor.prototype = {
	clone: function() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	,reset: function() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		}
	}
	,flush: function() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	,prune: function() {
		this.shift();
	}
	,add: function(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	,shift: function(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g1 = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				var rest = _g1;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	,clear: function() {
		this.parts = [];
		this.reset();
	}
	,left: function() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink__$Chunk_Chunk_$Impl_$.join(left);
	}
	,right: function() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink__$Chunk_Chunk_$Impl_$.join(right);
	}
	,seek: function(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else if(options.withoutPruning == null) {
									_gthis.shift();
								} else if(options.withoutPruning == false) {
									_gthis.shift();
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g2 = part(this.curPart,this.curOffset);
		if(_g2._hx_index == 1) {
			var _g3 = this.curPartIndex + 1;
			var _g11 = this.parts.length;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var _g4 = part(this.parts[i1],0);
				switch(_g4._hx_index) {
				case 0:
					var v = _g4.v;
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v1 = _g2;
			return v1;
		}
	}
	,sweep: function(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	,sweepTo: function(pos) {
		return this.sweep(pos - this.currentPos);
	}
	,moveBy: function(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	,moveTo: function(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	,ffwd: function() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	,next: function() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		} else {
			var _this2 = this.curPart;
			this.currentByte = _this2.data.bytes[_this2.from + ++this.curOffset];
		}
		return true;
	}
	,__class__: tink_chunk_ChunkCursor
};
var tink_chunk_ChunkIterator = function(target) {
	this.target = target;
	this._hasNext = target.length > target.currentPos;
};
tink_chunk_ChunkIterator.__name__ = true;
tink_chunk_ChunkIterator.prototype = {
	hasNext: function() {
		return this._hasNext;
	}
	,next: function() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
	,__class__: tink_chunk_ChunkIterator
};
var tink_chunk__$Seekable_Seekable_$Impl_$ = {};
tink_chunk__$Seekable_Seekable_$Impl_$.__name__ = true;
tink_chunk__$Seekable_Seekable_$Impl_$._new = function(a) {
	var this1 = a;
	return this1;
};
tink_chunk__$Seekable_Seekable_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_chunk__$Seekable_Seekable_$Impl_$.get = function(this1,index) {
	return this1[index];
};
tink_chunk__$Seekable_Seekable_$Impl_$.ofChunk = function(c) {
	return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(c.toBytes());
};
tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes = function(b) {
	var _g = [];
	var _g1 = 0;
	var _g2 = b.length;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(b.b[i]);
	}
	var this1 = _g;
	return this1;
};
tink_chunk__$Seekable_Seekable_$Impl_$.ofString = function(s) {
	return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
};
var tink_chunk_nodejs_BufferChunk = function(buffer) {
	this.buffer = buffer;
};
tink_chunk_nodejs_BufferChunk.__name__ = true;
tink_chunk_nodejs_BufferChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_nodejs_BufferChunk.prototype = {
	getByte: function(i) {
		return this.buffer[i];
	}
	,getCursor: function() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	,flatten: function(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	,getLength: function() {
		return this.buffer.length;
	}
	,slice: function(from,to) {
		if(to > this.getLength()) {
			to = this.getLength();
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else if(to == this.getLength() && from == 0) {
			return this;
		} else {
			return new tink_chunk_nodejs_BufferChunk(this.buffer.slice(from,to));
		}
	}
	,toString: function() {
		return this.buffer.toString();
	}
	,toBytes: function() {
		var copy = tink_chunk_nodejs_BufferChunk.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	,blitTo: function(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
		return;
	}
	,__class__: tink_chunk_nodejs_BufferChunk
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
tink_core_Annex.prototype = {
	__class__: tink_core_Annex
};
var tink_core__$Callback_Callback_$Impl_$ = {};
tink_core__$Callback_Callback_$Impl_$.__name__ = true;
tink_core__$Callback_Callback_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.toFunction = function(this1) {
	return this1;
};
tink_core__$Callback_Callback_$Impl_$.invoke = function(this1,data) {
	if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
		tink_core__$Callback_Callback_$Impl_$.depth++;
		this1(data);
		tink_core__$Callback_Callback_$Impl_$.depth--;
	} else {
		var _e = this1;
		var f = function(data1) {
			tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
		};
		var data2 = data;
		tink_core__$Callback_Callback_$Impl_$.defer(function() {
			f(data2);
		});
	}
};
tink_core__$Callback_Callback_$Impl_$.ignore = function(cb) {
	return function(_) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
	};
};
tink_core__$Callback_Callback_$Impl_$.fromNiladic = function(f) {
	return f;
};
tink_core__$Callback_Callback_$Impl_$.fromMany = function(callbacks) {
	return function(v) {
		var _g = 0;
		while(_g < callbacks.length) {
			var callback = callbacks[_g];
			++_g;
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,v);
		}
	};
};
tink_core__$Callback_Callback_$Impl_$.defer = function(f) {
	process.nextTick(f);
};
var tink_core__$Callback_LinkObject = function() { };
tink_core__$Callback_LinkObject.__name__ = true;
tink_core__$Callback_LinkObject.prototype = {
	__class__: tink_core__$Callback_LinkObject
};
var tink_core__$Callback_CallbackLink_$Impl_$ = {};
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackLink_$Impl_$._new = function(link) {
	var this1 = new tink_core__$Callback_SimpleLink(link);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.cancel = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.dissolve = function(this1) {
	if(this1 != null) {
		this1.cancel();
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.noop = function() {
};
tink_core__$Callback_CallbackLink_$Impl_$.toFunction = function(this1) {
	if(this1 == null) {
		return tink_core__$Callback_CallbackLink_$Impl_$.noop;
	} else {
		return $bind(this1,this1.cancel);
	}
};
tink_core__$Callback_CallbackLink_$Impl_$.toCallback = function(this1) {
	return function(_) {
		this1.cancel();
	};
};
tink_core__$Callback_CallbackLink_$Impl_$.fromFunction = function(f) {
	var this1 = new tink_core__$Callback_SimpleLink(f);
	return this1;
};
tink_core__$Callback_CallbackLink_$Impl_$.join = function(a,b) {
	return new tink_core__$Callback_LinkPair(a,b);
};
tink_core__$Callback_CallbackLink_$Impl_$.fromMany = function(callbacks) {
	var this1 = new tink_core__$Callback_SimpleLink(function() {
		var _g = 0;
		while(_g < callbacks.length) {
			var cb = callbacks[_g];
			++_g;
			if(cb != null) {
				cb.cancel();
			}
		}
	});
	return this1;
};
var tink_core__$Callback_SimpleLink = function(f) {
	this.f = f;
};
tink_core__$Callback_SimpleLink.__name__ = true;
tink_core__$Callback_SimpleLink.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_SimpleLink.prototype = {
	cancel: function() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
	,__class__: tink_core__$Callback_SimpleLink
};
var tink_core__$Callback_LinkPair = function(a,b) {
	this.dissolved = false;
	this.a = a;
	this.b = b;
};
tink_core__$Callback_LinkPair.__name__ = true;
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_LinkPair.prototype = {
	cancel: function() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
	,__class__: tink_core__$Callback_LinkPair
};
var tink_core__$Callback_ListCell = function(cb,list) {
	if(cb == null) {
		throw new js__$Boot_HaxeError("callback expected but null received");
	}
	this.cb = cb;
	this.list = list;
};
tink_core__$Callback_ListCell.__name__ = true;
tink_core__$Callback_ListCell.__interfaces__ = [tink_core__$Callback_LinkObject];
tink_core__$Callback_ListCell.prototype = {
	invoke: function(data) {
		if(this.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	,clear: function() {
		this.list = null;
		this.cb = null;
	}
	,cancel: function() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
	,__class__: tink_core__$Callback_ListCell
};
var tink_core__$Callback_CallbackList_$Impl_$ = {};
tink_core__$Callback_CallbackList_$Impl_$.__name__ = true;
tink_core__$Callback_CallbackList_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_core__$Callback_CallbackList_$Impl_$.get_length = function(this1) {
	return this1.length;
};
tink_core__$Callback_CallbackList_$Impl_$.add = function(this1,cb) {
	var node = new tink_core__$Callback_ListCell(cb,this1);
	this1.push(node);
	return node;
};
tink_core__$Callback_CallbackList_$Impl_$.invoke = function(this1,data) {
	var _g = 0;
	var _g1 = this1.slice();
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
tink_core__$Callback_CallbackList_$Impl_$.clear = function(this1) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		cell.clear();
	}
};
tink_core__$Callback_CallbackList_$Impl_$.invokeAndClear = function(this1,data) {
	var _g = 0;
	var _g1 = this1.splice(0,this1.length);
	while(_g < _g1.length) {
		var cell = _g1[_g];
		++_g;
		if(cell.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
		}
	}
};
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.isTinkError = true;
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.asError = function(v) {
	if(v != null && v.isTinkError) {
		return v;
	} else {
		return null;
	}
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		var _g = tink_core_TypedError.asError(e1);
		var tmp;
		if(_g == null) {
			tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
		} else {
			var e2 = _g;
			tmp = e2;
		}
		return tink_core_Outcome.Failure(tmp);
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.tryFinally = function(f,cleanup) {
	try { return f(); } finally { cleanup(); }
	return null;
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	,__class__: tink_core_TypedError
};
var tink_core__$Error_Stack_$Impl_$ = {};
tink_core__$Error_Stack_$Impl_$.__name__ = true;
tink_core__$Error_Stack_$Impl_$.toString = function(this1) {
	return "Error stack not available. Compile with -D error_stack.";
};
var tink_core__$Future_FutureObject = function() { };
tink_core__$Future_FutureObject.__name__ = true;
tink_core__$Future_FutureObject.prototype = {
	__class__: tink_core__$Future_FutureObject
};
var tink_core__$Future_NeverFuture = function() {
};
tink_core__$Future_NeverFuture.__name__ = true;
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NeverFuture.prototype = {
	map: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,flatMap: function(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	,handle: function(callback) {
		return null;
	}
	,gather: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,eager: function() {
		return tink_core__$Future_NeverFuture.inst;
	}
	,__class__: tink_core__$Future_NeverFuture
};
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : true, __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
var tink_core__$Lazy_LazyObject = function() { };
tink_core__$Lazy_LazyObject.__name__ = true;
tink_core__$Lazy_LazyObject.prototype = {
	__class__: tink_core__$Lazy_LazyObject
};
var tink_core__$Lazy_LazyConst = function(value) {
	this.value = value;
};
tink_core__$Lazy_LazyConst.__name__ = true;
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyConst.prototype = {
	get: function() {
		return this.value;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyConst
};
var tink_core__$Future_SyncFuture = function(value) {
	this.value = value;
};
tink_core__$Future_SyncFuture.__name__ = true;
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SyncFuture.prototype = {
	map: function(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	,flatMap: function(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	,handle: function(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	,eager: function() {
		return this;
	}
	,gather: function() {
		return this;
	}
	,__class__: tink_core__$Future_SyncFuture
};
var tink_core__$Future_Future_$Impl_$ = {};
tink_core__$Future_Future_$Impl_$.__name__ = true;
tink_core__$Future_Future_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Future_SimpleFuture(f);
	return this1;
};
tink_core__$Future_Future_$Impl_$.first = function(this1,other) {
	var ret = new tink_core_FutureTrigger();
	var l1 = this1.handle($bind(ret,ret.trigger));
	var l2 = other.handle($bind(ret,ret.trigger));
	var ret1 = ret;
	if(l1 != null) {
		var this2 = l1;
		ret1.handle(function(_) {
			this2.cancel();
		});
	}
	if(l2 != null) {
		var this3 = l2;
		ret1.handle(function(_1) {
			this3.cancel();
		});
	}
	return ret1;
};
tink_core__$Future_Future_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.map(f);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatMap = function(this1,next,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(next);
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.next = function(this1,n) {
	return this1.flatMap(function(v) {
		return n(v);
	});
};
tink_core__$Future_Future_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(t) {
		var ret1 = other.map(function(a) {
			return merger(t,a);
		});
		return ret1;
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.flatten = function(f) {
	return new tink_core__$Future_NestedFuture(f);
};
tink_core__$Future_Future_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		promise.then(function(a) {
			cb(tink_core_Outcome.Success(a));
		}).catch(function(e) {
			var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 78, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
			cb(tmp);
		});
	});
};
tink_core__$Future_Future_$Impl_$.ofAny = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.asPromise = function(s) {
	return s;
};
tink_core__$Future_Future_$Impl_$.ofMany = function(futures,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
	var _g = 0;
	while(_g < futures.length) {
		var f = [futures[_g]];
		++_g;
		var ret1 = ret.flatMap((function(f1) {
			return function(results) {
				var ret2 = (function() {
					return function(result) {
						return results.concat([result]);
					};
				})();
				var ret3 = f1[0].map(ret2);
				return ret3;
			};
		})(f));
		ret = ret1;
	}
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Future_Future_$Impl_$.fromMany = function(futures) {
	return tink_core__$Future_Future_$Impl_$.ofMany(futures);
};
tink_core__$Future_Future_$Impl_$.lazy = function(l) {
	return new tink_core__$Future_SyncFuture(l);
};
tink_core__$Future_Future_$Impl_$.sync = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
};
tink_core__$Future_Future_$Impl_$.async = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(lazy) {
		return new tink_core__$Future_LazyTrigger(f);
	} else {
		var op = new tink_core_FutureTrigger();
		var wrapped = f;
		tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
		return op;
	}
};
tink_core__$Future_Future_$Impl_$.or = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.first(a,b);
};
tink_core__$Future_Future_$Impl_$.either = function(a,b) {
	var ret = a.map(haxe_ds_Either.Left);
	var ret1 = b.map(haxe_ds_Either.Right);
	return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
};
tink_core__$Future_Future_$Impl_$.and = function(a,b) {
	return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return this1;
	});
};
tink_core__$Future_Future_$Impl_$._tryFailingFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return map(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFlatMap = function(f,map) {
	var ret = f.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var ret1 = map(d).map(tink_core_Outcome.Success);
			return ret1.gather();
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryFailingMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._tryMap = function(f,map) {
	var ret = f.map(function(o) {
		return tink_core_OutcomeTools.map(o,map);
	});
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._flatMap = function(f,map) {
	var ret = f.flatMap(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$._map = function(f,map) {
	var ret = f.map(map);
	return ret.gather();
};
tink_core__$Future_Future_$Impl_$.trigger = function() {
	return new tink_core_FutureTrigger();
};
tink_core__$Future_Future_$Impl_$.delay = function(ms,value) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		haxe_Timer.delay(function() {
			cb(value.get());
		},ms);
	});
};
var tink_core__$Future_SimpleFuture = function(f) {
	this.f = f;
};
tink_core__$Future_SimpleFuture.__name__ = true;
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_SimpleFuture.prototype = {
	handle: function(callback) {
		return this.f(callback);
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	,flatMap: function(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,__class__: tink_core__$Future_SimpleFuture
};
var tink_core__$Future_NestedFuture = function(outer) {
	this.outer = outer;
};
tink_core__$Future_NestedFuture.__name__ = true;
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core__$Future_NestedFuture.prototype = {
	map: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,flatMap: function(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	,gather: function() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	,eager: function() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	,handle: function(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
	,__class__: tink_core__$Future_NestedFuture
};
var tink_core_FutureTrigger = function() {
	var this1 = [];
	this.list = this1;
};
tink_core_FutureTrigger.__name__ = true;
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
tink_core_FutureTrigger.gatherFuture = function(f) {
	var op = null;
	var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
		if(op == null) {
			op = new tink_core_FutureTrigger();
			f.handle($bind(op,op.trigger));
			f = null;
		}
		return op.handle(cb);
	});
	return this1;
};
tink_core_FutureTrigger.prototype = {
	handle: function(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	,map: function(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	,flatMap: function(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	,gather: function() {
		return this;
	}
	,eager: function() {
		return this;
	}
	,asFuture: function() {
		return this;
	}
	,trigger: function(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	,__class__: tink_core_FutureTrigger
};
var tink_core__$Future_LazyTrigger = function(op) {
	this.op = op;
	tink_core_FutureTrigger.call(this);
};
tink_core__$Future_LazyTrigger.__name__ = true;
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
tink_core__$Future_LazyTrigger.prototype = $extend(tink_core_FutureTrigger.prototype,{
	eager: function() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	,map: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.map.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	,flatMap: function(f) {
		var _gthis = this;
		if(this.op == null) {
			return tink_core_FutureTrigger.prototype.flatMap.call(this,f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	,handle: function(cb) {
		this.eager();
		return tink_core_FutureTrigger.prototype.handle.call(this,cb);
	}
	,__class__: tink_core__$Future_LazyTrigger
});
var tink_core_JsPromiseTools = function() { };
tink_core_JsPromiseTools.__name__ = true;
tink_core_JsPromiseTools.toSurprise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core_JsPromiseTools.toPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
var tink_core__$Lazy_Lazy_$Impl_$ = {};
tink_core__$Lazy_Lazy_$Impl_$.__name__ = true;
tink_core__$Lazy_Lazy_$Impl_$.get = function(this1) {
	return this1.get();
};
tink_core__$Lazy_Lazy_$Impl_$.ofFunc = function(f) {
	return new tink_core__$Lazy_LazyFunc(f);
};
tink_core__$Lazy_Lazy_$Impl_$.map = function(this1,f) {
	return this1.map(f);
};
tink_core__$Lazy_Lazy_$Impl_$.flatMap = function(this1,f) {
	return this1.flatMap(f);
};
tink_core__$Lazy_Lazy_$Impl_$.ofConst = function(c) {
	return new tink_core__$Lazy_LazyConst(c);
};
var tink_core__$Lazy_LazyFunc = function(f) {
	this.f = f;
};
tink_core__$Lazy_LazyFunc.__name__ = true;
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
tink_core__$Lazy_LazyFunc.prototype = {
	get: function() {
		if(this.f != null) {
			this.result = this.f();
			this.f = null;
		}
		return this.result;
	}
	,map: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	,flatMap: function(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
	,__class__: tink_core__$Lazy_LazyFunc
};
var tink_core_NamedWith = function(name,value) {
	this.name = name;
	this.value = value;
};
tink_core_NamedWith.__name__ = true;
tink_core_NamedWith.prototype = {
	__class__: tink_core_NamedWith
};
var tink_core_OptionTools = function() { };
tink_core_OptionTools.__name__ = true;
tink_core_OptionTools.force = function(o,pos) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
	}
};
tink_core_OptionTools.or = function(o,l) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return l.get();
	}
};
tink_core_OptionTools.orNull = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return v;
	} else {
		return null;
	}
};
tink_core_OptionTools.filter = function(o,f) {
	if(o._hx_index == 0) {
		if(f(o.v) == false) {
			return haxe_ds_Option.None;
		} else {
			return o;
		}
	} else {
		return o;
	}
};
tink_core_OptionTools.satisfies = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return false;
	}
};
tink_core_OptionTools.equals = function(o,v) {
	if(o._hx_index == 0) {
		var v1 = o.v;
		return v1 == v;
	} else {
		return false;
	}
};
tink_core_OptionTools.map = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return haxe_ds_Option.Some(f(v));
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.flatMap = function(o,f) {
	if(o._hx_index == 0) {
		var v = o.v;
		return f(v);
	} else {
		return haxe_ds_Option.None;
	}
};
tink_core_OptionTools.iterator = function(o) {
	return new tink_core_OptionIter(o);
};
tink_core_OptionTools.toArray = function(o) {
	if(o._hx_index == 0) {
		var v = o.v;
		return [v];
	} else {
		return [];
	}
};
var tink_core_OptionIter = function(o) {
	this.alive = true;
	if(o._hx_index == 0) {
		var v = o.v;
		this.value = v;
	} else {
		this.alive = false;
	}
};
tink_core_OptionIter.__name__ = true;
tink_core_OptionIter.prototype = {
	hasNext: function() {
		return this.alive;
	}
	,next: function() {
		this.alive = false;
		return this.value;
	}
	,__class__: tink_core_OptionIter
};
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : true, __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
var tink_core_OutcomeTools = function() { };
tink_core_OutcomeTools.__name__ = true;
tink_core_OutcomeTools.sure = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		var failure = outcome.failure;
		var _g = tink_core_TypedError.asError(failure);
		if(_g == null) {
			throw new js__$Boot_HaxeError(failure);
		} else {
			var e = _g;
			return e.throwSelf();
		}
		break;
	}
};
tink_core_OutcomeTools.toOption = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return haxe_ds_Option.Some(data);
	case 1:
		return haxe_ds_Option.None;
	}
};
tink_core_OutcomeTools.toOutcome = function(option,pos) {
	switch(option._hx_index) {
	case 0:
		var value = option.v;
		return tink_core_Outcome.Success(value);
	case 1:
		return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
	}
};
tink_core_OutcomeTools.orNull = function(outcome) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		return null;
	}
};
tink_core_OutcomeTools.orUse = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.orTry = function(outcome,fallback) {
	switch(outcome._hx_index) {
	case 0:
		return outcome;
	case 1:
		return fallback.get();
	}
};
tink_core_OutcomeTools.equals = function(outcome,to) {
	switch(outcome._hx_index) {
	case 0:
		var data = outcome.data;
		return data == to;
	case 1:
		return false;
	}
};
tink_core_OutcomeTools.map = function(outcome,transform) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(transform(a));
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.isSuccess = function(outcome) {
	if(outcome._hx_index == 0) {
		return true;
	} else {
		return false;
	}
};
tink_core_OutcomeTools.flatMap = function(o,mapper) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
};
tink_core_OutcomeTools.swap = function(outcome,v) {
	switch(outcome._hx_index) {
	case 0:
		var a = outcome.data;
		return tink_core_Outcome.Success(v);
	case 1:
		var f = outcome.failure;
		return tink_core_Outcome.Failure(f);
	}
};
tink_core_OutcomeTools.attempt = function(f,report) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		return tink_core_Outcome.Failure(report(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
	}
};
tink_core_OutcomeTools.flatten = function(o) {
	switch(o._hx_index) {
	case 0:
		switch(o.data._hx_index) {
		case 0:
			var d = o.data.data;
			return tink_core_Outcome.Success(d);
		case 1:
			var f = o.data.failure;
			return tink_core_Outcome.Failure(f);
		}
		break;
	case 1:
		var f1 = o.failure;
		return tink_core_Outcome.Failure(f1);
	}
};
var tink_core__$Outcome_OutcomeMapper_$Impl_$ = {};
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = true;
tink_core__$Outcome_OutcomeMapper_$Impl_$._new = function(f) {
	var this1 = { f : f};
	return this1;
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.apply = function(this1,o) {
	return this1.f(o);
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	});
};
tink_core__$Outcome_OutcomeMapper_$Impl_$.withEitherError = function(f) {
	return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			var _g = f(d);
			switch(_g._hx_index) {
			case 0:
				var d1 = _g.data;
				return tink_core_Outcome.Success(d1);
			case 1:
				var f1 = _g.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
			}
			break;
		case 1:
			var f2 = o.failure;
			return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
		}
	});
};
var tink_core__$Pair_Pair_$Impl_$ = {};
tink_core__$Pair_Pair_$Impl_$.__name__ = true;
tink_core__$Pair_Pair_$Impl_$._new = function(a,b) {
	var this1 = new tink_core_MPair(a,b);
	return this1;
};
tink_core__$Pair_Pair_$Impl_$.get_a = function(this1) {
	return this1.a;
};
tink_core__$Pair_Pair_$Impl_$.get_b = function(this1) {
	return this1.b;
};
tink_core__$Pair_Pair_$Impl_$.toBool = function(this1) {
	return this1 != null;
};
tink_core__$Pair_Pair_$Impl_$.isNil = function(this1) {
	return this1 == null;
};
tink_core__$Pair_Pair_$Impl_$.nil = function() {
	return null;
};
var tink_core_MPair = function(a,b) {
	this.a = a;
	this.b = b;
};
tink_core_MPair.__name__ = true;
tink_core_MPair.prototype = {
	__class__: tink_core_MPair
};
var tink_core__$Promise_Promise_$Impl_$ = {};
tink_core__$Promise_Promise_$Impl_$.__name__ = true;
tink_core__$Promise_Promise_$Impl_$._new = function(f,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	var this1 = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		f(function(v) {
			cb(tink_core_Outcome.Success(v));
		},function(e) {
			cb(tink_core_Outcome.Failure(e));
		});
	},lazy);
	return this1;
};
tink_core__$Promise_Promise_$Impl_$.eager = function(this1) {
	return this1.eager();
};
tink_core__$Promise_Promise_$Impl_$.map = function(this1,f) {
	var ret = this1.map(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.flatMap = function(this1,f) {
	var ret = this1.flatMap(f);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.tryRecover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.recover = function(this1,f) {
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
		case 1:
			var e = o.failure;
			return f(e);
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.mapError = function(this1,f) {
	var ret = this1.map(function(o) {
		switch(o._hx_index) {
		case 0:
			return o;
		case 1:
			var e = o.failure;
			return tink_core_Outcome.Failure(f(e));
		}
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.handle = function(this1,cb) {
	return this1.handle(cb);
};
tink_core__$Promise_Promise_$Impl_$.noise = function(this1) {
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
	});
};
tink_core__$Promise_Promise_$Impl_$.isSuccess = function(this1) {
	var ret = this1.map(function(o) {
		return tink_core_OutcomeTools.isSuccess(o);
	});
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.next = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var ret = this1.flatMap(function(o) {
		switch(o._hx_index) {
		case 0:
			var d = o.data;
			return f(d);
		case 1:
			var f1 = o.failure;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
		}
	});
	if(gather) {
		return ret.gather();
	} else {
		return ret;
	}
};
tink_core__$Promise_Promise_$Impl_$.swap = function(this1,v) {
	return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
		return v;
	});
};
tink_core__$Promise_Promise_$Impl_$.swapError = function(this1,e) {
	return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
		return e;
	});
};
tink_core__$Promise_Promise_$Impl_$.merge = function(this1,other,merger,gather) {
	if(gather == null) {
		gather = true;
	}
	return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
		return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
			return merger(t,a);
		},false);
	},gather);
};
tink_core__$Promise_Promise_$Impl_$.and = function(a,b) {
	return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
		var this1 = new tink_core_MPair(a1,b1);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
	});
};
tink_core__$Promise_Promise_$Impl_$.iterate = function(promises,$yield,$finally,lazy) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		var iter = $getIterator(promises);
		var next = null;
		next = function() {
			if(iter.hasNext()) {
				iter.next().handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.data;
						$yield(v).handle(function(o1) {
							switch(o1._hx_index) {
							case 0:
								switch(o1.data._hx_index) {
								case 0:
									var ret = o1.data.v;
									cb(tink_core_Outcome.Success(ret));
									break;
								case 1:
									next();
									break;
								}
								break;
							case 1:
								var e = o1.failure;
								cb(tink_core_Outcome.Failure(e));
								break;
							}
						});
						break;
					case 1:
						var e1 = o.failure;
						cb(tink_core_Outcome.Failure(e1));
						break;
					}
				});
			} else {
				$finally.handle(cb);
			}
		};
		next();
	},lazy);
};
tink_core__$Promise_Promise_$Impl_$.retry = function(gen,next) {
	var stamp = function() {
		return Date.now() / 1000 * 1000;
	};
	var start = stamp();
	var attempt = null;
	attempt = function(count) {
		var f = function(error) {
			var f1 = stamp() - start;
			return tink_core__$Promise_Promise_$Impl_$.next(next({ attempt : count, error : error, elapsed : f1}),function(_) {
				return attempt(count + 1);
			});
		};
		var ret = gen().flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	};
	return attempt(1);
};
tink_core__$Promise_Promise_$Impl_$.ofJsPromise = function(promise) {
	return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
};
tink_core__$Promise_Promise_$Impl_$.ofSpecific = function(s) {
	return s;
};
tink_core__$Promise_Promise_$Impl_$.ofFuture = function(f) {
	var ret = f.map(tink_core_Outcome.Success);
	return ret.gather();
};
tink_core__$Promise_Promise_$Impl_$.ofOutcome = function(o) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
};
tink_core__$Promise_Promise_$Impl_$.ofError = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
tink_core__$Promise_Promise_$Impl_$.ofData = function(d) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
};
tink_core__$Promise_Promise_$Impl_$.lazy = function(p) {
	return tink_core__$Future_Future_$Impl_$.async(function(cb) {
		p.get().handle(cb);
	},true);
};
tink_core__$Promise_Promise_$Impl_$.inParallel = function(a,concurrency,lazy) {
	if(a.length == 0) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
	} else {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var result = [];
			var pending = a.length;
			var links = null;
			var linkArray = [];
			var sync = false;
			var i = 0;
			var iter = HxOverrides.iter(a);
			var next = null;
			var done = function(o) {
				if(links == null) {
					sync = true;
				} else if(links != null) {
					links.cancel();
				}
				cb(o);
			};
			var fail = function(e) {
				pending = 0;
				done(tink_core_Outcome.Failure(e));
			};
			var set = function(index,value) {
				result[index] = value;
				if((pending -= 1) == 0) {
					done(tink_core_Outcome.Success(result));
				} else if(iter.hasNext() && pending > 0) {
					next();
				}
			};
			next = function() {
				i += 1;
				var index1 = i - 1;
				var next1 = iter.next().handle(function(o1) {
					switch(o1._hx_index) {
					case 0:
						var v = o1.data;
						set(index1,v);
						break;
					case 1:
						var e1 = o1.failure;
						fail(e1);
						break;
					}
				});
				linkArray.push(next1);
			};
			while(true) {
				var tmp;
				if(iter.hasNext() && pending > 0) {
					if(concurrency != null) {
						concurrency -= 1;
						tmp = concurrency + 1 > 0;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					break;
				}
				next();
			}
			links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
			if(sync) {
				if(links != null) {
					links.cancel();
				}
			}
		},lazy);
	}
};
tink_core__$Promise_Promise_$Impl_$.inSequence = function(a) {
	var loop = null;
	loop = function(index) {
		if(index == a.length) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
				return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
				});
			});
		}
	};
	return loop(0);
};
tink_core__$Promise_Promise_$Impl_$.cache = function(gen) {
	var p = null;
	return function() {
		var ret = p;
		if(ret == null) {
			var sync = false;
			ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
				o.b.handle(function(_) {
					sync = true;
					p = null;
				});
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
			});
			if(!sync) {
				p = ret;
			}
		}
		var ret1 = ret.map(function(o1) {
			if(!tink_core_OutcomeTools.isSuccess(o1)) {
				p = null;
			}
			return o1;
		});
		return ret1.gather();
	};
};
tink_core__$Promise_Promise_$Impl_$.lift = function(p) {
	return p;
};
tink_core__$Promise_Promise_$Impl_$.trigger = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core__$Promise_Promise_$Impl_$.resolve = function(v) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
};
tink_core__$Promise_Promise_$Impl_$.reject = function(e) {
	return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
};
var tink_core__$Promise_Next_$Impl_$ = {};
tink_core__$Promise_Next_$Impl_$.__name__ = true;
tink_core__$Promise_Next_$Impl_$.ofSafe = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
	};
};
tink_core__$Promise_Next_$Impl_$.ofSync = function(f) {
	return function(x) {
		var ret = f(x).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Next_$Impl_$.ofSafeSync = function(f) {
	return function(x) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
	};
};
tink_core__$Promise_Next_$Impl_$._chain = function(a,b) {
	return function(v) {
		return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
	};
};
var tink_core__$Promise_Recover_$Impl_$ = {};
tink_core__$Promise_Recover_$Impl_$.__name__ = true;
tink_core__$Promise_Recover_$Impl_$.ofSync = function(f) {
	return function(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
	};
};
var tink_core__$Promise_Combiner_$Impl_$ = {};
tink_core__$Promise_Combiner_$Impl_$.__name__ = true;
tink_core__$Promise_Combiner_$Impl_$.ofSafe = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSync = function(f) {
	return function(x1,x2) {
		var ret = f(x1,x2).map(tink_core_Outcome.Success);
		return ret.gather();
	};
};
tink_core__$Promise_Combiner_$Impl_$.ofSafeSync = function(f) {
	return function(x1,x2) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
	};
};
var tink_core__$Promise_PromiseTrigger_$Impl_$ = {};
tink_core__$Promise_PromiseTrigger_$Impl_$.__name__ = true;
tink_core__$Promise_PromiseTrigger_$Impl_$._new = function() {
	var this1 = new tink_core_FutureTrigger();
	return this1;
};
tink_core__$Promise_PromiseTrigger_$Impl_$.resolve = function(this1,v) {
	return this1.trigger(tink_core_Outcome.Success(v));
};
tink_core__$Promise_PromiseTrigger_$Impl_$.reject = function(this1,e) {
	return this1.trigger(tink_core_Outcome.Failure(e));
};
tink_core__$Promise_PromiseTrigger_$Impl_$.asPromise = function(this1) {
	return this1;
};
var tink_core__$Ref_Ref_$Impl_$ = {};
tink_core__$Ref_Ref_$Impl_$.__name__ = true;
tink_core__$Ref_Ref_$Impl_$._new = function() {
	var this1 = new Array(1);
	var this2 = this1;
	return this2;
};
tink_core__$Ref_Ref_$Impl_$.get_value = function(this1) {
	return this1[0];
};
tink_core__$Ref_Ref_$Impl_$.set_value = function(this1,param) {
	return this1[0] = param;
};
tink_core__$Ref_Ref_$Impl_$.toString = function(this1) {
	return "@[" + Std.string(this1[0]) + "]";
};
tink_core__$Ref_Ref_$Impl_$.to = function(v) {
	var this1 = new Array(1);
	var this2 = this1;
	var ret = this2;
	ret[0] = v;
	return ret;
};
var tink_core__$Signal_Signal_$Impl_$ = {};
tink_core__$Signal_Signal_$Impl_$.__name__ = true;
tink_core__$Signal_Signal_$Impl_$._new = function(f) {
	var this1 = new tink_core__$Signal_SimpleSignal(f);
	return this1;
};
tink_core__$Signal_Signal_$Impl_$.map = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var this3 = f(result);
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.flatMap = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			f(result).handle(cb);
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.filter = function(this1,f,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			if(f(result)) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.select = function(this1,selector,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return this1.handle(function(result) {
			var _g = selector(result);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
				break;
			case 1:
				break;
			}
		});
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.join = function(this1,other,gather) {
	if(gather == null) {
		gather = true;
	}
	var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
		return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
	});
	var ret = this2;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
tink_core__$Signal_Signal_$Impl_$.nextTime = function(this1,condition) {
	var ret = new tink_core_FutureTrigger();
	var link = null;
	var immediate = false;
	link = this1.handle(function(v) {
		if(condition == null || condition(v)) {
			ret.trigger(v);
			if(link == null) {
				immediate = true;
			} else if(link != null) {
				link.cancel();
			}
		}
	});
	if(immediate) {
		if(link != null) {
			link.cancel();
		}
	}
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.until = function(this1,end) {
	var ret = new tink_core__$Signal_Suspendable(function($yield) {
		var this2 = this1.handle($yield);
		if(this2 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return ($_=this2,$bind($_,$_.cancel));
		}
	});
	end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.next = function(this1,condition) {
	return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
};
tink_core__$Signal_Signal_$Impl_$.noise = function(this1) {
	return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
		return tink_core_Noise.Noise;
	});
};
tink_core__$Signal_Signal_$Impl_$.gather = function(this1) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	this1.handle(function(x) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
	});
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.generate = function(generator) {
	var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
	generator($bind(ret,ret.trigger));
	return ret;
};
tink_core__$Signal_Signal_$Impl_$.trigger = function() {
	return new tink_core_SignalTrigger();
};
tink_core__$Signal_Signal_$Impl_$.create = function(create) {
	return new tink_core__$Signal_Suspendable(create);
};
tink_core__$Signal_Signal_$Impl_$.ofClassical = function(add,remove,gather) {
	if(gather == null) {
		gather = true;
	}
	var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
		var f = function(a) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
		};
		add(f);
		var f1 = remove;
		var a1 = f;
		var this2 = new tink_core__$Callback_SimpleLink(function() {
			f1(a1);
		});
		return this2;
	});
	var ret = this1;
	if(gather) {
		return tink_core__$Signal_Signal_$Impl_$.gather(ret);
	} else {
		return ret;
	}
};
var tink_core_SignalObject = function() { };
tink_core_SignalObject.__name__ = true;
tink_core_SignalObject.prototype = {
	__class__: tink_core_SignalObject
};
var tink_core__$Signal_SimpleSignal = function(f) {
	this.f = f;
};
tink_core__$Signal_SimpleSignal.__name__ = true;
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_SimpleSignal.prototype = {
	handle: function(cb) {
		return this.f(cb);
	}
	,__class__: tink_core__$Signal_SimpleSignal
};
var tink_core__$Signal_Suspendable = function(activate) {
	this.killed = false;
	this.trigger = new tink_core_SignalTrigger();
	this.activate = activate;
};
tink_core__$Signal_Suspendable.__name__ = true;
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
tink_core__$Signal_Suspendable.prototype = {
	kill: function() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	,handle: function(cb) {
		var _gthis = this;
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.length == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var a = tink_core__$Callback_CallbackList_$Impl_$.add(this.trigger.handlers,cb);
		var this1 = new tink_core__$Callback_SimpleLink(function() {
			if(_gthis.trigger.handlers.length == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(a,this1);
	}
	,__class__: tink_core__$Signal_Suspendable
};
var tink_core_SignalTrigger = function() {
	this.handlers = [];
};
tink_core_SignalTrigger.__name__ = true;
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
tink_core_SignalTrigger.prototype = {
	trigger: function(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	,getLength: function() {
		return this.handlers.length;
	}
	,handle: function(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	,clear: function() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	,asSignal: function() {
		return this;
	}
	,__class__: tink_core_SignalTrigger
};
var tink_http_Chunked = function() { };
tink_http_Chunked.__name__ = true;
tink_http_Chunked.encoder = function() {
	if(tink_http_Chunked._encoder == null) {
		tink_http_Chunked._encoder = new tink_http_ChunkedEncoder();
	}
	return tink_http_Chunked._encoder;
};
tink_http_Chunked.decoder = function() {
	if(tink_http_Chunked._decoder == null) {
		tink_http_Chunked._decoder = new tink_http_ChunkedDecoder();
	}
	return tink_http_Chunked._decoder;
};
tink_http_Chunked.encode = function(source) {
	return tink_http_Chunked.encoder().transform(source);
};
tink_http_Chunked.decode = function(source) {
	return tink_http_Chunked.decoder().transform(source);
};
var tink_io_Transformer = function() { };
tink_io_Transformer.__name__ = true;
tink_io_Transformer.prototype = {
	__class__: tink_io_Transformer
};
var tink_http_ChunkedEncoder = function() {
};
tink_http_ChunkedEncoder.__name__ = true;
tink_http_ChunkedEncoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedEncoder.prototype = {
	transform: function(source) {
		return tink_io__$Source_Source_$Impl_$.chunked(source).map(tink_streams__$Stream_Mapping_$Impl_$.ofPlain(function(chunk) {
			return tink__$Chunk_Chunk_$Impl_$.catChunk(tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("" + StringTools.hex(chunk.getLength()) + "\r\n")),chunk),tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("\r\n")));
		})).append(tink_streams__$Stream_Stream_$Impl_$.ofIterator(HxOverrides.iter([tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString("0\r\n"))])));
	}
	,__class__: tink_http_ChunkedEncoder
};
var tink_http_ChunkedDecoder = function() {
};
tink_http_ChunkedDecoder.__name__ = true;
tink_http_ChunkedDecoder.__interfaces__ = [tink_io_Transformer];
tink_http_ChunkedDecoder.prototype = {
	transform: function(source) {
		return tink_io_RealSourceTools.parseStream(source,new tink_http_ChunkedParser()).map(tink_streams__$Stream_Mapping_$Impl_$.ofPlain(function(v) {
			if(v == null) {
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			} else {
				return v;
			}
		}));
	}
	,__class__: tink_http_ChunkedDecoder
};
var tink_io_StreamParserObject = function() { };
tink_io_StreamParserObject.__name__ = true;
tink_io_StreamParserObject.prototype = {
	__class__: tink_io_StreamParserObject
};
var tink_http_ChunkedParser = function() {
	this.reset();
};
tink_http_ChunkedParser.__name__ = true;
tink_http_ChunkedParser.__interfaces__ = [tink_io_StreamParserObject];
tink_http_ChunkedParser.prototype = {
	reset: function() {
		this.chunkSize = -1;
	}
	,progress: function(cursor) {
		if(this.chunkSize < 0) {
			var _g = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g._hx_index) {
			case 0:
				var v = _g.v;
				this.chunkSize = Std.parseInt("0x" + v.toString());
				break;
			case 1:
				break;
			}
			return tink_io_ParseStep.Progressed;
		} else if(this.chunkSize == 0) {
			return tink_io_ParseStep.Progressed;
		} else if(cursor.length >= this.chunkSize + 2) {
			var _g1 = cursor.seek(tink_http_ChunkedParser.LINEBREAK);
			switch(_g1._hx_index) {
			case 0:
				var v1 = _g1.v;
				this.reset();
				return tink_io_ParseStep.Done(v1);
			case 1:
				return tink_io_ParseStep.Failed(new tink_core_TypedError(null,"Invalid encoding",{ fileName : "tink/http/Chunked.hx", lineNumber : 82, className : "tink.http.ChunkedParser", methodName : "progress"}));
			}
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,eof: function(rest) {
		if(this.chunkSize == 0) {
			return tink_core_Outcome.Success(tink__$Chunk_Chunk_$Impl_$.EMPTY);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Unexpected end of input",{ fileName : "tink/http/Chunked.hx", lineNumber : 89, className : "tink.http.ChunkedParser", methodName : "eof"}));
		}
	}
	,__class__: tink_http_ChunkedParser
};
var tink_http_Container = function() { };
tink_http_Container.__name__ = true;
tink_http_Container.prototype = {
	__class__: tink_http_Container
};
var tink_http_ContainerResult = $hxEnums["tink.http.ContainerResult"] = { __ename__ : true, __constructs__ : ["Running","Failed","Shutdown"]
	,Running: ($_=function(running) { return {_hx_index:0,running:running,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["running"],$_)
	,Failed: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.http.ContainerResult",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Shutdown: {_hx_index:2,__enum__:"tink.http.ContainerResult",toString:$estr}
};
var tink_http__$Handler_Handler_$Impl_$ = {};
tink_http__$Handler_Handler_$Impl_$.__name__ = true;
tink_http__$Handler_Handler_$Impl_$.applyMiddleware = function(this1,m) {
	return m.apply(this1);
};
tink_http__$Handler_Handler_$Impl_$.ofFunc = function(f) {
	return new tink_http_SimpleHandler(f);
};
var tink_http_HandlerObject = function() { };
tink_http_HandlerObject.__name__ = true;
tink_http_HandlerObject.prototype = {
	__class__: tink_http_HandlerObject
};
var tink_http_SimpleHandler = function(f) {
	this.f = f;
};
tink_http_SimpleHandler.__name__ = true;
tink_http_SimpleHandler.__interfaces__ = [tink_http_HandlerObject];
tink_http_SimpleHandler.prototype = {
	process: function(req) {
		return this.f(req);
	}
	,__class__: tink_http_SimpleHandler
};
var tink_http__$Header_ReadonlyMap_$Impl_$ = {};
tink_http__$Header_ReadonlyMap_$Impl_$.__name__ = true;
tink_http__$Header_ReadonlyMap_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
tink_http__$Header_ReadonlyMap_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
tink_http__$Header_ReadonlyMap_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
tink_http__$Header_ReadonlyMap_$Impl_$.keys = function(this1) {
	return this1.keys();
};
var tink_http_ContentType = function() {
	this.subtype = "*";
	this.type = "*";
	this.extensions = new haxe_ds_StringMap();
};
tink_http_ContentType.__name__ = true;
tink_http_ContentType.ofString = function(s) {
	var ret = new tink_http_ContentType();
	ret.raw = s;
	var parsed = tink_http__$Header_HeaderValue_$Impl_$.parse(s);
	var value = parsed[0].value;
	var _g = value.indexOf("/");
	if(_g == -1) {
		ret.type = value;
	} else {
		var pos = _g;
		ret.type = value.substring(0,pos);
		ret.subtype = value.substring(pos + 1);
	}
	ret.extensions = parsed[0].extensions;
	return ret;
};
tink_http_ContentType.prototype = {
	get_fullType: function() {
		return "" + this.type + "/" + this.subtype;
	}
	,toString: function() {
		return this.raw;
	}
	,__class__: tink_http_ContentType
};
var tink_http_Header = function(fields) {
	var tmp;
	if(fields == null) {
		tmp = [];
	} else {
		var v = fields;
		tmp = v;
	}
	this.fields = tmp;
};
tink_http_Header.__name__ = true;
tink_http_Header.prototype = {
	get: function(name) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			if(f.name == name) {
				_g.push(f.value);
			}
		}
		return _g;
	}
	,byName: function(name) {
		var _g = this.get(name);
		switch(_g.length) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"No " + name + " header found",{ fileName : "tink/http/Header.hx", lineNumber : 91, className : "tink.http.Header", methodName : "byName"}));
		case 1:
			var v = _g[0];
			return tink_core_Outcome.Success(v);
		default:
			var v1 = _g;
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Multiple entries for " + name + " header",{ fileName : "tink/http/Header.hx", lineNumber : 95, className : "tink.http.Header", methodName : "byName"}));
		}
	}
	,contentType: function() {
		return tink_core_OutcomeTools.map(this.byName("content-type"),tink_http_ContentType.ofString);
	}
	,iterator: function() {
		return HxOverrides.iter(this.fields);
	}
	,concat: function(fields) {
		return new tink_http_Header(this.fields.concat(fields));
	}
	,getContentLength: function() {
		var _g = this.byName("content-length");
		switch(_g._hx_index) {
		case 0:
			var _hx_tmp = Std.parseInt(_g.data);
			if(_hx_tmp == null) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Content-Length Header",{ fileName : "tink/http/Header.hx", lineNumber : 120, className : "tink.http.Header", methodName : "getContentLength"}));
			} else {
				var v = _hx_tmp;
				return tink_core_Outcome.Success(v);
			}
			break;
		case 1:
			var e = _g.failure;
			return tink_core_Outcome.Failure(e);
		}
	}
	,accepts: function(type) {
		var prefix = type.split("/")[0];
		return tink_core_OutcomeTools.map(this.byName("accept"),function(v) {
			var _g = 0;
			var _g1 = tink_http__$Header_HeaderValue_$Impl_$.parse(v);
			while(_g < _g1.length) {
				var entry = _g1[_g];
				++_g;
				if(entry.value == "*/*" || entry.value == type) {
					return true;
				}
				var _g2 = entry.value.split("/");
				if(_g2.length == 2 && _g2[1] == "*") {
					var p = _g2[0];
					if(prefix == p) {
						return true;
					}
				}
			}
			return false;
		});
	}
	,get_LINEBREAK: function() {
		return "\r\n";
	}
	,toString: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.fields;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(f.toString());
		}
		return _g.join("\r\n") + "\r\n" + "\r\n";
	}
	,headerNotFound: function(name) {
		return "No " + name + " header found";
	}
	,__class__: tink_http_Header
};
var tink_http__$Header_HeaderValue_$Impl_$ = {};
tink_http__$Header_HeaderValue_$Impl_$.__name__ = true;
tink_http__$Header_HeaderValue_$Impl_$.getExtension = function(this1) {
	return tink_http__$Header_HeaderValue_$Impl_$.parse(this1)[0].extensions;
};
tink_http__$Header_HeaderValue_$Impl_$.parse = function(this1) {
	return tink_http__$Header_HeaderValue_$Impl_$.parseWith(this1,function(_,params) {
		var _g = new haxe_ds_StringMap();
		var p = params;
		while(p.hasNext()) {
			var p1 = p.next();
			var key = p1.name;
			var value;
			var _g1 = tink_url__$Portion_Portion_$Impl_$.toString(p1.value);
			var quoted = _g1;
			if(HxOverrides.cca(quoted,0) == 34) {
				value = HxOverrides.substr(quoted,1,quoted.length - 2);
			} else {
				var v = _g1;
				value = v;
			}
			if(__map_reserved[key] != null) {
				_g.setReserved(key,value);
			} else {
				_g.h[key] = value;
			}
		}
		return _g;
	});
};
tink_http__$Header_HeaderValue_$Impl_$.parseWith = function(this1,parseExtension) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split(",");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		v = StringTools.trim(v);
		var i;
		var _g11 = v.indexOf(";");
		if(_g11 == -1) {
			i = v.length;
		} else {
			var i1 = _g11;
			i = i1;
		}
		var value = HxOverrides.substr(v,0,i);
		_g.push({ value : value, extensions : parseExtension(value,new tink_url__$Query_QueryStringParser(v,";","=",i + 1))});
	}
	return _g;
};
tink_http__$Header_HeaderValue_$Impl_$.basicAuth = function(username,password) {
	return "Basic " + haxe_crypto_Base64.encode(haxe_io_Bytes.ofString("" + username + ":" + password)).toString();
};
tink_http__$Header_HeaderValue_$Impl_$.ofDate = function(d) {
	return DateTools.format(d,tink_http__$Header_HeaderValue_$Impl_$.DAYS[d.getDay()] + ", %d " + tink_http__$Header_HeaderValue_$Impl_$.MONTHS[d.getMonth()] + " %Y %H:%M:%S GMT");
};
tink_http__$Header_HeaderValue_$Impl_$.ofInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
var tink_http__$Header_HeaderName_$Impl_$ = {};
tink_http__$Header_HeaderName_$Impl_$.__name__ = true;
tink_http__$Header_HeaderName_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
tink_http__$Header_HeaderName_$Impl_$.ofString = function(s) {
	var this1 = s.toLowerCase();
	return this1;
};
var tink_http_HeaderField = function(name,value) {
	tink_core_NamedWith.call(this,name,value);
};
tink_http_HeaderField.__name__ = true;
tink_http_HeaderField.ofString = function(s) {
	var _g = s.indexOf(":");
	if(_g == -1) {
		return new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString(s),null);
	} else {
		var v = _g;
		var name = HxOverrides.substr(s,0,v);
		return new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString(name),StringTools.trim(HxOverrides.substr(s,v + 1,null)));
	}
};
tink_http_HeaderField.setCookie = function(key,value,options) {
	if(options == null) {
		options = { };
	}
	var buf_b = "";
	buf_b += Std.string(encodeURIComponent(key) + "=" + encodeURIComponent(value));
	if(options.expires != null) {
		var value1 = tink_http__$Header_HeaderValue_$Impl_$.ofDate(options.expires);
		if(value1 != null) {
			buf_b += "; ";
			buf_b += "expires=";
			buf_b += Std.string(value1);
		}
	}
	var value2 = options.domain;
	if(value2 != null) {
		buf_b += "; ";
		buf_b += "domain=";
		buf_b += Std.string(value2);
	}
	var value3 = options.path;
	if(value3 != null) {
		buf_b += "; ";
		buf_b += "path=";
		buf_b += Std.string(value3);
	}
	if(options.secure) {
		buf_b += "; ";
		buf_b += "secure";
		buf_b += "";
	}
	if(options.scriptable != true) {
		buf_b += "; ";
		buf_b += "HttpOnly";
		buf_b += "";
	}
	return new tink_http_HeaderField("set-cookie",buf_b);
};
tink_http_HeaderField.__super__ = tink_core_NamedWith;
tink_http_HeaderField.prototype = $extend(tink_core_NamedWith.prototype,{
	toString: function() {
		if(this.value == null) {
			return this.name;
		} else {
			return "" + this.name + ": " + this.value;
		}
	}
	,__class__: tink_http_HeaderField
});
var tink_io_BytewiseParser = function() { };
tink_io_BytewiseParser.__name__ = true;
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
tink_io_BytewiseParser.prototype = {
	read: function(char) {
		throw new js__$Boot_HaxeError("abstract");
	}
	,progress: function(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				var r = _g.r;
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g.e;
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	,eof: function(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g.r;
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g.e;
			return tink_core_Outcome.Failure(e);
		}
	}
	,__class__: tink_io_BytewiseParser
};
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__ : true, __constructs__ : ["Progressed","Done","Failed"]
	,Progressed: {_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_http_HeaderParser = function(makeHeader) {
	this.last = -1;
	this.buf = new StringBuf();
	this.makeHeader = makeHeader;
};
tink_http_HeaderParser.__name__ = true;
tink_http_HeaderParser.__super__ = tink_io_BytewiseParser;
tink_http_HeaderParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function(c) {
		var _g = this.last;
		switch(c) {
		case -1:
			return this.nextLine();
		case 10:
			if(_g == 13) {
				return this.nextLine();
			} else {
				var other = c;
				this.last = other;
				this.buf.b += String.fromCodePoint(other);
				return tink_io_ParseStep.Progressed;
			}
			break;
		case 13:
			if(_g == 13) {
				var c1 = this.last;
				this.buf.b += String.fromCodePoint(c1);
				return tink_io_ParseStep.Progressed;
			} else {
				this.last = 13;
				return tink_io_ParseStep.Progressed;
			}
			break;
		default:
			if(_g == 13) {
				var other1 = c;
				var c2 = this.last;
				this.buf.b += String.fromCodePoint(c2);
				this.buf.b += String.fromCodePoint(other1);
				this.last = -1;
				return tink_io_ParseStep.Progressed;
			} else {
				var other2 = c;
				this.last = other2;
				this.buf.b += String.fromCodePoint(other2);
				return tink_io_ParseStep.Progressed;
			}
		}
	}
	,nextLine: function() {
		var line = this.buf.b;
		this.buf = new StringBuf();
		this.last = -1;
		if(line == "") {
			if(this.header == null) {
				return tink_io_ParseStep.Progressed;
			} else {
				return tink_io_ParseStep.Done(this.header);
			}
		} else if(this.header == null) {
			var _g = this.makeHeader(line,this.fields = []);
			switch(_g._hx_index) {
			case 0:
				if(_g.data == null) {
					return tink_io_ParseStep.Done(this.header = null);
				} else {
					var v = _g.data;
					this.header = v;
					return tink_io_ParseStep.Progressed;
				}
				break;
			case 1:
				var e = _g.failure;
				return tink_io_ParseStep.Failed(e);
			}
		} else {
			this.fields.push(tink_http_HeaderField.ofString(line));
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_http_HeaderParser
});
var tink_http_Message = function(header,body) {
	this.header = header;
	this.body = body;
};
tink_http_Message.__name__ = true;
tink_http_Message.prototype = {
	__class__: tink_http_Message
};
var tink_http__$Method_Method_$Impl_$ = {};
tink_http__$Method_Method_$Impl_$.__name__ = true;
tink_http__$Method_Method_$Impl_$.ofString = function(s,fallback) {
	var _g = s.toUpperCase();
	switch(_g) {
	case "DELETE":
		return "DELETE";
	case "GET":
		return "GET";
	case "HEAD":
		return "HEAD";
	case "OPTIONS":
		return "OPTIONS";
	case "PATCH":
		return "PATCH";
	case "POST":
		return "POST";
	case "PUT":
		return "PUT";
	default:
		var v = _g;
		return fallback(v);
	}
};
var tink_http__$Middleware_Middleware_$Impl_$ = {};
tink_http__$Middleware_Middleware_$Impl_$.__name__ = true;
tink_http__$Middleware_Middleware_$Impl_$.ofFunc = function(f) {
	return new tink_http_SimpleMiddleware(f);
};
var tink_http_MiddlewareObject = function() { };
tink_http_MiddlewareObject.__name__ = true;
tink_http_MiddlewareObject.prototype = {
	__class__: tink_http_MiddlewareObject
};
var tink_http_SimpleMiddleware = function(f) {
	this.f = f;
};
tink_http_SimpleMiddleware.__name__ = true;
tink_http_SimpleMiddleware.__interfaces__ = [tink_http_MiddlewareObject];
tink_http_SimpleMiddleware.prototype = {
	apply: function(handler) {
		return this.f(handler);
	}
	,__class__: tink_http_SimpleMiddleware
};
var tink_http_RequestHeader = function(method,url,protocol,fields) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.method = method;
	this.url = url;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_RequestHeader.__name__ = true;
tink_http_RequestHeader.__super__ = tink_http_Header;
tink_http_RequestHeader.prototype = $extend(tink_http_Header.prototype,{
	concat: function(fields) {
		return new tink_http_RequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,toString: function() {
		var this1 = this.url;
		return "" + this.method + " " + (this1.query == null ? this1.path : this1.path + "?" + this1.query) + " " + this.protocol + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_RequestHeader
});
var tink_http_IncomingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_IncomingRequestHeader.__name__ = true;
tink_http_IncomingRequestHeader.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var _g = line.split(" ");
		if(_g.length == 3) {
			var protocol = _g[2];
			var url = _g[1];
			var method = _g[0];
			return tink_core_Outcome.Success(new tink_http_IncomingRequestHeader(method,tink__$Url_Url_$Impl_$.fromString(url),protocol,headers));
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Request.hx", lineNumber : 95, className : "tink.http.IncomingRequestHeader", methodName : "parser"}));
		}
	});
};
tink_http_IncomingRequestHeader.fromIncomingMessage = function(req) {
	var req1 = req.method;
	var tmp = tink__$Url_Url_$Impl_$.fromString(req.url);
	var tmp1 = "HTTP/" + req.httpVersion;
	var _g = [];
	var _g1 = 0;
	var _g2 = req.rawHeaders.length / 2 | 0;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString(req.rawHeaders[2 * i]),req.rawHeaders[2 * i + 1]));
	}
	return new tink_http_IncomingRequestHeader(req1,tmp,tmp1,_g);
};
tink_http_IncomingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_IncomingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	getCookies: function() {
		if(this.cookies == null) {
			var _g = new haxe_ds_StringMap();
			var _g1 = 0;
			var _g2 = this.get(tink_http__$Header_HeaderName_$Impl_$.ofString("cookie"));
			while(_g1 < _g2.length) {
				var header = _g2[_g1];
				++_g1;
				var entry = new tink_url__$Query_QueryStringParser(header,";","=",0);
				while(entry.hasNext()) {
					var entry1 = entry.next();
					var key = entry1.name;
					var value = tink_url__$Portion_Portion_$Impl_$.toString(entry1.value);
					if(__map_reserved[key] != null) {
						_g.setReserved(key,value);
					} else {
						_g.h[key] = value;
					}
				}
			}
			this.cookies = _g;
		}
		return this.cookies;
	}
	,concat: function(fields) {
		return new tink_http_IncomingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,cookieNames: function() {
		return this.cookies.keys();
	}
	,getCookie: function(name) {
		var _this = this.getCookies();
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getAuth: function() {
		return this.getAuthWith(function(s,p) {
			switch(s) {
			case "Basic":
				var decoded;
				try {
					decoded = haxe_crypto_Base64.decode(p).toString();
				} catch( e ) {
					return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error in decoding basic auth",((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/http/Request.hx", lineNumber : 67, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				}
				var _g = decoded.indexOf(":");
				if(_g == -1) {
					return tink_core_Outcome.Failure(new tink_core_TypedError(null,"Cannot parse username and password because \":\" is missing",{ fileName : "tink/http/Request.hx", lineNumber : 69, className : "tink.http.IncomingRequestHeader", methodName : "getAuth"}));
				} else {
					var i = _g;
					return tink_core_Outcome.Success(tink_http_Authorization.Basic(HxOverrides.substr(decoded,0,i),HxOverrides.substr(decoded,i + 1,null)));
				}
				break;
			case "Bearer":
				return tink_core_Outcome.Success(tink_http_Authorization.Bearer(p));
			default:
				var s1 = s;
				return tink_core_Outcome.Success(tink_http_Authorization.Others(s1,p));
			}
		});
	}
	,getAuthWith: function(parser) {
		return tink_core_OutcomeTools.flatMap(this.byName("authorization"),tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(function(v) {
			var _g = v.indexOf(" ");
			if(_g == -1) {
				return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid Authorization Header",{ fileName : "tink/http/Request.hx", lineNumber : 81, className : "tink.http.IncomingRequestHeader", methodName : "getAuthWith"}));
			} else {
				var i = _g;
				return parser(HxOverrides.substr(v,0,i),HxOverrides.substr(v,i + 1,null));
			}
		}));
	}
	,__class__: tink_http_IncomingRequestHeader
});
var tink_http_OutgoingRequestHeader = function(method,url,protocol,fields) {
	tink_http_RequestHeader.call(this,method,url,protocol,fields);
};
tink_http_OutgoingRequestHeader.__name__ = true;
tink_http_OutgoingRequestHeader.__super__ = tink_http_RequestHeader;
tink_http_OutgoingRequestHeader.prototype = $extend(tink_http_RequestHeader.prototype,{
	concat: function(fields) {
		return new tink_http_OutgoingRequestHeader(this.method,this.url,this.protocol,this.fields.concat(fields));
	}
	,__class__: tink_http_OutgoingRequestHeader
});
var tink_http_OutgoingRequest = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_OutgoingRequest.__name__ = true;
tink_http_OutgoingRequest.__super__ = tink_http_Message;
tink_http_OutgoingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_OutgoingRequest
});
var tink_http_IncomingRequest = function(clientIp,header,body) {
	this.clientIp = clientIp;
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingRequest.__name__ = true;
tink_http_IncomingRequest.parse = function(clientIp,source) {
	return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.parse(source,tink_http_IncomingRequestHeader.parser()),function(parts) {
		var parts1 = parts.a;
		var _g = parts.a.getContentLength();
		var d;
		switch(_g._hx_index) {
		case 0:
			var len = _g.data;
			d = tink_io__$Source_Source_$Impl_$.limit(parts.b,len);
			break;
		case 1:
			var _g1 = parts.a.byName("transfer-encoding");
			switch(parts.a.method) {
			case "GET":case "OPTIONS":
				d = tink_io__$Source_Source_$Impl_$.EMPTY;
				break;
			default:
				if(_g1._hx_index == 0) {
					var encodings = _g1.data.split(",").map(StringTools.trim);
					if(encodings.indexOf("chunked") != -1) {
						var source1 = parts.b;
						d = tink_http_Chunked.decoder().transform(source1);
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
					}
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(411,"Content-Length header missing",{ fileName : "tink/http/Request.hx", lineNumber : 142, className : "tink.http.IncomingRequest", methodName : "parse"}))));
				}
			}
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(new tink_http_IncomingRequest(clientIp,parts1,tink_http_IncomingRequestBody.Plain(d)))));
	});
};
tink_http_IncomingRequest.__super__ = tink_http_Message;
tink_http_IncomingRequest.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingRequest
});
var tink_http_IncomingRequestBody = $hxEnums["tink.http.IncomingRequestBody"] = { __ename__ : true, __constructs__ : ["Plain","Parsed"]
	,Plain: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["source"],$_)
	,Parsed: ($_=function(parts) { return {_hx_index:1,parts:parts,__enum__:"tink.http.IncomingRequestBody",toString:$estr}; },$_.__params__ = ["parts"],$_)
};
var tink_http_Authorization = $hxEnums["tink.http.Authorization"] = { __ename__ : true, __constructs__ : ["Basic","Bearer","Others"]
	,Basic: ($_=function(user,pass) { return {_hx_index:0,user:user,pass:pass,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["user","pass"],$_)
	,Bearer: ($_=function(token) { return {_hx_index:1,token:token,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["token"],$_)
	,Others: ($_=function(scheme,param) { return {_hx_index:2,scheme:scheme,param:param,__enum__:"tink.http.Authorization",toString:$estr}; },$_.__params__ = ["scheme","param"],$_)
};
var tink_http__$Response_ResponseHeader_$Impl_$ = {};
tink_http__$Response_ResponseHeader_$Impl_$.__name__ = true;
tink_http__$Response_ResponseHeader_$Impl_$._new = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	var this1 = new tink_http_ResponseHeaderBase(statusCode,reason,fields,protocol);
	return this1;
};
tink_http__$Response_ResponseHeader_$Impl_$.fromStatusCode = function(code) {
	var this1 = new tink_http_ResponseHeaderBase(code,null,null,"HTTP/1.1");
	return this1;
};
tink_http__$Response_ResponseHeader_$Impl_$.fromHeaderFields = function(fields) {
	var this1 = new tink_http_ResponseHeaderBase(200,null,fields,"HTTP/1.1");
	return this1;
};
tink_http__$Response_ResponseHeader_$Impl_$.parser = function() {
	return tink_http_ResponseHeaderBase.parser();
};
var tink_http_ResponseHeaderBase = function(statusCode,reason,fields,protocol) {
	if(protocol == null) {
		protocol = "HTTP/1.1";
	}
	this.statusCode = statusCode;
	var tmp;
	if(reason == null) {
		var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(statusCode);
		tmp = this1;
	} else {
		tmp = reason;
	}
	this.reason = tmp;
	this.protocol = protocol;
	tink_http_Header.call(this,fields);
};
tink_http_ResponseHeaderBase.__name__ = true;
tink_http_ResponseHeaderBase.parser = function() {
	return new tink_http_HeaderParser(function(line,headers) {
		var v = line.split(" ");
		if(v.length >= 3) {
			var this1 = new tink_http_ResponseHeaderBase(Std.parseInt(v[1]),v.slice(2).join(" "),headers,v[0]);
			return tink_core_Outcome.Success(this1);
		} else {
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Invalid HTTP response header",{ fileName : "tink/http/Response.hx", lineNumber : 56, className : "tink.http.ResponseHeaderBase", methodName : "parser"}));
		}
	});
};
tink_http_ResponseHeaderBase.__super__ = tink_http_Header;
tink_http_ResponseHeaderBase.prototype = $extend(tink_http_Header.prototype,{
	concat: function(fields) {
		var this1 = new tink_http_ResponseHeaderBase(this.statusCode,this.reason,this.fields.concat(fields),this.protocol);
		return this1;
	}
	,toString: function() {
		return "" + this.protocol + " " + this.statusCode + " " + this.reason + "\r\n" + tink_http_Header.prototype.toString.call(this);
	}
	,__class__: tink_http_ResponseHeaderBase
});
var tink_http__$Response_OutgoingResponseData = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http__$Response_OutgoingResponseData.__name__ = true;
tink_http__$Response_OutgoingResponseData.__super__ = tink_http_Message;
tink_http__$Response_OutgoingResponseData.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http__$Response_OutgoingResponseData
});
var tink_http__$Response_OutgoingResponse_$Impl_$ = {};
tink_http__$Response_OutgoingResponse_$Impl_$.__name__ = true;
tink_http__$Response_OutgoingResponse_$Impl_$._new = function(header,body) {
	var this1 = new tink_http__$Response_OutgoingResponseData(header,body);
	return this1;
};
tink_http__$Response_OutgoingResponse_$Impl_$.blob = function(code,chunk,contentType,headers) {
	if(code == null) {
		code = 200;
	}
	var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
	var fields = new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),contentType);
	var fields1 = tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Length");
	var fields2 = Std.string(chunk.getLength());
	var fields3;
	if(headers == null) {
		fields3 = [];
	} else {
		var v = headers;
		fields3 = v;
	}
	var this2 = new tink_http_ResponseHeaderBase(code,this1,[fields,new tink_http_HeaderField(fields1,fields2)].concat(fields3),"HTTP/1.1");
	var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk)));
	return this3;
};
tink_http__$Response_OutgoingResponse_$Impl_$.chunked = function(contentType,headers,source) {
};
tink_http__$Response_OutgoingResponse_$Impl_$.ofString = function(s) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s)),"text/plain");
};
tink_http__$Response_OutgoingResponse_$Impl_$.ofChunk = function(c) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(null,c,"application/octet-stream");
};
tink_http__$Response_OutgoingResponse_$Impl_$.reportError = function(e) {
	var this1 = new tink_http_ResponseHeaderBase(e.code,httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(e.code),[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),"application/json")],"HTTP/1.1");
	var this2 = new tink_http__$Response_OutgoingResponseData(this1,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
	return this2;
};
var tink_http_IncomingResponse = function(header,body) {
	tink_http_Message.call(this,header,body);
};
tink_http_IncomingResponse.__name__ = true;
tink_http_IncomingResponse.readAll = function(res) {
	return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(res.body),function(b) {
		if(res.header.statusCode >= 400) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(tink_core_TypedError.withData(res.header.statusCode,res.header.reason,b.toString(),{ fileName : "tink/http/Response.hx", lineNumber : 113, className : "tink.http.IncomingResponse", methodName : "readAll"}))));
		} else {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(b)));
		}
	});
};
tink_http_IncomingResponse.reportError = function(e) {
	var this1 = new tink_http_ResponseHeaderBase(e.code,httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(e.code),[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),"application/json")],"HTTP/1.1");
	return new tink_http_IncomingResponse(this1,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(JSON.stringify({ error : e.message, details : e.data}))))));
};
tink_http_IncomingResponse.__super__ = tink_http_Message;
tink_http_IncomingResponse.prototype = $extend(tink_http_Message.prototype,{
	__class__: tink_http_IncomingResponse
});
var tink_http_BodyPart = $hxEnums["tink.http.BodyPart"] = { __ename__ : true, __constructs__ : ["Value","File"]
	,Value: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["v"],$_)
	,File: ($_=function(handle) { return {_hx_index:1,handle:handle,__enum__:"tink.http.BodyPart",toString:$estr}; },$_.__params__ = ["handle"],$_)
};
var tink_http__$StructuredBody_UploadedFile_$Impl_$ = {};
tink_http__$StructuredBody_UploadedFile_$Impl_$.__name__ = true;
tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob = function(name,type,data) {
	return { fileName : name, mimeType : type, size : data.length, read : function() {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data)));
	}, saveTo : function(path) {
		var name1 = "File sink " + path;
		var dest = tink_io_nodejs_NodejsSink.wrap(name1,js_node_Fs.createWriteStream(path));
		var ret = tink_io__$Source_Source_$Impl_$.pipeTo(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(data))),dest,{ end : true}).map(function(r) {
			switch(r._hx_index) {
			case 0:
				return tink_core_Outcome.Success(tink_core_Noise.Noise);
			case 1:
				return tink_core_Outcome.Failure(new tink_core_TypedError(null,"File $path closed unexpectedly",{ fileName : "tink/http/StructuredBody.hx", lineNumber : 37, className : "tink.http._StructuredBody.UploadedFile_Impl_", methodName : "ofBlob"}));
			case 2:
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}};
};
var tink_http_containers_NodeContainer = function(kind) {
	this.kind = kind;
};
tink_http_containers_NodeContainer.__name__ = true;
tink_http_containers_NodeContainer.__interfaces__ = [tink_http_Container];
tink_http_containers_NodeContainer.toNodeHandler = function(handler) {
	return function(req,res) {
		var req1 = req.socket.remoteAddress;
		var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
		var options = null;
		if(options == null) {
			options = { };
		}
		var tmp1 = tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,req,options.chunkSize,options.onEnd));
		handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
			var out1 = out.header.statusCode;
			var out2 = out.header.reason;
			var _g = [];
			var h = HxOverrides.iter(out.header.fields);
			while(h.hasNext()) {
				var h1 = h.next();
				_g.push([h1.name,h1.value]);
			}
			res.writeHead(out1,out2,_g);
			tink_io__$Source_Source_$Impl_$.pipeTo(out.body,tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,res)).handle(function(x) {
				res.end();
			});
		});
	};
};
tink_http_containers_NodeContainer.toUpgradeHandler = function(handler) {
	return function(req,socket,head) {
		var req1 = req.socket.remoteAddress;
		var tmp = tink_http_IncomingRequestHeader.fromIncomingMessage(req);
		var options = null;
		if(options == null) {
			options = { };
		}
		var tmp1 = tink_http_IncomingRequestBody.Plain(tink_io_nodejs_NodejsSource.wrap("Incoming HTTP message from " + req.socket.remoteAddress,socket,options.chunkSize,options.onEnd));
		handler.process(new tink_http_IncomingRequest(req1,tmp,tmp1)).handle(function(out) {
			tink_io__$Source_Source_$Impl_$.pipeTo(out.body.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(out.header.toString()))))),tink_io_nodejs_NodejsSink.wrap("Outgoing HTTP response to " + req.socket.remoteAddress,socket)).handle(function(_) {
				socket.end();
			});
		});
	};
};
tink_http_containers_NodeContainer.prototype = {
	run: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var failures = tink_core__$Signal_Signal_$Impl_$.trigger();
			var server;
			var _g = _gthis.kind;
			switch(_g._hx_index) {
			case 0:
				var server1 = _g.server;
				server = server1;
				break;
			case 1:
				var port = _g.port;
				var server2 = new js_node_http_Server();
				server2.listen(port);
				server = server2;
				break;
			case 2:
				var host = _g.host;
				var server3 = new js_node_http_Server();
				server3.listen(tink_url__$Host_Host_$Impl_$.get_port(host),tink_url__$Host_Host_$Impl_$.get_name(host));
				server = server3;
				break;
			case 3:
				var path = _g.path;
				var server4 = new js_node_http_Server();
				server4.listen(path);
				server = server4;
				break;
			case 4:
				var fd = _g.fd;
				var server5 = new js_node_http_Server();
				server5.listen(fd);
				server = server5;
				break;
			}
			var tinkify = function(e) {
				return tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/http/containers/NodeContainer.hx", lineNumber : 80, className : "tink.http.containers.NodeContainer", methodName : "run"});
			};
			server.on("error",function(e1) {
				cb(tink_http_ContainerResult.Failed(e1));
			});
			var tmp = tink_http_containers_NodeContainer.toUpgradeHandler(handler);
			server.on("upgrade",tmp);
			var onListen = function() {
				var onListen1 = tink_http_ContainerResult.Running({ shutdown : function(hard) {
					if(hard) {
						console.log("tink/http/containers/NodeContainer.hx:92:","Warning: hard shutdown not implemented");
					}
					var ret = tink_core__$Future_Future_$Impl_$.async(function(cb1) {
						server.close(function() {
							cb1(true);
						});
					}).map(tink_core_Outcome.Success);
					return ret.gather();
				}, failures : failures});
				cb(onListen1);
			};
			if(server.listening) {
				onListen();
			} else {
				server.on("listening",onListen);
			}
			var tmp1 = tink_http_containers_NodeContainer.toNodeHandler(handler);
			server.on("request",tmp1);
			server.on("error",function(e2) {
				cb(tink_http_ContainerResult.Failed(e2));
			});
		});
	}
	,__class__: tink_http_containers_NodeContainer
};
var tink_http_containers__$NodeContainer_ServerKindBase = $hxEnums["tink.http.containers._NodeContainer.ServerKindBase"] = { __ename__ : true, __constructs__ : ["Instance","Port","Host","Path","Fd"]
	,Instance: ($_=function(server) { return {_hx_index:0,server:server,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["server"],$_)
	,Port: ($_=function(port) { return {_hx_index:1,port:port,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["port"],$_)
	,Host: ($_=function(host) { return {_hx_index:2,host:host,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["host"],$_)
	,Path: ($_=function(path) { return {_hx_index:3,path:path,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["path"],$_)
	,Fd: ($_=function(fd) { return {_hx_index:4,fd:fd,__enum__:"tink.http.containers._NodeContainer.ServerKindBase",toString:$estr}; },$_.__params__ = ["fd"],$_)
};
var tink_http_containers__$NodeContainer_ServerKind_$Impl_$ = {};
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.__name__ = true;
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.fromInstance = function(server) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Instance(server);
};
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.fromPort = function(port) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Port(port);
};
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.fromHost = function(host) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Host(host);
};
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.fromPath = function(path) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Path(path);
};
tink_http_containers__$NodeContainer_ServerKind_$Impl_$.fromFd = function(fd) {
	return tink_http_containers__$NodeContainer_ServerKindBase.Fd(fd);
};
var tink_http_middleware_Static = function(localFolder,urlPrefix,options) {
	this.root = haxe_io_Path.addTrailingSlash(haxe_io_Path.isAbsolute(localFolder) ? localFolder : haxe_io_Path.normalize(haxe_io_Path.directory(__filename) + ("/" + localFolder)));
	var _g = HxOverrides.cca(urlPrefix,0);
	this.prefix = _g == null ? "/" + urlPrefix : _g == 47 ? urlPrefix : "/" + urlPrefix;
	this.options = options;
};
tink_http_middleware_Static.__name__ = true;
tink_http_middleware_Static.__interfaces__ = [tink_http_MiddlewareObject];
tink_http_middleware_Static.prototype = {
	apply: function(handler) {
		return new tink_http_middleware_StaticHandler(this.root,this.prefix,this.options,handler);
	}
	,__class__: tink_http_middleware_Static
};
var tink_http_middleware_StaticHandler = function(root,prefix,options,handler) {
	this.root = root;
	this.prefix = prefix;
	this.options = options;
	this.handler = handler;
	this.notFound = new tink_core_TypedError(404,"File Not Found",{ fileName : "tink/http/middleware/Static.hx", lineNumber : 66, className : "tink.http.middleware.StaticHandler", methodName : "new"});
};
tink_http_middleware_StaticHandler.__name__ = true;
tink_http_middleware_StaticHandler.__interfaces__ = [tink_http_HandlerObject];
tink_http_middleware_StaticHandler.prototype = {
	process: function(req) {
		var _gthis = this;
		var path = req.header.url.path;
		if(req.header.method == "GET" && StringTools.startsWith(path,this.prefix)) {
			var s = HxOverrides.substr(path,this.prefix.length,null);
			var staticPath = haxe_io_Path.join([this.root,decodeURIComponent(s.split("+").join(" "))]);
			console.log("tink/http/middleware/Static.hx:74:",staticPath);
			var result = tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Future_Future_$Impl_$.next(asys_FileSystem.exists(staticPath),function(exists) {
				if(!exists) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(_gthis.notFound)));
				} else {
					var ret = asys_FileSystem.isDirectory(staticPath).map(tink_core_Outcome.Success);
					return ret.gather();
				}
			}),function(isDir) {
				if(isDir) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(_gthis.notFound)));
				} else {
					return asys_FileSystem.stat(staticPath);
				}
			}),function(stat) {
				var mime1 = mime_Mime.lookup(staticPath);
				var req1 = req.header;
				var d = tink_io_RealSourceTools.idealize(asys_io_File.readStream(staticPath),function(_) {
					return tink_io__$Source_Source_$Impl_$.EMPTY;
				});
				var d1 = haxe_io_Path.withoutDirectory(staticPath);
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(_gthis.partial(req1,stat,d,mime1,d1))));
			});
			var f = function(_1) {
				return _gthis.handler.process(req);
			};
			var ret1 = result.flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d2 = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d2));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret1.gather();
		}
		return this.handler.process(req);
	}
	,partial: function(header,stat,source,contentType,filename) {
		var headers = [new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Accept-Ranges"),"bytes"),new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Vary"),"Accept-Encoding"),new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Last-Modified"),tink_http__$Header_HeaderValue_$Impl_$.ofDate(stat.mtime)),new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Type"),contentType),new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Disposition"),"inline; filename=\"" + filename + "\"")];
		if(this.options != null && this.options.expiry != null) {
			var tmp = tink_http__$Header_HeaderName_$Impl_$.ofString("Expires");
			var tmp1 = new Date(new Date().getTime() + this.options.expiry * 1000);
			headers.push(new tink_http_HeaderField(tmp,tink_http__$Header_HeaderValue_$Impl_$.ofDate(tmp1)));
			var tmp2 = tink_http__$Header_HeaderName_$Impl_$.ofString("Cache-Control");
			headers.push(new tink_http_HeaderField(tmp2,"max-age=" + this.options.expiry));
		}
		var _g = header.byName(tink_http__$Header_HeaderName_$Impl_$.ofString("range"));
		switch(_g._hx_index) {
		case 0:
			var v = _g.data;
			var _g1 = v.split("=");
			if(_g1.length == 2 && _g1[0] == "bytes") {
				var range = _g1[1];
				var res = function(pos,len) {
					var fields = new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Range"),"bytes " + pos + "-" + (pos + len - 1) + "/" + stat.size);
					var fields1 = tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Length");
					var this1 = new tink_http_ResponseHeaderBase(206,"Partial Content",headers.concat([fields,new tink_http_HeaderField(fields1,tink_http__$Header_HeaderValue_$Impl_$.ofInt(len))]),"HTTP/1.1");
					var this2 = new tink_http__$Response_OutgoingResponseData(this1,tink_io__$Source_Source_$Impl_$.limit(tink_io__$Source_Source_$Impl_$.skip(source,pos),len));
					return this2;
				};
				var _g2 = range.split("-");
				if(_g2.length == 2) {
					var _hx_tmp;
					if(_g2[0] == "") {
						_hx_tmp = Std.parseInt(_g2[0]);
						if(_hx_tmp == null) {
							if(_hx_tmp == null) {
								var len1 = Std.parseInt(_g2[1]);
								return res(stat.size - len1,len1);
							} else {
								var len2 = Std.parseInt(_g2[1]);
								return res(stat.size - len2,len2);
							}
						} else if(_hx_tmp == null) {
							var len3 = Std.parseInt(_g2[1]);
							return res(stat.size - len3,len3);
						} else {
							var len4 = Std.parseInt(_g2[1]);
							return res(stat.size - len4,len4);
						}
					} else {
						var _hx_tmp1;
						if(_g2[1] == "") {
							_hx_tmp = Std.parseInt(_g2[0]);
							var pos1 = _hx_tmp;
							return res(pos1,stat.size - pos1);
						} else {
							_hx_tmp = Std.parseInt(_g2[0]);
							var pos2 = _hx_tmp;
							_hx_tmp1 = Std.parseInt(_g2[1]);
							var end = _hx_tmp1;
							return res(pos2,end - pos2 + 1);
						}
					}
				}
			}
			break;
		case 1:
			break;
		}
		var fields2 = tink_http__$Header_HeaderName_$Impl_$.ofString("Content-Length");
		var this3 = new tink_http_ResponseHeaderBase(200,"OK",headers.concat([new tink_http_HeaderField(fields2,tink_http__$Header_HeaderValue_$Impl_$.ofInt(stat.size))]),"HTTP/1.1");
		var this4 = new tink_http__$Response_OutgoingResponseData(this3,source);
		return this4;
	}
	,__class__: tink_http_middleware_StaticHandler
};
var tink_io__$PipeOptions_PipeOptions_$Impl_$ = {};
tink_io__$PipeOptions_PipeOptions_$Impl_$.__name__ = true;
tink_io__$PipeOptions_PipeOptions_$Impl_$.get_end = function(this1) {
	if(this1 != null) {
		return this1.end;
	} else {
		return false;
	}
};
tink_io__$PipeOptions_PipeOptions_$Impl_$.get_destructive = function(this1) {
	if(this1 != null) {
		return this1.destructive;
	} else {
		return false;
	}
};
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : true, __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_PipeResultTools = function() { };
tink_io_PipeResultTools.__name__ = true;
tink_io_PipeResultTools.toOutcome = function(result) {
	switch(result._hx_index) {
	case 0:
		return tink_core_Outcome.Success(haxe_ds_Option.None);
	case 1:
		var result1 = result.result;
		return tink_core_Outcome.Success(haxe_ds_Option.Some(result1));
	case 2:
		var e = result.e;
		return tink_core_Outcome.Failure(e);
	case 3:
		var e1 = result.e;
		return tink_core_Outcome.Failure(e1);
	}
};
tink_io_PipeResultTools.toResult = function(c,result,buffered) {
	var mk = function(s) {
		if(buffered == null) {
			return s;
		} else {
			var v = buffered;
			return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
		}
	};
	switch(c._hx_index) {
	case 0:
		var rest = c.rest;
		return tink_io_PipeResult.SinkEnded(result,mk(rest));
	case 1:
		var rest1 = c.at;
		var e = c.error;
		return tink_io_PipeResult.SinkFailed(e,mk(rest1));
	case 2:
		var e1 = c.error;
		return tink_io_PipeResult.SourceFailed(e1);
	case 3:
		return tink_io_PipeResult.AllWritten;
	}
};
var tink_io_SinkObject = function() { };
tink_io_SinkObject.__name__ = true;
tink_io_SinkObject.prototype = {
	__class__: tink_io_SinkObject
};
var tink_io_SinkBase = function() { };
tink_io_SinkBase.__name__ = true;
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
tink_io_SinkBase.prototype = {
	get_sealed: function() {
		return true;
	}
	,consume: function(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,__class__: tink_io_SinkBase
};
var tink_io__$Sink_Blackhole = function() {
};
tink_io__$Sink_Blackhole.__name__ = true;
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
tink_io__$Sink_Blackhole.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(o) {
			switch(o._hx_index) {
			case 0:
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = o.error;
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_Blackhole
});
var tink_io__$Sink_SinkYielding_$Impl_$ = {};
tink_io__$Sink_SinkYielding_$Impl_$.__name__ = true;
tink_io__$Sink_SinkYielding_$Impl_$.end = function(this1) {
	if(this1.get_sealed()) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
	} else {
		var ret = this1.consume(tink_io__$Source_Source_$Impl_$.EMPTY,{ end : true}).map(function(r) {
			switch(r._hx_index) {
			case 0:case 1:
				return tink_core_Outcome.Success(true);
			case 2:
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
};
tink_io__$Sink_SinkYielding_$Impl_$.dirty = function(this1) {
	return this1;
};
tink_io__$Sink_SinkYielding_$Impl_$.ofError = function(e) {
	return new tink_io__$Sink_ErrorSink(e);
};
tink_io__$Sink_SinkYielding_$Impl_$.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var v = o.data;
			return v;
		case 1:
			var e = o.failure;
			return tink_io__$Sink_SinkYielding_$Impl_$.ofError(e);
		}
	});
	return new tink_io__$Sink_FutureSink(ret.gather());
};
tink_io__$Sink_SinkYielding_$Impl_$.ofNodeStream = function(name,r) {
	return tink_io_nodejs_NodejsSink.wrap(name,r);
};
tink_io__$Sink_SinkYielding_$Impl_$.ofOutput = function(name,target,options) {
	var tmp;
	if(options == null) {
		tmp = tink_io__$Worker_Worker_$Impl_$.get();
	} else if(options.worker == null) {
		tmp = tink_io__$Worker_Worker_$Impl_$.get();
	} else {
		var w = options.worker;
		tmp = w;
	}
	return new tink_io_std_OutputSink(name,target,tmp);
};
var tink_io__$Sink_FutureSink = function(f) {
	this.f = f;
};
tink_io__$Sink_FutureSink.__name__ = true;
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_FutureSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
	,__class__: tink_io__$Sink_FutureSink
});
var tink_io__$Sink_ErrorSink = function(error) {
	this.error = error;
};
tink_io__$Sink_ErrorSink.__name__ = true;
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
tink_io__$Sink_ErrorSink.prototype = $extend(tink_io_SinkBase.prototype,{
	get_sealed: function() {
		return false;
	}
	,consume: function(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
	,__class__: tink_io__$Sink_ErrorSink
});
var tink_streams_StreamObject = function() { };
tink_streams_StreamObject.__name__ = true;
tink_streams_StreamObject.prototype = {
	__class__: tink_streams_StreamObject
};
var tink_streams_StreamBase = function() {
	this.retainCount = 0;
};
tink_streams_StreamBase.__name__ = true;
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
tink_streams_StreamBase.prototype = {
	get_depleted: function() {
		return false;
	}
	,retain: function() {
		var _gthis = this;
		this.retainCount++;
		var retained = true;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	,next: function() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,regroup: function(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	,map: function(f) {
		return this.regroup(f);
	}
	,filter: function(f) {
		return this.regroup(f);
	}
	,destroy: function() {
	}
	,append: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	,prepend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	,blend: function(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	,decompose: function(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	,idealize: function(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	,reduce: function(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					throw new js__$Boot_HaxeError("assert");
				case 1:
					var rest = c.at;
					var e1 = c.error;
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c.error;
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	,forEach: function(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,__class__: tink_streams_StreamBase
};
var tink_streams_Empty = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_Empty.__name__ = true;
tink_streams_Empty.make = function() {
	return tink_streams_Empty.inst;
};
tink_streams_Empty.__super__ = tink_streams_StreamBase;
tink_streams_Empty.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		return true;
	}
	,next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	,__class__: tink_streams_Empty
});
var tink_io__$Source_Source_$Impl_$ = {};
tink_io__$Source_Source_$Impl_$.__name__ = true;
tink_io__$Source_Source_$Impl_$.dirty = function(this1) {
	return this1;
};
tink_io__$Source_Source_$Impl_$.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_io__$Source_Source_$Impl_$.ofNodeStream = function(name,r,options) {
	if(options == null) {
		options = { };
	}
	return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
};
tink_io__$Source_Source_$Impl_$.toNodeStream = function(this1) {
	var native = new js_node_stream_PassThrough();
	var source = tink_io__$Source_Source_$Impl_$.chunked(this1);
	var write = null;
	write = function() {
		source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(chunk) {
			var b = chunk.toBytes();
			var data = b.b;
			var ok = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			var ok1 = native.write(ok);
			if(ok1) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
			}
		})).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.rest;
				source = rest;
				native.once("drain",write);
				break;
			case 2:
				var e = o.error;
				native.emit("error",new Error(e.message));
				break;
			case 3:
				native.end();
				break;
			}
		});
	};
	write();
	return native;
};
tink_io__$Source_Source_$Impl_$.ofJsFile = function(name,file,options) {
	var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
	return new tink_io_js_BlobSource(name,file,0,chunkSize);
};
tink_io__$Source_Source_$Impl_$.ofJsBlob = function(name,blob,options) {
	var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
	return new tink_io_js_BlobSource(name,blob,0,chunkSize);
};
tink_io__$Source_Source_$Impl_$.ofInput = function(name,input,options) {
	if(options == null) {
		options = { };
	}
	var tmp = tink_io__$Worker_Worker_$Impl_$.ensure(options.worker);
	var length;
	var _g = options.chunkSize;
	if(_g == null) {
		length = 65536;
	} else {
		var v = _g;
		length = v;
	}
	return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(length)),0);
};
tink_io__$Source_Source_$Impl_$.chunked = function(this1) {
	return this1;
};
tink_io__$Source_Source_$Impl_$.ofError = function(e) {
	return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
};
tink_io__$Source_Source_$Impl_$.ofFuture = function(f) {
	return tink_streams__$Stream_Stream_$Impl_$.flatten(f);
};
tink_io__$Source_Source_$Impl_$.ofPromised = function(p) {
	var ret = p.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var s = o.data;
			return s;
		case 1:
			var e = o.failure;
			return tink_io__$Source_Source_$Impl_$.ofError(e);
		}
	});
	return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
};
tink_io__$Source_Source_$Impl_$.concatAll = function(s) {
	return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafe(function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur))));
	}));
};
tink_io__$Source_Source_$Impl_$.pipeTo = function(this1,target,options) {
	return target.consume(this1,options);
};
tink_io__$Source_Source_$Impl_$.append = function(this1,that) {
	return this1.append(that);
};
tink_io__$Source_Source_$Impl_$.prepend = function(this1,that) {
	return this1.prepend(that);
};
tink_io__$Source_Source_$Impl_$.transform = function(this1,transformer) {
	return transformer.transform(this1);
};
tink_io__$Source_Source_$Impl_$.skip = function(this1,len) {
	return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
		var chunk = chunks[0];
		if(len <= 0) {
			return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(chunk));
		}
		var length = chunk.getLength();
		var out = tink_streams_RegroupResult.Converted(len < length ? tink_streams__$Stream_Stream_$Impl_$.single(chunk.slice(len,length)) : tink_streams_Empty.inst);
		len -= length;
		return out;
	}));
};
tink_io__$Source_Source_$Impl_$.limit = function(this1,len) {
	if(len == 0) {
		return tink_io__$Source_Source_$Impl_$.EMPTY;
	}
	return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
		if(len <= 0) {
			return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
		}
		var chunk = chunks[0];
		var length = chunk.getLength();
		var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams__$Stream_Stream_$Impl_$.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(len < length ? chunk.slice(0,len) : chunk));
		len -= length;
		return out;
	}));
};
tink_io__$Source_Source_$Impl_$.ofChunk = function(chunk) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
};
tink_io__$Source_Source_$Impl_$.ofString = function(s) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
};
tink_io__$Source_Source_$Impl_$.ofBytes = function(b) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
};
var tink_io_RealSourceTools = function() { };
tink_io_RealSourceTools.__name__ = true;
tink_io_RealSourceTools.all = function(s) {
	var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
		switch(o._hx_index) {
		case 1:
			var e = o.error;
			return tink_core_Outcome.Failure(e);
		case 2:
			var c = o.result;
			return tink_core_Outcome.Success(c);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.parse = function(s,p) {
	var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
		switch(r._hx_index) {
		case 0:
			var rest = r.rest;
			var data = r.data;
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var e = r.e;
			return tink_core_Outcome.Failure(e);
		case 2:
			var e1 = r.e;
			return tink_core_Outcome.Failure(e1);
		}
	});
	return ret.gather();
};
tink_io_RealSourceTools.split = function(src,delim) {
	var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
	return { before : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
		var _g = p.a;
		switch(_g._hx_index) {
		case 0:
			var chunk = _g.v;
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
		case 1:
			return src;
		}
	})))), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s,function(p1) {
		switch(p1.a._hx_index) {
		case 0:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
		case 1:
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 177, className : "tink.io.RealSourceTools", methodName : "split"}))));
		}
	}), after : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p2) {
		return p2.b;
	}))))};
};
tink_io_RealSourceTools.parseStream = function(s,p) {
	return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
};
tink_io_RealSourceTools.idealize = function(s,rescue) {
	return tink_io__$Source_Source_$Impl_$.chunked(s).idealize(rescue);
};
var tink_io_IdealSourceTools = function() { };
tink_io_IdealSourceTools.__name__ = true;
tink_io_IdealSourceTools.all = function(s) {
	var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
		var c = o.result;
		return c;
	});
	return ret.gather();
};
tink_io_IdealSourceTools.parse = function(s,p) {
	var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
		switch(r._hx_index) {
		case 0:
			var rest = r.rest;
			var data = r.data;
			var this1 = new tink_core_MPair(data,rest);
			return tink_core_Outcome.Success(this1);
		case 1:
			var e = r.e;
			return tink_core_Outcome.Failure(e);
		}
	});
	return ret.gather();
};
tink_io_IdealSourceTools.parseStream = function(s,p) {
	return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
};
tink_io_IdealSourceTools.split = function(s,delim) {
	var s1 = tink_io_RealSourceTools.split(s,delim);
	return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
		return tink_io__$Source_Source_$Impl_$.EMPTY;
	}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e1) {
		return tink_io__$Source_Source_$Impl_$.EMPTY;
	})};
};
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__ : true, __constructs__ : ["Parsed","Invalid","Broke"]
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io__$StreamParser_StreamParser_$Impl_$ = {};
tink_io__$StreamParser_StreamParser_$Impl_$.__name__ = true;
tink_io__$StreamParser_StreamParser_$Impl_$.doParse = function(source,p,consume,finish) {
	var cursor = tink__$Chunk_Chunk_$Impl_$.EMPTY.getCursor();
	var resume = true;
	var mk = function(source1) {
		if(cursor.currentPos < cursor.length) {
			return source1.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
		} else {
			return source1;
		}
	};
	var flush = function() {
		var _g = cursor.flush();
		var c = _g;
		if(c.getLength() == 0) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		} else {
			var c1 = _g;
			return new tink_streams_Single(new tink_core__$Lazy_LazyConst(c1));
		}
	};
	var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(chunk) {
		if(chunk.getLength() == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		}
		cursor.shift(chunk);
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var next = null;
			next = function() {
				cursor.shift();
				var lastPos = cursor.currentPos;
				var _g1 = p.progress(cursor);
				switch(_g1._hx_index) {
				case 0:
					if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
						next();
					} else {
						cb(tink_streams_Handled.Resume);
					}
					break;
				case 1:
					var v = _g1.r;
					consume(v).handle(function(o) {
						resume = o.resume;
						if(resume) {
							if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
								next();
							} else {
								cb(tink_streams_Handled.Resume);
							}
						} else {
							cb(tink_streams_Handled.Finish);
						}
					});
					break;
				case 2:
					var e = _g1.e;
					cb(tink_streams_Handled.Clog(e));
					break;
				}
			};
			next();
		});
	})).flatMap(function(c2) {
		switch(c2._hx_index) {
		case 0:
			var rest = c2.rest;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(rest))));
		case 1:
			var rest1 = c2.at;
			var e1 = c2.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e1,mk(rest1))));
		case 2:
			var e2 = c2.error;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e2)));
		case 3:
			if(cursor.currentPos < cursor.length) {
				var v1 = finish();
				var v2 = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY));
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(v1,mk(v2))));
			} else if(!resume) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
			} else {
				var _g2 = p.eof(cursor);
				switch(_g2._hx_index) {
				case 0:
					var result = _g2.data;
					var ret1 = consume(result).map(function(_) {
						return tink_io_ParseResult.Parsed(finish(),flush());
					});
					return ret1.gather();
				case 1:
					var e3 = _g2.failure;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e3,flush())));
				}
			}
			break;
		}
	});
	return ret.gather();
};
tink_io__$StreamParser_StreamParser_$Impl_$.parse = function(s,p) {
	var res = null;
	var onResult = function(r) {
		res = r;
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
	};
	return tink_io__$StreamParser_StreamParser_$Impl_$.doParse(s,p,onResult,function() {
		return res;
	});
};
tink_io__$StreamParser_StreamParser_$Impl_$.parseStream = function(s,p) {
	var next = null;
	next = function(step) {
		if(s.get_depleted()) {
			step(tink_streams_Step.End);
		} else {
			tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					var result = o.data;
					s = rest;
					var next1 = tink_streams_Step.Link(result,tink_streams_Generator.stream(next));
					step(next1);
					break;
				case 1:
					var e = o.e;
					step(tink_streams_Step.Fail(e));
					break;
				case 2:
					var e1 = o.e;
					step(tink_streams_Step.Fail(e1));
					break;
				}
			});
		}
	};
	return tink_streams_Generator.stream(next);
};
var tink_io_Splitter = function(delim) {
	this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
	this.delim = delim;
};
tink_io_Splitter.__name__ = true;
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
tink_io_Splitter.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink__$Chunk_Chunk_$Impl_$.catChunk(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				var i = _g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
	,__class__: tink_io_Splitter
});
var tink_io_SimpleBytewiseParser = function(f) {
	this._read = f;
};
tink_io_SimpleBytewiseParser.__name__ = true;
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
tink_io_SimpleBytewiseParser.prototype = $extend(tink_io_BytewiseParser.prototype,{
	read: function(char) {
		return this._read(char);
	}
	,__class__: tink_io_SimpleBytewiseParser
});
var tink_io_WorkerObject = function() { };
tink_io_WorkerObject.__name__ = true;
tink_io_WorkerObject.prototype = {
	__class__: tink_io_WorkerObject
};
var tink_io__$Worker_EagerWorker = function() {
};
tink_io__$Worker_EagerWorker.__name__ = true;
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
tink_io__$Worker_EagerWorker.prototype = {
	work: function(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
	,__class__: tink_io__$Worker_EagerWorker
};
var tink_io__$Worker_Worker_$Impl_$ = {};
tink_io__$Worker_Worker_$Impl_$.__name__ = true;
tink_io__$Worker_Worker_$Impl_$.ensure = function(this1) {
	if(this1 == null) {
		return tink_io__$Worker_Worker_$Impl_$.get();
	} else {
		return this1;
	}
};
tink_io__$Worker_Worker_$Impl_$.get = function() {
	return tink_io__$Worker_Worker_$Impl_$.pool[Std.random(tink_io__$Worker_Worker_$Impl_$.pool.length)];
};
tink_io__$Worker_Worker_$Impl_$.work = function(this1,task) {
	return this1.work(task);
};
var tink_streams_Generator = function(upcoming) {
	tink_streams_StreamBase.call(this);
	this.upcoming = upcoming;
};
tink_streams_Generator.__name__ = true;
tink_streams_Generator.stream = function(step) {
	return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
};
tink_streams_Generator.__super__ = tink_streams_StreamBase;
tink_streams_Generator.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return this.upcoming;
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s.e;
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e.e;
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	,__class__: tink_streams_Generator
});
var tink_io_js_BlobSource = function(name,blob,pos,chunkSize) {
	this.name = name;
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		if(pos >= blob.size) {
			cb(tink_streams_Step.End);
		} else {
			var end = pos + chunkSize;
			if(end > blob.size) {
				end = blob.size;
			}
			var reader = new FileReader();
			reader.onload = function() {
				var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
				var tmp = tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize));
				cb(tmp);
			};
			reader.onerror = function(e) {
				var tmp1 = tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 27, className : "tink.io.js.BlobSource", methodName : "new"}));
				cb(tmp1);
			};
			var tmp2 = blob.slice(pos,end);
			reader.readAsArrayBuffer(tmp2);
		}
	},true));
};
tink_io_js_BlobSource.__name__ = true;
tink_io_js_BlobSource.wrap = function(name,blob,chunkSize) {
	return new tink_io_js_BlobSource(name,blob,0,chunkSize);
};
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
tink_io_js_BlobSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_js_BlobSource
});
var tink_io_nodejs_NodejsSink = function(target) {
	this.target = target;
};
tink_io_nodejs_NodejsSink.__name__ = true;
tink_io_nodejs_NodejsSink.wrap = function(name,native) {
	return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
};
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
tink_io_nodejs_NodejsSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w._hx_index) {
				case 0:
					switch(w.data) {
					case false:
						return tink_streams_Handled.BackOff;
					case true:
						return tink_streams_Handled.Resume;
					}
					break;
				case 1:
					var e = w.failure;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
	,__class__: tink_io_nodejs_NodejsSink
});
var tink_io_nodejs_NodejsSource = function(target) {
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		target.read().handle(function(o) {
			var tmp;
			switch(o._hx_index) {
			case 0:
				if(o.data == null) {
					tmp = tink_streams_Step.End;
				} else {
					var chunk = o.data;
					tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
				}
				break;
			case 1:
				var e = o.failure;
				tmp = tink_streams_Step.Fail(e);
				break;
			}
			cb(tmp);
		});
	},true));
};
tink_io_nodejs_NodejsSource.__name__ = true;
tink_io_nodejs_NodejsSource.wrap = function(name,native,chunkSize,onEnd) {
	return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
};
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
tink_io_nodejs_NodejsSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_nodejs_NodejsSource
});
var tink_io_nodejs_WrappedReadable = function(name,native,chunkSize,onEnd) {
	this.name = name;
	this.native = native;
	this.chunkSize = chunkSize;
	this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(null));
		});
		native.once("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
			cb(tmp);
		});
	});
	if(onEnd != null) {
		this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			process.nextTick(onEnd);
		}));
	}
};
tink_io_nodejs_WrappedReadable.__name__ = true;
tink_io_nodejs_WrappedReadable.prototype = {
	read: function() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_chunk_nodejs_BufferChunk(buf));
						cb(attempt1);
					}
				} catch( e ) {
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 47, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			attempt();
		}),this.end);
	}
	,__class__: tink_io_nodejs_WrappedReadable
};
var tink_io_nodejs_WrappedWritable = function(name,native) {
	this.name = name;
	this.native = native;
	this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
		native.once("end",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("finish",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.once("close",function() {
			cb(tink_core_Outcome.Success(false));
		});
		native.on("error",function(e) {
			var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
			cb(tmp);
		});
	});
};
tink_io_nodejs_WrappedWritable.__name__ = true;
tink_io_nodejs_WrappedWritable.prototype = {
	end: function() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	,write: function(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis.native.write(buf,tmp);
		}),this.ended);
	}
	,__class__: tink_io_nodejs_WrappedWritable
};
var tink_io_std_InputSource = function(name,target,worker,buf,offset) {
	var next = function(buf1,offset1) {
		return new tink_io_std_InputSource(name,target,worker,buf1,offset1);
	};
	var free = buf.length - offset;
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		tink_io__$Worker_Worker_$Impl_$.work(worker,new tink_core__$Lazy_LazyFunc(function() {
			try {
				var read = target.readBytes(buf,offset,free);
				if(read == 0) {
					return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
				} else {
					var nextOffset = free - read < 1024 ? 0 : offset + read;
					var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
					return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
				}
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof haxe_io_Eof)) {
					var e2 = e1;
					return tink_streams_Step.End;
				} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
					var e3 = e1;
					if(e3._hx_index == 0) {
						return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
					} else {
						return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e3,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
					}
				} else {
					throw e;
				}
			}
		})).handle(function(step) {
			switch(step._hx_index) {
			case 1:case 2:
				try {
					target.close();
				} catch( e4 ) {
					var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
				}
				break;
			default:
			}
			cb(step);
		});
	},true));
};
tink_io_std_InputSource.__name__ = true;
tink_io_std_InputSource.__super__ = tink_streams_Generator;
tink_io_std_InputSource.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_io_std_InputSource
});
var tink_io_std_OutputSink = function(name,target,worker) {
	this.name = name;
	this.target = target;
	this.worker = worker;
};
tink_io_std_OutputSink.__name__ = true;
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
tink_io_std_OutputSink.prototype = $extend(tink_io_SinkBase.prototype,{
	consume: function(source,options) {
		var _gthis = this;
		var rest = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io__$Worker_Worker_$Impl_$.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( e ) {
								var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
								if(((e1) instanceof haxe_io_Eof)) {
									var e2 = e1;
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
									var e3 = e1;
									if(e3._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e3,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((e1) instanceof tink_core_TypedError)) {
									return tink_core_Outcome.Failure(e1);
								} else {
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e1,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								if(o.data == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									var v = o.data;
									pos += v;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								var e4 = o.failure;
								cb(tink_streams_Handled.Clog(e4));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( e5 ) {
					var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				}
			});
		}
		var ret1 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise,rest);
		});
		return ret1.gather();
	}
	,__class__: tink_io_std_OutputSink
});
var tink_json__$Representation_Representation_$Impl_$ = {};
tink_json__$Representation_Representation_$Impl_$.__name__ = true;
tink_json__$Representation_Representation_$Impl_$.get = function(this1) {
	return this1;
};
tink_json__$Representation_Representation_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
tink_json__$Representation_Representation_$Impl_$.of = function(v) {
	return v;
};
var tink_querystring__$Pairs_Pairs_$Impl_$ = {};
tink_querystring__$Pairs_Pairs_$Impl_$.__name__ = true;
tink_querystring__$Pairs_Pairs_$Impl_$.portions = function(s) {
	return new tink_url__$Query_QueryStringParser(s,"&","=",0);
};
tink_querystring__$Pairs_Pairs_$Impl_$.portionsOfUrl = function(u) {
	return tink_querystring__$Pairs_Pairs_$Impl_$.portions(u.query);
};
tink_querystring__$Pairs_Pairs_$Impl_$.ofIterable = function(i) {
	return $getIterator(i);
};
var tink_streams__$IdealStream_IdealStream_$Impl_$ = {};
tink_streams__$IdealStream_IdealStream_$Impl_$.__name__ = true;
tink_streams__$IdealStream_IdealStream_$Impl_$.promiseOfIdealStream = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
};
tink_streams__$IdealStream_IdealStream_$Impl_$.promiseOfStreamNoise = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(p);
};
tink_streams__$IdealStream_IdealStream_$Impl_$.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		return buf;
	});
	return ret.gather();
};
var tink_streams_IdealStreamBase = function() {
	tink_streams_StreamBase.call(this);
};
tink_streams_IdealStreamBase.__name__ = true;
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
tink_streams_IdealStreamBase.prototype = $extend(tink_streams_StreamBase.prototype,{
	idealize: function(rescue) {
		return this;
	}
	,__class__: tink_streams_IdealStreamBase
});
var tink_streams__$RealStream_RealStream_$Impl_$ = {};
tink_streams__$RealStream_RealStream_$Impl_$.__name__ = true;
tink_streams__$RealStream_RealStream_$Impl_$.promiseOfIdealStream = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
};
tink_streams__$RealStream_RealStream_$Impl_$.promiseOfStreamNoise = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(p);
};
tink_streams__$RealStream_RealStream_$Impl_$.promiseOfRealStream = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
};
tink_streams__$RealStream_RealStream_$Impl_$.promiseOfStreamError = function(p) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(p);
};
tink_streams__$RealStream_RealStream_$Impl_$.collect = function(this1) {
	var buf = [];
	var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
		buf.push(x);
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
	})).map(function(c) {
		switch(c._hx_index) {
		case 0:
			throw new js__$Boot_HaxeError("unreachable");
		case 2:
			var e = c.error;
			return tink_core_Outcome.Failure(e);
		case 3:
			return tink_core_Outcome.Success(buf);
		}
	});
	return ret.gather();
};
var tink_streams__$Stream_Stream_$Impl_$ = {};
tink_streams__$Stream_Stream_$Impl_$.__name__ = true;
tink_streams__$Stream_Stream_$Impl_$.get_depleted = function(this1) {
	return this1.get_depleted();
};
tink_streams__$Stream_Stream_$Impl_$.dirty = function(this1) {
	return this1;
};
tink_streams__$Stream_Stream_$Impl_$.single = function(i) {
	return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
};
tink_streams__$Stream_Stream_$Impl_$.ofIterator = function(i) {
	var next = null;
	next = function(step) {
		step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
	};
	return tink_streams_Generator.stream(next);
};
tink_streams__$Stream_Stream_$Impl_$.flatten = function(f) {
	return new tink_streams_FutureStream(f);
};
tink_streams__$Stream_Stream_$Impl_$.promiseIdeal = function(f) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
};
tink_streams__$Stream_Stream_$Impl_$.promiseReal = function(f) {
	return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
};
tink_streams__$Stream_Stream_$Impl_$.promise = function(f) {
	var ret = f.map(function(o) {
		switch(o._hx_index) {
		case 0:
			var s = o.data;
			return tink_streams__$Stream_Stream_$Impl_$.dirty(s);
		case 1:
			var e = o.failure;
			return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
		}
	});
	return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
};
tink_streams__$Stream_Stream_$Impl_$.ofError = function(e) {
	return new tink_streams__$Stream_ErrorStream(e);
};
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : true, __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : true, __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams__$Stream_Regrouper_$Impl_$ = {};
tink_streams__$Stream_Regrouper_$Impl_$.__name__ = true;
tink_streams__$Stream_Regrouper_$Impl_$.ofIgnorance = function(f) {
	return { apply : function(i,_) {
		return f(i);
	}};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync = function(f) {
	return { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	}};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofFunc = function(f) {
	return { apply : f};
};
tink_streams__$Stream_Regrouper_$Impl_$.ofFuncSync = function(f) {
	return { apply : function(i,s) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
	}};
};
var tink_streams__$Stream_CompoundStream = function(parts) {
	tink_streams_StreamBase.call(this);
	this.parts = parts;
};
tink_streams__$Stream_CompoundStream.__name__ = true;
tink_streams__$Stream_CompoundStream.consumeParts = function(parts,handler,cb) {
	if(parts.length == 0) {
		cb(tink_streams_Conclusion.Depleted);
	} else {
		parts[0].forEach(handler).handle(function(o) {
			switch(o._hx_index) {
			case 0:
				var rest = o.rest;
				parts = parts.slice();
				parts[0] = rest;
				var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp);
				break;
			case 1:
				var at = o.at;
				var e = o.error;
				if(at.get_depleted()) {
					parts = parts.slice(1);
				} else {
					parts = parts.slice();
					parts[0] = at;
				}
				var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
				cb(tmp1);
				break;
			case 2:
				var e1 = o.error;
				cb(tink_streams_Conclusion.Failed(e1));
				break;
			case 3:
				tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
				break;
			}
		});
	}
};
tink_streams__$Stream_CompoundStream.of = function(streams) {
	var ret = [];
	var _g = 0;
	while(_g < streams.length) {
		var s = streams[_g];
		++_g;
		s.decompose(ret);
	}
	if(ret.length == 0) {
		return tink_streams_Empty.inst;
	} else {
		return new tink_streams__$Stream_CompoundStream(ret);
	}
};
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CompoundStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	get_depleted: function() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	,next: function() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	,decompose: function(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	,forEach: function(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	,__class__: tink_streams__$Stream_CompoundStream
});
var tink_streams__$Stream_RegroupStream = function(source,f,prev) {
	if(prev == null) {
		prev = tink_streams_Empty.inst;
	}
	var ret = null;
	var terminated = false;
	var buf = [];
	var ret1 = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
		buf.push(item);
		var ret2 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				ret = v;
				return tink_streams_Handled.Finish;
			case 1:
				var v1 = o.data;
				var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
				if(v1._hx_index == 0) {
					var v2 = v1.v;
					ret = v2;
				} else {
					ret = l.get();
				}
				terminated = true;
				return tink_streams_Handled.Finish;
			case 2:
				return tink_streams_Handled.Resume;
			case 3:
				var e = o.e;
				return tink_streams_Handled.Clog(e);
			}
		});
		return ret2.gather();
	})).map(function(o1) {
		switch(o1._hx_index) {
		case 0:
			if(terminated) {
				return ret;
			} else {
				var rest = o1.rest;
				return new tink_streams__$Stream_RegroupStream(rest,f,ret);
			}
			break;
		case 1:
			var rest1 = o1.at;
			var e1 = o1.error;
			return new tink_streams__$Stream_CloggedStream(tink_streams__$Stream_Stream_$Impl_$.ofError(e1),rest1);
		case 2:
			var e2 = o1.error;
			return tink_streams__$Stream_Stream_$Impl_$.ofError(e2);
		case 3:
			if(buf.length == 0) {
				return tink_streams_Empty.inst;
			} else {
				var ret3 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o2) {
					switch(o2._hx_index) {
					case 0:
						var v3 = o2.data;
						return v3;
					case 1:
						var v4 = o2.data;
						var l1 = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
						if(v4._hx_index == 0) {
							var v5 = v4.v;
							return v5;
						} else {
							return l1.get();
						}
						break;
					case 2:
						return tink_streams_Empty.inst;
					case 3:
						var e3 = o2.e;
						return tink_streams__$Stream_Stream_$Impl_$.ofError(e3);
					}
				});
				return tink_streams__$Stream_Stream_$Impl_$.flatten(ret3.gather());
			}
			break;
		}
	});
	var next = tink_streams__$Stream_Stream_$Impl_$.flatten(ret1.gather());
	tink_streams__$Stream_CompoundStream.call(this,[prev,next]);
};
tink_streams__$Stream_RegroupStream.__name__ = true;
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
tink_streams__$Stream_RegroupStream.prototype = $extend(tink_streams__$Stream_CompoundStream.prototype,{
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : true, __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : true, __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : true, __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : true, __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
var tink_streams__$Stream_CloggedStream = function(rest,error) {
	tink_streams_StreamBase.call(this);
	this.rest = rest;
	this.error = error;
};
tink_streams__$Stream_CloggedStream.__name__ = true;
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_CloggedStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
	,__class__: tink_streams__$Stream_CloggedStream
});
var tink_streams__$Stream_ErrorStream = function(error) {
	tink_streams_StreamBase.call(this);
	this.error = error;
};
tink_streams__$Stream_ErrorStream.__name__ = true;
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
tink_streams__$Stream_ErrorStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	,forEach: function(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
	,__class__: tink_streams__$Stream_ErrorStream
});
var tink_streams__$Stream_Mapping_$Impl_$ = {};
tink_streams__$Stream_Mapping_$Impl_$.__name__ = true;
tink_streams__$Stream_Mapping_$Impl_$._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(o) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o)))));
		});
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this2.flatMap(function(o1) {
			switch(o1._hx_index) {
			case 0:
				var d = o1.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o1.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(o) {
			return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o));
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(v1));
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams__$Stream_Mapping_$Impl_$.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(f(i[0])))));
	}};
	return this1;
};
var tink_streams__$Stream_Filter_$Impl_$ = {};
tink_streams__$Stream_Filter_$Impl_$.__name__ = true;
tink_streams__$Stream_Filter_$Impl_$._new = function(o) {
	var this1 = o;
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofNext = function(n) {
	var this1 = { apply : function(i,_) {
		var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(matched) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst))));
		});
		var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
		var ret = this2.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofAsync = function(f) {
	var this1 = { apply : function(i,_) {
		var ret = f(i[0]).map(function(matched) {
			return tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
		});
		return ret.gather();
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofSync = function(f) {
	var this1 = { apply : function(i,_) {
		var v;
		var _g = f(i[0]);
		switch(_g._hx_index) {
		case 0:
			var v1 = _g.data;
			v = tink_streams_RegroupResult.Converted(v1 ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
			break;
		case 1:
			var e = _g.failure;
			v = tink_streams_RegroupResult.Errored(e);
			break;
		}
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}};
	return this1;
};
tink_streams__$Stream_Filter_$Impl_$.ofPlain = function(f) {
	var this1 = { apply : function(i,_) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst)));
	}};
	return this1;
};
var tink_streams_IdealizeStream = function(target,rescue) {
	tink_streams_IdealStreamBase.call(this);
	this.target = target;
	this.rescue = rescue;
};
tink_streams_IdealizeStream.__name__ = true;
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
tink_streams_IdealizeStream.prototype = $extend(tink_streams_IdealStreamBase.prototype,{
	get_depleted: function() {
		return this.target.get_depleted();
	}
	,next: function() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					var tmp = tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue));
					cb(tmp);
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					var tmp1 = tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue));
					cb(tmp1);
					break;
				case 2:
					var e1 = end.error;
					_gthis.rescue(e1).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
	,__class__: tink_streams_IdealizeStream
});
var tink_streams_Single = function(value) {
	tink_streams_StreamBase.call(this);
	this.value = value;
};
tink_streams_Single.__name__ = true;
tink_streams_Single.__super__ = tink_streams_StreamBase;
tink_streams_Single.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	,forEach: function(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
	,__class__: tink_streams_Single
});
var tink_streams__$Stream_Handler_$Impl_$ = {};
tink_streams__$Stream_Handler_$Impl_$.__name__ = true;
tink_streams__$Stream_Handler_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.apply = function(this1,item) {
	return this1(item);
};
tink_streams__$Stream_Handler_$Impl_$.ofSafeSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofUnknownSync = function(f) {
	var this1 = function(i) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
	};
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams__$Stream_Handler_$Impl_$.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
var tink_streams__$Stream_Reducer_$Impl_$ = {};
tink_streams__$Stream_Reducer_$Impl_$.__name__ = true;
tink_streams__$Stream_Reducer_$Impl_$._new = function(f) {
	var this1 = f;
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.apply = function(this1,res,item) {
	return this1(res,item);
};
tink_streams__$Stream_Reducer_$Impl_$.ofSafeSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofUnknownSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
	};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofSafe = function(f) {
	var this1 = f;
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofPlainSync = function(f) {
	var this1 = function(res,cur) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
	};
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofUnknown = function(f) {
	var this1 = f;
	return this1;
};
tink_streams__$Stream_Reducer_$Impl_$.ofPromiseBased = function(f) {
	var this1 = function(res,cur) {
		var ret = f(res,cur).map(function(s) {
			switch(s._hx_index) {
			case 0:
				var r = s.data;
				return tink_streams_ReductionStep.Progress(r);
			case 1:
				var e = s.failure;
				return tink_streams_ReductionStep.Crash(e);
			}
		});
		return ret.gather();
	};
	return this1;
};
var tink_streams_FutureStream = function(f) {
	tink_streams_StreamBase.call(this);
	this.f = f;
};
tink_streams_FutureStream.__name__ = true;
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
tink_streams_FutureStream.prototype = $extend(tink_streams_StreamBase.prototype,{
	next: function() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	,forEach: function(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
	,__class__: tink_streams_FutureStream
});
var tink_streams_BlendStream = function(a,b) {
	var first = null;
	var wait = function(s) {
		var ret = s.next().map(function(o) {
			if(first == null) {
				first = s;
			}
			return o;
		});
		return ret.gather();
	};
	var n1 = wait(a);
	var n2 = wait(b);
	tink_streams_Generator.call(this,tink_core__$Future_Future_$Impl_$.async(function(cb) {
		tink_core__$Future_Future_$Impl_$.first(n1,n2).handle(function(o1) {
			switch(o1._hx_index) {
			case 0:
				var rest = o1.next;
				var item = o1.value;
				var tmp = tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a));
				cb(tmp);
				break;
			case 1:
				var e = o1.e;
				cb(tink_streams_Step.Fail(e));
				break;
			case 2:
				(first == a ? n2 : n1).handle(cb);
				break;
			}
		});
	}));
};
tink_streams_BlendStream.__name__ = true;
tink_streams_BlendStream.__super__ = tink_streams_Generator;
tink_streams_BlendStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : true, __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
var tink_streams_SignalStream = function(signal) {
	var ret = tink_core__$Signal_Signal_$Impl_$.nextTime(signal).map(function(o) {
		switch(o._hx_index) {
		case 0:
			var data = o.data;
			return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
		case 1:
			var e = o.e;
			return tink_streams_Step.Fail(e);
		case 2:
			return tink_streams_Step.End;
		}
	});
	tink_streams_Generator.call(this,ret.gather());
};
tink_streams_SignalStream.__name__ = true;
tink_streams_SignalStream.__super__ = tink_streams_Generator;
tink_streams_SignalStream.prototype = $extend(tink_streams_Generator.prototype,{
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : true, __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
var tink_url__$Auth_Auth_$Impl_$ = {};
tink_url__$Auth_Auth_$Impl_$.__name__ = true;
tink_url__$Auth_Auth_$Impl_$._new = function(user,password) {
	var this1 = "" + user + ":" + password;
	return this1;
};
tink_url__$Auth_Auth_$Impl_$.get_user = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[0];
	}
};
tink_url__$Auth_Auth_$Impl_$.get_password = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return this1.split(":")[1];
	}
};
tink_url__$Auth_Auth_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return "";
	} else {
		return "" + this1 + "@";
	}
};
var tink_url__$Host_Host_$Impl_$ = {};
tink_url__$Host_Host_$Impl_$.__name__ = true;
tink_url__$Host_Host_$Impl_$._new = function(name,port) {
	var this1;
	if(port == null) {
		this1 = name;
	} else if(port > 65535 || port <= 0) {
		throw new js__$Boot_HaxeError("Invalid port");
	} else {
		this1 = "" + name + ":" + port;
	}
	return this1;
};
tink_url__$Host_Host_$Impl_$.get_name = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			return v.split(":")[0];
		case 2:
			var v1 = _g[0];
			return v1 + "]";
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
tink_url__$Host_Host_$Impl_$.get_port = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		var _g = this1.split("]");
		switch(_g.length) {
		case 1:
			var v = _g[0];
			var _g1 = v.split(":")[1];
			if(_g1 == null) {
				return null;
			} else {
				var p = _g1;
				return Std.parseInt(p);
			}
			break;
		case 2:
			var v1 = _g[1];
			var _g2 = v1.split(":")[1];
			if(_g2 == null) {
				return null;
			} else {
				var p1 = _g2;
				return Std.parseInt(p1);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
};
tink_url__$Host_Host_$Impl_$.toString = function(this1) {
	return this1;
};
var tink_url__$Path_Path_$Impl_$ = {};
tink_url__$Path_Path_$Impl_$.__name__ = true;
tink_url__$Path_Path_$Impl_$.parts = function(this1) {
	var _g = [];
	var _g1 = 0;
	var _g2 = this1.split("/");
	while(_g1 < _g2.length) {
		var p = _g2[_g1];
		++_g1;
		if(p != "") {
			var this2 = p;
			_g.push(this2);
		}
	}
	return _g;
};
tink_url__$Path_Path_$Impl_$.get_absolute = function(this1) {
	return this1.charAt(0) == "/";
};
tink_url__$Path_Path_$Impl_$.get_isDir = function(this1) {
	return this1.charAt(this1.length - 1) == "/";
};
tink_url__$Path_Path_$Impl_$._new = function(s) {
	var this1 = s;
	return this1;
};
tink_url__$Path_Path_$Impl_$.join = function(this1,that) {
	if(that == "") {
		return this1;
	} else if(that.charAt(0) == "/") {
		return that;
	} else if(this1.charAt(this1.length - 1) == "/") {
		return tink_url__$Path_Path_$Impl_$.ofString(this1 + that);
	} else {
		var _g = this1.lastIndexOf("/");
		if(_g == -1) {
			return that;
		} else {
			var v = _g;
			return tink_url__$Path_Path_$Impl_$.ofString(HxOverrides.substr(this1,0,v + 1) + that);
		}
	}
};
tink_url__$Path_Path_$Impl_$.ofString = function(s) {
	var this1 = tink_url__$Path_Path_$Impl_$.normalize(s);
	return this1;
};
tink_url__$Path_Path_$Impl_$.normalize = function(s) {
	s = StringTools.trim(StringTools.replace(s,"\\","/"));
	if(s == ".") {
		return "./";
	}
	var isDir = StringTools.endsWith(s,"/..") || StringTools.endsWith(s,"/") || StringTools.endsWith(s,"/.");
	var parts = [];
	var isAbsolute = StringTools.startsWith(s,"/");
	var up = 0;
	var _g = 0;
	var _g1 = s.split("/");
	while(_g < _g1.length) {
		var part = _g1[_g];
		++_g;
		var _g2 = StringTools.trim(part);
		switch(_g2) {
		case "":
			break;
		case ".":
			break;
		case "..":
			if(parts.pop() == null) {
				++up;
			}
			break;
		default:
			var v = _g2;
			parts.push(v);
		}
	}
	if(isAbsolute) {
		parts.unshift("");
	} else {
		var _g21 = 0;
		var _g3 = up;
		while(_g21 < _g3) {
			var i = _g21++;
			parts.unshift("..");
		}
	}
	if(isDir) {
		parts.push("");
	}
	return parts.join("/");
};
tink_url__$Path_Path_$Impl_$.toString = function(this1) {
	return this1;
};
var tink_url__$Portion_Portion_$Impl_$ = {};
tink_url__$Portion_Portion_$Impl_$.__name__ = true;
tink_url__$Portion_Portion_$Impl_$.get_raw = function(this1) {
	return this1;
};
tink_url__$Portion_Portion_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
tink_url__$Portion_Portion_$Impl_$.stringly = function(this1) {
	return tink_url__$Portion_Portion_$Impl_$.toString(this1);
};
tink_url__$Portion_Portion_$Impl_$.toString = function(this1) {
	if(this1 == null) {
		return null;
	} else {
		return decodeURIComponent(this1.split("+").join(" "));
	}
};
tink_url__$Portion_Portion_$Impl_$.ofString = function(s) {
	var this1 = s == null ? "" : encodeURIComponent(s);
	return this1;
};
var tink_url__$PortionArray_PortionArray_$Impl_$ = {};
tink_url__$PortionArray_PortionArray_$Impl_$.__name__ = true;
tink_url__$PortionArray_PortionArray_$Impl_$.toStringArray = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url__$Portion_Portion_$Impl_$.toString(p));
	}
	return _g;
};
var tink_url__$Query_Query_$Impl_$ = {};
tink_url__$Query_Query_$Impl_$.__name__ = true;
tink_url__$Query_Query_$Impl_$.parse = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url__$Query_Query_$Impl_$.with = function(this1,values) {
	var this2 = [];
	var ret = this2;
	var _g = [];
	var key = values.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		_g.push(key1);
	}
	var insert = _g;
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		if(values.exists(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name))) {
			ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name) + "=" + values.get(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name)));
			HxOverrides.remove(insert,tink_url__$Portion_Portion_$Impl_$.ofString(p1.name));
		} else {
			ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(p1.name) + "=" + p1.value);
		}
	}
	var _g1 = 0;
	while(_g1 < insert.length) {
		var name = insert[_g1];
		++_g1;
		ret.push(name + "=" + values.get(name));
	}
	return ret.join("&");
};
tink_url__$Query_Query_$Impl_$.iterator = function(this1) {
	return new tink_url__$Query_QueryStringParser(this1,"&","=",0);
};
tink_url__$Query_Query_$Impl_$.toMap = function(this1) {
	var _g = new haxe_ds_StringMap();
	var p = new tink_url__$Query_QueryStringParser(this1,"&","=",0);
	while(p.hasNext()) {
		var p1 = p.next();
		var key = p1.name.toString();
		var value = p1.value;
		if(__map_reserved[key] != null) {
			_g.setReserved(key,value);
		} else {
			_g.h[key] = value;
		}
	}
	return _g;
};
tink_url__$Query_Query_$Impl_$.ofObj = function(v) {
	var this1 = [];
	var ret = this1;
	var v1 = v;
	var _g = 0;
	var _g1 = Reflect.fields(v1);
	while(_g < _g1.length) {
		var k = _g1[_g];
		++_g;
		ret.push(tink_url__$Portion_Portion_$Impl_$.ofString(k) + "=" + tink_url__$Portion_Portion_$Impl_$.ofString(v1[k]));
	}
	return ret.join("&");
};
tink_url__$Query_Query_$Impl_$.toString = function(this1) {
	return this1;
};
tink_url__$Query_Query_$Impl_$.build = function() {
	var this1 = [];
	return this1;
};
tink_url__$Query_Query_$Impl_$.parseString = function(s,sep,set,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(set == null) {
		set = "=";
	}
	if(sep == null) {
		sep = "&";
	}
	return new tink_url__$Query_QueryStringParser(s,sep,set,pos);
};
var tink_url__$Query_QueryStringBuilder_$Impl_$ = {};
tink_url__$Query_QueryStringBuilder_$Impl_$.__name__ = true;
tink_url__$Query_QueryStringBuilder_$Impl_$._new = function() {
	var this1 = [];
	return this1;
};
tink_url__$Query_QueryStringBuilder_$Impl_$.add = function(this1,name,value) {
	this1.push(name + "=" + value);
	return this1;
};
tink_url__$Query_QueryStringBuilder_$Impl_$.toString = function(this1,sep) {
	if(sep == null) {
		sep = "&";
	}
	return this1.join(sep);
};
tink_url__$Query_QueryStringBuilder_$Impl_$.copy = function(this1) {
	return this1.slice();
};
var tink_url__$Query_QueryStringParser = function(s,sep,set,pos) {
	this.s = s == null ? "" : s;
	this.sep = sep;
	this.set = set;
	this.pos = pos;
};
tink_url__$Query_QueryStringParser.__name__ = true;
tink_url__$Query_QueryStringParser.trimmedSub = function(s,start,end) {
	if(start >= s.length) {
		var this1 = "";
		return this1;
	}
	while(s.charCodeAt(start) < 33) ++start;
	if(end < s.length - 1) {
		while(s.charCodeAt(end - 1) < 33) --end;
	}
	var this2 = s.substring(start,end);
	return this2;
};
tink_url__$Query_QueryStringParser.prototype = {
	hasNext: function() {
		return this.pos < this.s.length;
	}
	,next: function() {
		var next = this.s.indexOf(this.sep,this.pos);
		if(next == -1) {
			next = this.s.length;
		}
		var split = this.s.indexOf(this.set,this.pos);
		var start = this.pos;
		this.pos = next + this.sep.length;
		if(split == -1 || split > next) {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,next)),tink_url__$Portion_Portion_$Impl_$.ofString(""));
		} else {
			return new tink_core_NamedWith(tink_url__$Portion_Portion_$Impl_$.stringly(tink_url__$Query_QueryStringParser.trimmedSub(this.s,start,split)),tink_url__$Query_QueryStringParser.trimmedSub(this.s,split + this.set.length,next));
		}
	}
	,__class__: tink_url__$Query_QueryStringParser
};
var tink_web_forms__$FormField_FormField_$Impl_$ = {};
tink_web_forms__$FormField_FormField_$Impl_$.__name__ = true;
tink_web_forms__$FormField_FormField_$Impl_$.getValue = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var v = this1.v;
		return v;
	case 1:
		throw new js__$Boot_HaxeError("expected plain value but received file");
	}
};
tink_web_forms__$FormField_FormField_$Impl_$.toFloat = function(this1) {
	return tink__$Stringly_Stringly_$Impl_$.toFloat(tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1));
};
tink_web_forms__$FormField_FormField_$Impl_$.toInt = function(this1) {
	return tink__$Stringly_Stringly_$Impl_$.toInt(tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1));
};
tink_web_forms__$FormField_FormField_$Impl_$.toString = function(this1) {
	return tink_web_forms__$FormField_FormField_$Impl_$.getValue(this1);
};
tink_web_forms__$FormField_FormField_$Impl_$.getFile = function(this1) {
	switch(this1._hx_index) {
	case 0:
		throw new js__$Boot_HaxeError("expected file but got plain value");
	case 1:
		var u = this1.handle;
		var this2 = u;
		return this2;
	}
};
var tink_web_forms__$FormFile_FormFile_$Impl_$ = {};
tink_web_forms__$FormFile_FormFile_$Impl_$.__name__ = true;
tink_web_forms__$FormFile_FormFile_$Impl_$._new = function(v) {
	var this1 = v;
	return this1;
};
tink_web_forms__$FormFile_FormFile_$Impl_$.toJson = function(this1) {
	var this2 = this1.fileName;
	var this3 = this1.mimeType;
	var src = this1.read();
	var chunk = null;
	var write = tink_io_RealSourceTools.all(src).handle(function(c) {
		chunk = tink_core_OutcomeTools.sure(c);
	});
	var v;
	if(chunk != null) {
		v = chunk.toBytes();
	} else {
		if(write != null) {
			write.cancel();
		}
		throw new js__$Boot_HaxeError(new tink_core_TypedError(501,"Can only upload files through JSON backed by with sync sources but got a " + Std.string(src),{ fileName : "tink/web/forms/FormFile.hx", lineNumber : 34, className : "tink.web.forms._FormFile.FormFile_Impl_", methodName : "toJson"}));
	}
	var this4 = { fileName : this2, mimeType : this3, content : v};
	return this4;
};
tink_web_forms__$FormFile_FormFile_$Impl_$.ofJson = function(rep) {
	var data = tink_json__$Representation_Representation_$Impl_$.get(rep);
	var this1 = tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob(data.fileName,data.mimeType,data.content);
	return this1;
};
tink_web_forms__$FormFile_FormFile_$Impl_$.ofBlob = function(name,type,data) {
	return tink_http__$StructuredBody_UploadedFile_$Impl_$.ofBlob(name,type,data);
};
var tink_web_routing__$Context_Path_$Impl_$ = {};
tink_web_routing__$Context_Path_$Impl_$.__name__ = true;
tink_web_routing__$Context_Path_$Impl_$.toString = function(this1) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < this1.length) {
		var p = this1[_g1];
		++_g1;
		_g.push(tink_url__$Portion_Portion_$Impl_$.stringly(p));
	}
	return "/" + _g.join("/");
};
var tink_web_routing_Context = function(parent,accepts,request,depth,parts,params) {
	this.parent = parent;
	this.accepts = accepts;
	this.request = request;
	this.depth = depth;
	this.parts = parts;
	this.params = params;
};
tink_web_routing_Context.__name__ = true;
tink_web_routing_Context.toCamelCase = function(header) {
	var header1 = header;
	var ret_b = "";
	var pos = 0;
	var max = header1.length;
	while(pos < max) {
		var _g = header1.charCodeAt(pos++);
		if(_g == 45) {
			if(pos < max) {
				ret_b += Std.string(header1.charAt(pos++).toLowerCase());
			}
		} else {
			var v = _g;
			ret_b += String.fromCodePoint(v);
		}
	}
	return ret_b;
};
tink_web_routing_Context.ofRequest = function(request) {
	return new tink_web_routing_Context(null,tink_web_routing_Context.parseAcceptHeader(request.header),request,0,tink_url__$Path_Path_$Impl_$.parts(request.header.url.path),tink_url__$Query_Query_$Impl_$.toMap(request.header.url.query));
};
tink_web_routing_Context.authed = function(request,getSession) {
	var tmp = tink_web_routing_Context.parseAcceptHeader(request.header);
	var tmp1 = tink_url__$Path_Path_$Impl_$.parts(request.header.url.path);
	var tmp2 = tink_url__$Query_Query_$Impl_$.toMap(request.header.url.query);
	var f = getSession;
	var a1 = request.header;
	return new tink_web_routing_AuthedContext(null,tmp,request,0,tmp1,tmp2,new tink_core__$Lazy_LazyFunc(function() {
		return f(a1);
	}));
};
tink_web_routing_Context.parseAcceptHeader = function(h) {
	var _g = h.get("accept");
	if(_g.length == 0) {
		return tink_web_routing_Context.acceptsAll;
	} else {
		var values = _g;
		var _g1 = new haxe_ds_StringMap();
		var _g11 = 0;
		while(_g11 < values.length) {
			var v = values[_g11];
			++_g11;
			var _g12 = 0;
			var _g2 = tink_http__$Header_HeaderValue_$Impl_$.parse(v);
			while(_g12 < _g2.length) {
				var part = _g2[_g12];
				++_g12;
				var key = part.value;
				if(__map_reserved[key] != null) {
					_g1.setReserved(key,true);
				} else {
					_g1.h[key] = true;
				}
			}
		}
		var accepted = _g1;
		if(__map_reserved["*/*"] != null ? accepted.getReserved("*/*") : accepted.h["*/*"]) {
			return tink_web_routing_Context.acceptsAll;
		} else {
			return function(t) {
				if(__map_reserved[t] != null) {
					return accepted.existsReserved(t);
				} else {
					return accepted.h.hasOwnProperty(t);
				}
			};
		}
	}
};
tink_web_routing_Context.acceptsAll = function(s) {
	return true;
};
tink_web_routing_Context.prototype = {
	get_header: function() {
		return this.request.header;
	}
	,allRaw: function() {
		var _g = this.request.body;
		var tmp;
		if(_g._hx_index == 0) {
			var s = _g.source;
			tmp = s;
		} else {
			tmp = tink_io__$Source_Source_$Impl_$.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
		return tink_io_RealSourceTools.all(tmp);
	}
	,get_rawBody: function() {
		var _g = this.request.body;
		if(_g._hx_index == 0) {
			var s = _g.source;
			return s;
		} else {
			return tink_io__$Source_Source_$Impl_$.ofError(new tink_core_TypedError(501,"not implemented",{ fileName : "tink/web/routing/Context.hx", lineNumber : 47, className : "tink.web.routing.Context", methodName : "get_rawBody"}));
		}
	}
	,headers: function() {
		var _g = [];
		var f = HxOverrides.iter(this.request.header.fields);
		while(f.hasNext()) {
			var f1 = f.next();
			_g.push(new tink_core_NamedWith(tink_web_routing_Context.toCamelCase(f1.name),f1.value));
		}
		return tink_querystring__$Pairs_Pairs_$Impl_$.ofIterable(_g);
	}
	,parse: function() {
		var _g = this.request.body;
		switch(_g._hx_index) {
		case 0:
			var src = _g.source;
			var parseForm = function() {
				return tink_core__$Promise_Promise_$Impl_$.next(tink_io_RealSourceTools.all(src),tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(chunk) {
					var _g1 = [];
					var part = new tink_url__$Query_QueryStringParser(chunk.toString(),"&","=",0);
					while(part.hasNext()) {
						var part1 = part.next();
						_g1.push(new tink_core_NamedWith(part1.name,tink_http_BodyPart.Value(tink_url__$Portion_Portion_$Impl_$.stringly(part1.value))));
					}
					return _g1;
				}));
			};
			return parseForm();
		case 1:
			var parts = _g.parts;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(parts)));
		}
	}
	,get_pathLength: function() {
		return this.parts.length - this.depth;
	}
	,getPrefix: function() {
		return this.parts.slice(0,this.depth);
	}
	,getPath: function() {
		return this.parts.slice(this.depth);
	}
	,hasParam: function(name) {
		var _this = this.params;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,part: function(index) {
		if(this.depth + index >= this.parts.length) {
			return "";
		} else {
			return tink_url__$Portion_Portion_$Impl_$.stringly(this.parts[this.depth + index]);
		}
	}
	,param: function(name) {
		var _this = this.params;
		return tink_url__$Portion_Portion_$Impl_$.stringly(__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]);
	}
	,sub: function(descend) {
		return new tink_web_routing_Context(this,this.accepts,this.request,this.depth + descend,this.parts,this.params);
	}
	,__class__: tink_web_routing_Context
};
var tink_web_routing_AuthedContext = function(parent,accepts,request,depth,parts,params,session,user) {
	this.session = session;
	var tmp;
	if(user == null) {
		tmp = session.map(function(s) {
			return s.getUser();
		});
	} else {
		var v = user;
		tmp = v;
	}
	this.user = tmp;
	tink_web_routing_Context.call(this,parent,accepts,request,depth,parts,params);
};
tink_web_routing_AuthedContext.__name__ = true;
tink_web_routing_AuthedContext.__super__ = tink_web_routing_Context;
tink_web_routing_AuthedContext.prototype = $extend(tink_web_routing_Context.prototype,{
	sub: function(descend) {
		return new tink_web_routing_AuthedContext(this,this.accepts,this.request,this.depth + descend,this.parts,this.params,this.session,this.user);
	}
	,__class__: tink_web_routing_AuthedContext
});
var tink_web_routing__$Context_RequestReader_$Impl_$ = {};
tink_web_routing__$Context_RequestReader_$Impl_$.__name__ = true;
tink_web_routing__$Context_RequestReader_$Impl_$.ofStringReader = function(read) {
	return function(ctx) {
		return tink_core__$Promise_Promise_$Impl_$.next(ctx.allRaw(),function(body) {
			var o = body.toString();
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(read(o)));
		});
	};
};
tink_web_routing__$Context_RequestReader_$Impl_$.ofSafeStringReader = function(read) {
	return tink_web_routing__$Context_RequestReader_$Impl_$.ofStringReader(function(s) {
		return tink_core_Outcome.Success(read(s));
	});
};
var tink_web_routing__$Response_Response_$Impl_$ = {};
tink_web_routing__$Response_Response_$Impl_$.__name__ = true;
tink_web_routing__$Response_Response_$Impl_$.ofString = function(s) {
	return tink_web_routing__$Response_Response_$Impl_$.textual(null,"text/plain",s);
};
tink_web_routing__$Response_Response_$Impl_$.ofBytes = function(b) {
	return tink_web_routing__$Response_Response_$Impl_$.binary(null,"application/octet-stream",b);
};
tink_web_routing__$Response_Response_$Impl_$.ofUrl = function(u) {
	var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(302);
	var this2 = new tink_http_ResponseHeaderBase(302,this1,[new tink_http_HeaderField(tink_http__$Header_HeaderName_$Impl_$.ofString("location"),tink__$Url_Url_$Impl_$.toString(u))],"HTTP/1.1");
	var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY)));
	return this3;
};
tink_web_routing__$Response_Response_$Impl_$.binary = function(code,contentType,bytes) {
	return tink_http__$Response_OutgoingResponse_$Impl_$.blob(code,tink_chunk_ByteChunk.of(bytes),contentType);
};
tink_web_routing__$Response_Response_$Impl_$.empty = function(code) {
	if(code == null) {
		code = 200;
	}
	var this1 = httpstatus__$HttpStatusMessage_HttpStatusMessage_$Impl_$.fromCode(code);
	var this2 = new tink_http_ResponseHeaderBase(code,this1,[new tink_http_HeaderField("content-length","0")],"HTTP/1.1");
	var this3 = new tink_http__$Response_OutgoingResponseData(this2,new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY)));
	return this3;
};
tink_web_routing__$Response_Response_$Impl_$.textual = function(code,contentType,string) {
	return tink_web_routing__$Response_Response_$Impl_$.binary(code,contentType,haxe_io_Bytes.ofString(string));
};
var tink_web_routing_Router = function() { };
tink_web_routing_Router.__name__ = true;
var tink_web_routing_Router0 = function(target) {
	this.target = target;
};
tink_web_routing_Router0.__name__ = true;
tink_web_routing_Router0.prototype = {
	route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = l > 1;
		var _g2 = ctx.part(0);
		var _g3 = ctx.request.header.method;
		if(_g2 == "api" && l > 0 == true) {
			return this.api(ctx,1);
		} else {
			var this1 = ctx.request.header.url;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : this1.path + "?" + this1.query),{ fileName : "src/server/Api.hx", lineNumber : 17, className : "tink.web.routing.Router0", methodName : "route"}))));
		}
	}
	,api: function(ctx,__depth__) {
		var ctx1 = ctx.sub(__depth__);
		return tink_core__$Promise_Promise_$Impl_$.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this.target.api))),function(__target__) {
			return new tink_web_routing_Router1(__target__).route(ctx1);
		});
	}
	,__class__: tink_web_routing_Router0
};
var tink_web_routing_Router1 = function(target) {
	this.target = target;
};
tink_web_routing_Router1.__name__ = true;
tink_web_routing_Router1.prototype = {
	route: function(ctx) {
		var l = ctx.parts.length - ctx.depth;
		var _g = l > 1;
		var _g2 = ctx.part(0);
		if(ctx.request.header.method == "GET") {
			switch(l > 0) {
			case false:
				return tink_core__$Promise_Promise_$Impl_$.ofSpecific(this.serve(ctx,null));
			case true:
				if(_g == false) {
					var name = _g2;
					return tink_core__$Promise_Promise_$Impl_$.ofSpecific(this.serve(ctx,name));
				} else {
					var this1 = ctx.request.header.url;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this1.query == null ? this1.path : this1.path + "?" + this1.query),{ fileName : "?", lineNumber : 1, className : "tink.web.routing.Router1", methodName : "route"}))));
				}
				break;
			}
		} else {
			var this2 = ctx.request.header.url;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Not Found: [" + ctx.request.header.method + "] " + (this2.query == null ? this2.path : this2.path + "?" + this2.query),{ fileName : "?", lineNumber : 1, className : "tink.web.routing.Router1", methodName : "route"}))));
		}
	}
	,serve: function(ctx,name) {
		var d = this.target;
		var d1;
		if(name == null) {
			d1 = null;
		} else {
			var _g = tink__$Stringly_Stringly_$Impl_$.parse(name,function(s) {
				return s;
			});
			switch(_g._hx_index) {
			case 0:
				var v = _g.data;
				d1 = v;
				break;
			case 1:
				var e = _g.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
			}
		}
		return tink_core__$Promise_Promise_$Impl_$.next(new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d.serve(d1)))),tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(v1) {
			return tink_web_routing__$Response_Response_$Impl_$.ofString(v1);
		}));
	}
	,__class__: tink_web_routing_Router1
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "conf", data : "ew0KICAiaG9zdCI6ICJsb2NhbGhvc3QiLA0KICAicG9ydCI6IDgwODANCn0"}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Continue = 100;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SwitchingProtocols = 101;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Processing = 102;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.OK = 200;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Created = 201;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Accepted = 202;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NonAuthoritativeInformation = 203;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NoContent = 204;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ResetContent = 205;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PartialContent = 206;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MultiStatus = 207;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.AlreadyReported = 208;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.IMUsed = 226;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MultipleChoices = 300;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MovedPermanently = 301;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Found = 302;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SeeOther = 303;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotModified = 304;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UseProxy = 305;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.SwitchProxy = 306;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.TemporaryRedirect = 307;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PermanentRedirect = 308;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.BadRequest = 400;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Unauthorized = 401;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PaymentRequired = 402;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Forbidden = 403;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotFound = 404;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MethodNotAllowed = 405;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotAcceptable = 406;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ProxyAuthenticationRequired = 407;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RequestTimeout = 408;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Conflict = 409;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Gone = 410;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.LengthRequired = 411;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PreconditionFailed = 412;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PayloadTooLarge = 413;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.URITooLong = 414;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnsupportedMediaType = 415;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RangeNotSatisfiable = 416;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ExpectationFailed = 417;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ImATeapot = 418;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.MisdirectedRequest = 421;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnprocessableEntity = 422;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.Locked = 423;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.FailedDependency = 424;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UpgradeRequired = 426;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.PreconditionRequired = 428;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.TooManyRequests = 429;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.RequestHeaderFieldsTooLarge = 431;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.UnavailableForLegalReasons = 451;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.InternalServerError = 500;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotImplemented = 501;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.BadGateway = 502;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.ServiceUnavailable = 503;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.GatewayTimeout = 504;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.HTTPVersionNotSupported = 505;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.VariantAlsoNegotiates = 506;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.InsufficientStorage = 507;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.LoopDetected = 508;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NotExtended = 510;
httpstatus__$HttpStatusCode_HttpStatusCode_$Impl_$.NetworkAuthenticationRequired = 511;
mime_Mime.db = { "application/1d-interleaved-parityfec" : { "source" : "iana"}, "application/3gpdash-qoe-report+xml" : { "source" : "iana", "compressible" : true}, "application/3gpp-ims+xml" : { "source" : "iana", "compressible" : true}, "application/a2l" : { "source" : "iana"}, "application/activemessage" : { "source" : "iana"}, "application/activity+json" : { "source" : "iana", "compressible" : true}, "application/alto-costmap+json" : { "source" : "iana", "compressible" : true}, "application/alto-costmapfilter+json" : { "source" : "iana", "compressible" : true}, "application/alto-directory+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointcost+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointcostparams+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointprop+json" : { "source" : "iana", "compressible" : true}, "application/alto-endpointpropparams+json" : { "source" : "iana", "compressible" : true}, "application/alto-error+json" : { "source" : "iana", "compressible" : true}, "application/alto-networkmap+json" : { "source" : "iana", "compressible" : true}, "application/alto-networkmapfilter+json" : { "source" : "iana", "compressible" : true}, "application/aml" : { "source" : "iana"}, "application/andrew-inset" : { "source" : "iana", "extensions" : ["ez"]}, "application/applefile" : { "source" : "iana"}, "application/applixware" : { "source" : "apache", "extensions" : ["aw"]}, "application/atf" : { "source" : "iana"}, "application/atfx" : { "source" : "iana"}, "application/atom+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atom"]}, "application/atomcat+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atomcat"]}, "application/atomdeleted+xml" : { "source" : "iana", "compressible" : true}, "application/atomicmail" : { "source" : "iana"}, "application/atomsvc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["atomsvc"]}, "application/atxml" : { "source" : "iana"}, "application/auth-policy+xml" : { "source" : "iana", "compressible" : true}, "application/bacnet-xdd+zip" : { "source" : "iana", "compressible" : false}, "application/batch-smtp" : { "source" : "iana"}, "application/bdoc" : { "compressible" : false, "extensions" : ["bdoc"]}, "application/beep+xml" : { "source" : "iana", "compressible" : true}, "application/calendar+json" : { "source" : "iana", "compressible" : true}, "application/calendar+xml" : { "source" : "iana", "compressible" : true}, "application/call-completion" : { "source" : "iana"}, "application/cals-1840" : { "source" : "iana"}, "application/cbor" : { "source" : "iana"}, "application/cccex" : { "source" : "iana"}, "application/ccmp+xml" : { "source" : "iana", "compressible" : true}, "application/ccxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ccxml"]}, "application/cdfx+xml" : { "source" : "iana", "compressible" : true}, "application/cdmi-capability" : { "source" : "iana", "extensions" : ["cdmia"]}, "application/cdmi-container" : { "source" : "iana", "extensions" : ["cdmic"]}, "application/cdmi-domain" : { "source" : "iana", "extensions" : ["cdmid"]}, "application/cdmi-object" : { "source" : "iana", "extensions" : ["cdmio"]}, "application/cdmi-queue" : { "source" : "iana", "extensions" : ["cdmiq"]}, "application/cdni" : { "source" : "iana"}, "application/cea" : { "source" : "iana"}, "application/cea-2018+xml" : { "source" : "iana", "compressible" : true}, "application/cellml+xml" : { "source" : "iana", "compressible" : true}, "application/cfw" : { "source" : "iana"}, "application/clue_info+xml" : { "source" : "iana", "compressible" : true}, "application/cms" : { "source" : "iana"}, "application/cnrp+xml" : { "source" : "iana", "compressible" : true}, "application/coap-group+json" : { "source" : "iana", "compressible" : true}, "application/coap-payload" : { "source" : "iana"}, "application/commonground" : { "source" : "iana"}, "application/conference-info+xml" : { "source" : "iana", "compressible" : true}, "application/cose" : { "source" : "iana"}, "application/cose-key" : { "source" : "iana"}, "application/cose-key-set" : { "source" : "iana"}, "application/cpl+xml" : { "source" : "iana", "compressible" : true}, "application/csrattrs" : { "source" : "iana"}, "application/csta+xml" : { "source" : "iana", "compressible" : true}, "application/cstadata+xml" : { "source" : "iana", "compressible" : true}, "application/csvm+json" : { "source" : "iana", "compressible" : true}, "application/cu-seeme" : { "source" : "apache", "extensions" : ["cu"]}, "application/cwt" : { "source" : "iana"}, "application/cybercash" : { "source" : "iana"}, "application/dart" : { "compressible" : true}, "application/dash+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mpd"]}, "application/dashdelta" : { "source" : "iana"}, "application/davmount+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["davmount"]}, "application/dca-rft" : { "source" : "iana"}, "application/dcd" : { "source" : "iana"}, "application/dec-dx" : { "source" : "iana"}, "application/dialog-info+xml" : { "source" : "iana", "compressible" : true}, "application/dicom" : { "source" : "iana"}, "application/dicom+json" : { "source" : "iana", "compressible" : true}, "application/dicom+xml" : { "source" : "iana", "compressible" : true}, "application/dii" : { "source" : "iana"}, "application/dit" : { "source" : "iana"}, "application/dns" : { "source" : "iana"}, "application/dns+json" : { "source" : "iana", "compressible" : true}, "application/dns-message" : { "source" : "iana"}, "application/docbook+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["dbk"]}, "application/dskpp+xml" : { "source" : "iana", "compressible" : true}, "application/dssc+der" : { "source" : "iana", "extensions" : ["dssc"]}, "application/dssc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdssc"]}, "application/dvcs" : { "source" : "iana"}, "application/ecmascript" : { "source" : "iana", "compressible" : true, "extensions" : ["ecma","es"]}, "application/edi-consent" : { "source" : "iana"}, "application/edi-x12" : { "source" : "iana", "compressible" : false}, "application/edifact" : { "source" : "iana", "compressible" : false}, "application/efi" : { "source" : "iana"}, "application/emergencycalldata.comment+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.control+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.deviceinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.ecall.msd" : { "source" : "iana"}, "application/emergencycalldata.providerinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.serviceinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.subscriberinfo+xml" : { "source" : "iana", "compressible" : true}, "application/emergencycalldata.veds+xml" : { "source" : "iana", "compressible" : true}, "application/emma+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["emma"]}, "application/emotionml+xml" : { "source" : "iana", "compressible" : true}, "application/encaprtp" : { "source" : "iana"}, "application/epp+xml" : { "source" : "iana", "compressible" : true}, "application/epub+zip" : { "source" : "iana", "compressible" : false, "extensions" : ["epub"]}, "application/eshop" : { "source" : "iana"}, "application/exi" : { "source" : "iana", "extensions" : ["exi"]}, "application/expect-ct-report+json" : { "source" : "iana", "compressible" : true}, "application/fastinfoset" : { "source" : "iana"}, "application/fastsoap" : { "source" : "iana"}, "application/fdt+xml" : { "source" : "iana", "compressible" : true}, "application/fhir+json" : { "source" : "iana", "compressible" : true}, "application/fhir+xml" : { "source" : "iana", "compressible" : true}, "application/fido.trusted-apps+json" : { "compressible" : true}, "application/fits" : { "source" : "iana"}, "application/font-sfnt" : { "source" : "iana"}, "application/font-tdpfr" : { "source" : "iana", "extensions" : ["pfr"]}, "application/font-woff" : { "source" : "iana", "compressible" : false}, "application/framework-attributes+xml" : { "source" : "iana", "compressible" : true}, "application/geo+json" : { "source" : "iana", "compressible" : true, "extensions" : ["geojson"]}, "application/geo+json-seq" : { "source" : "iana"}, "application/geopackage+sqlite3" : { "source" : "iana"}, "application/geoxacml+xml" : { "source" : "iana", "compressible" : true}, "application/gltf-buffer" : { "source" : "iana"}, "application/gml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["gml"]}, "application/gpx+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["gpx"]}, "application/gxf" : { "source" : "apache", "extensions" : ["gxf"]}, "application/gzip" : { "source" : "iana", "compressible" : false, "extensions" : ["gz"]}, "application/h224" : { "source" : "iana"}, "application/held+xml" : { "source" : "iana", "compressible" : true}, "application/hjson" : { "extensions" : ["hjson"]}, "application/http" : { "source" : "iana"}, "application/hyperstudio" : { "source" : "iana", "extensions" : ["stk"]}, "application/ibe-key-request+xml" : { "source" : "iana", "compressible" : true}, "application/ibe-pkg-reply+xml" : { "source" : "iana", "compressible" : true}, "application/ibe-pp-data" : { "source" : "iana"}, "application/iges" : { "source" : "iana"}, "application/im-iscomposing+xml" : { "source" : "iana", "compressible" : true}, "application/index" : { "source" : "iana"}, "application/index.cmd" : { "source" : "iana"}, "application/index.obj" : { "source" : "iana"}, "application/index.response" : { "source" : "iana"}, "application/index.vnd" : { "source" : "iana"}, "application/inkml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ink","inkml"]}, "application/iotp" : { "source" : "iana"}, "application/ipfix" : { "source" : "iana", "extensions" : ["ipfix"]}, "application/ipp" : { "source" : "iana"}, "application/isup" : { "source" : "iana"}, "application/its+xml" : { "source" : "iana", "compressible" : true}, "application/java-archive" : { "source" : "apache", "compressible" : false, "extensions" : ["jar","war","ear"]}, "application/java-serialized-object" : { "source" : "apache", "compressible" : false, "extensions" : ["ser"]}, "application/java-vm" : { "source" : "apache", "compressible" : false, "extensions" : ["class"]}, "application/javascript" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["js","mjs"]}, "application/jf2feed+json" : { "source" : "iana", "compressible" : true}, "application/jose" : { "source" : "iana"}, "application/jose+json" : { "source" : "iana", "compressible" : true}, "application/jrd+json" : { "source" : "iana", "compressible" : true}, "application/json" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["json","map"]}, "application/json-patch+json" : { "source" : "iana", "compressible" : true}, "application/json-seq" : { "source" : "iana"}, "application/json5" : { "extensions" : ["json5"]}, "application/jsonml+json" : { "source" : "apache", "compressible" : true, "extensions" : ["jsonml"]}, "application/jwk+json" : { "source" : "iana", "compressible" : true}, "application/jwk-set+json" : { "source" : "iana", "compressible" : true}, "application/jwt" : { "source" : "iana"}, "application/kpml-request+xml" : { "source" : "iana", "compressible" : true}, "application/kpml-response+xml" : { "source" : "iana", "compressible" : true}, "application/ld+json" : { "source" : "iana", "compressible" : true, "extensions" : ["jsonld"]}, "application/lgr+xml" : { "source" : "iana", "compressible" : true}, "application/link-format" : { "source" : "iana"}, "application/load-control+xml" : { "source" : "iana", "compressible" : true}, "application/lost+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lostxml"]}, "application/lostsync+xml" : { "source" : "iana", "compressible" : true}, "application/lxf" : { "source" : "iana"}, "application/mac-binhex40" : { "source" : "iana", "extensions" : ["hqx"]}, "application/mac-compactpro" : { "source" : "apache", "extensions" : ["cpt"]}, "application/macwriteii" : { "source" : "iana"}, "application/mads+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mads"]}, "application/manifest+json" : { "charset" : "UTF-8", "compressible" : true, "extensions" : ["webmanifest"]}, "application/marc" : { "source" : "iana", "extensions" : ["mrc"]}, "application/marcxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mrcx"]}, "application/mathematica" : { "source" : "iana", "extensions" : ["ma","nb","mb"]}, "application/mathml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mathml"]}, "application/mathml-content+xml" : { "source" : "iana", "compressible" : true}, "application/mathml-presentation+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-associated-procedure-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-deregister+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-envelope+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-msk+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-msk-response+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-protection-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-reception-report+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-register+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-register-response+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-schedule+xml" : { "source" : "iana", "compressible" : true}, "application/mbms-user-service-description+xml" : { "source" : "iana", "compressible" : true}, "application/mbox" : { "source" : "iana", "extensions" : ["mbox"]}, "application/media-policy-dataset+xml" : { "source" : "iana", "compressible" : true}, "application/media_control+xml" : { "source" : "iana", "compressible" : true}, "application/mediaservercontrol+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mscml"]}, "application/merge-patch+json" : { "source" : "iana", "compressible" : true}, "application/metalink+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["metalink"]}, "application/metalink4+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["meta4"]}, "application/mets+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mets"]}, "application/mf4" : { "source" : "iana"}, "application/mikey" : { "source" : "iana"}, "application/mmt-usd+xml" : { "source" : "iana", "compressible" : true}, "application/mods+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mods"]}, "application/moss-keys" : { "source" : "iana"}, "application/moss-signature" : { "source" : "iana"}, "application/mosskey-data" : { "source" : "iana"}, "application/mosskey-request" : { "source" : "iana"}, "application/mp21" : { "source" : "iana", "extensions" : ["m21","mp21"]}, "application/mp4" : { "source" : "iana", "extensions" : ["mp4s","m4p"]}, "application/mpeg4-generic" : { "source" : "iana"}, "application/mpeg4-iod" : { "source" : "iana"}, "application/mpeg4-iod-xmt" : { "source" : "iana"}, "application/mrb-consumer+xml" : { "source" : "iana", "compressible" : true}, "application/mrb-publish+xml" : { "source" : "iana", "compressible" : true}, "application/msc-ivr+xml" : { "source" : "iana", "compressible" : true}, "application/msc-mixer+xml" : { "source" : "iana", "compressible" : true}, "application/msword" : { "source" : "iana", "compressible" : false, "extensions" : ["doc","dot"]}, "application/mud+json" : { "source" : "iana", "compressible" : true}, "application/mxf" : { "source" : "iana", "extensions" : ["mxf"]}, "application/n-quads" : { "source" : "iana", "extensions" : ["nq"]}, "application/n-triples" : { "source" : "iana", "extensions" : ["nt"]}, "application/nasdata" : { "source" : "iana"}, "application/news-checkgroups" : { "source" : "iana"}, "application/news-groupinfo" : { "source" : "iana"}, "application/news-transmission" : { "source" : "iana"}, "application/nlsml+xml" : { "source" : "iana", "compressible" : true}, "application/node" : { "source" : "iana"}, "application/nss" : { "source" : "iana"}, "application/ocsp-request" : { "source" : "iana"}, "application/ocsp-response" : { "source" : "iana"}, "application/octet-stream" : { "source" : "iana", "compressible" : false, "extensions" : ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]}, "application/oda" : { "source" : "iana", "extensions" : ["oda"]}, "application/odm+xml" : { "source" : "iana", "compressible" : true}, "application/odx" : { "source" : "iana"}, "application/oebps-package+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["opf"]}, "application/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["ogx"]}, "application/omdoc+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["omdoc"]}, "application/onenote" : { "source" : "apache", "extensions" : ["onetoc","onetoc2","onetmp","onepkg"]}, "application/oxps" : { "source" : "iana", "extensions" : ["oxps"]}, "application/p2p-overlay+xml" : { "source" : "iana", "compressible" : true}, "application/parityfec" : { "source" : "iana"}, "application/passport" : { "source" : "iana"}, "application/patch-ops-error+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xer"]}, "application/pdf" : { "source" : "iana", "compressible" : false, "extensions" : ["pdf"]}, "application/pdx" : { "source" : "iana"}, "application/pem-certificate-chain" : { "source" : "iana"}, "application/pgp-encrypted" : { "source" : "iana", "compressible" : false, "extensions" : ["pgp"]}, "application/pgp-keys" : { "source" : "iana"}, "application/pgp-signature" : { "source" : "iana", "extensions" : ["asc","sig"]}, "application/pics-rules" : { "source" : "apache", "extensions" : ["prf"]}, "application/pidf+xml" : { "source" : "iana", "compressible" : true}, "application/pidf-diff+xml" : { "source" : "iana", "compressible" : true}, "application/pkcs10" : { "source" : "iana", "extensions" : ["p10"]}, "application/pkcs12" : { "source" : "iana"}, "application/pkcs7-mime" : { "source" : "iana", "extensions" : ["p7m","p7c"]}, "application/pkcs7-signature" : { "source" : "iana", "extensions" : ["p7s"]}, "application/pkcs8" : { "source" : "iana", "extensions" : ["p8"]}, "application/pkcs8-encrypted" : { "source" : "iana"}, "application/pkix-attr-cert" : { "source" : "iana", "extensions" : ["ac"]}, "application/pkix-cert" : { "source" : "iana", "extensions" : ["cer"]}, "application/pkix-crl" : { "source" : "iana", "extensions" : ["crl"]}, "application/pkix-pkipath" : { "source" : "iana", "extensions" : ["pkipath"]}, "application/pkixcmp" : { "source" : "iana", "extensions" : ["pki"]}, "application/pls+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["pls"]}, "application/poc-settings+xml" : { "source" : "iana", "compressible" : true}, "application/postscript" : { "source" : "iana", "compressible" : true, "extensions" : ["ai","eps","ps"]}, "application/ppsp-tracker+json" : { "source" : "iana", "compressible" : true}, "application/problem+json" : { "source" : "iana", "compressible" : true}, "application/problem+xml" : { "source" : "iana", "compressible" : true}, "application/provenance+xml" : { "source" : "iana", "compressible" : true}, "application/prs.alvestrand.titrax-sheet" : { "source" : "iana"}, "application/prs.cww" : { "source" : "iana", "extensions" : ["cww"]}, "application/prs.hpub+zip" : { "source" : "iana", "compressible" : false}, "application/prs.nprend" : { "source" : "iana"}, "application/prs.plucker" : { "source" : "iana"}, "application/prs.rdf-xml-crypt" : { "source" : "iana"}, "application/prs.xsf+xml" : { "source" : "iana", "compressible" : true}, "application/pskc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["pskcxml"]}, "application/qsig" : { "source" : "iana"}, "application/raml+yaml" : { "compressible" : true, "extensions" : ["raml"]}, "application/raptorfec" : { "source" : "iana"}, "application/rdap+json" : { "source" : "iana", "compressible" : true}, "application/rdf+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rdf","owl"]}, "application/reginfo+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rif"]}, "application/relax-ng-compact-syntax" : { "source" : "iana", "extensions" : ["rnc"]}, "application/remote-printing" : { "source" : "iana"}, "application/reputon+json" : { "source" : "iana", "compressible" : true}, "application/resource-lists+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rl"]}, "application/resource-lists-diff+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rld"]}, "application/rfc+xml" : { "source" : "iana", "compressible" : true}, "application/riscos" : { "source" : "iana"}, "application/rlmi+xml" : { "source" : "iana", "compressible" : true}, "application/rls-services+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["rs"]}, "application/route-apd+xml" : { "source" : "iana", "compressible" : true}, "application/route-s-tsid+xml" : { "source" : "iana", "compressible" : true}, "application/route-usd+xml" : { "source" : "iana", "compressible" : true}, "application/rpki-ghostbusters" : { "source" : "iana", "extensions" : ["gbr"]}, "application/rpki-manifest" : { "source" : "iana", "extensions" : ["mft"]}, "application/rpki-publication" : { "source" : "iana"}, "application/rpki-roa" : { "source" : "iana", "extensions" : ["roa"]}, "application/rpki-updown" : { "source" : "iana"}, "application/rsd+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["rsd"]}, "application/rss+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["rss"]}, "application/rtf" : { "source" : "iana", "compressible" : true, "extensions" : ["rtf"]}, "application/rtploopback" : { "source" : "iana"}, "application/rtx" : { "source" : "iana"}, "application/samlassertion+xml" : { "source" : "iana", "compressible" : true}, "application/samlmetadata+xml" : { "source" : "iana", "compressible" : true}, "application/sbml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sbml"]}, "application/scaip+xml" : { "source" : "iana", "compressible" : true}, "application/scim+json" : { "source" : "iana", "compressible" : true}, "application/scvp-cv-request" : { "source" : "iana", "extensions" : ["scq"]}, "application/scvp-cv-response" : { "source" : "iana", "extensions" : ["scs"]}, "application/scvp-vp-request" : { "source" : "iana", "extensions" : ["spq"]}, "application/scvp-vp-response" : { "source" : "iana", "extensions" : ["spp"]}, "application/sdp" : { "source" : "iana", "extensions" : ["sdp"]}, "application/secevent+jwt" : { "source" : "iana"}, "application/senml+cbor" : { "source" : "iana"}, "application/senml+json" : { "source" : "iana", "compressible" : true}, "application/senml+xml" : { "source" : "iana", "compressible" : true}, "application/senml-exi" : { "source" : "iana"}, "application/sensml+cbor" : { "source" : "iana"}, "application/sensml+json" : { "source" : "iana", "compressible" : true}, "application/sensml+xml" : { "source" : "iana", "compressible" : true}, "application/sensml-exi" : { "source" : "iana"}, "application/sep+xml" : { "source" : "iana", "compressible" : true}, "application/sep-exi" : { "source" : "iana"}, "application/session-info" : { "source" : "iana"}, "application/set-payment" : { "source" : "iana"}, "application/set-payment-initiation" : { "source" : "iana", "extensions" : ["setpay"]}, "application/set-registration" : { "source" : "iana"}, "application/set-registration-initiation" : { "source" : "iana", "extensions" : ["setreg"]}, "application/sgml" : { "source" : "iana"}, "application/sgml-open-catalog" : { "source" : "iana"}, "application/shf+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["shf"]}, "application/sieve" : { "source" : "iana"}, "application/simple-filter+xml" : { "source" : "iana", "compressible" : true}, "application/simple-message-summary" : { "source" : "iana"}, "application/simplesymbolcontainer" : { "source" : "iana"}, "application/slate" : { "source" : "iana"}, "application/smil" : { "source" : "iana"}, "application/smil+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["smi","smil"]}, "application/smpte336m" : { "source" : "iana"}, "application/soap+fastinfoset" : { "source" : "iana"}, "application/soap+xml" : { "source" : "iana", "compressible" : true}, "application/sparql-query" : { "source" : "iana", "extensions" : ["rq"]}, "application/sparql-results+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["srx"]}, "application/spirits-event+xml" : { "source" : "iana", "compressible" : true}, "application/sql" : { "source" : "iana"}, "application/srgs" : { "source" : "iana", "extensions" : ["gram"]}, "application/srgs+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["grxml"]}, "application/sru+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sru"]}, "application/ssdl+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["ssdl"]}, "application/ssml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["ssml"]}, "application/stix+json" : { "source" : "iana", "compressible" : true}, "application/tamp-apex-update" : { "source" : "iana"}, "application/tamp-apex-update-confirm" : { "source" : "iana"}, "application/tamp-community-update" : { "source" : "iana"}, "application/tamp-community-update-confirm" : { "source" : "iana"}, "application/tamp-error" : { "source" : "iana"}, "application/tamp-sequence-adjust" : { "source" : "iana"}, "application/tamp-sequence-adjust-confirm" : { "source" : "iana"}, "application/tamp-status-query" : { "source" : "iana"}, "application/tamp-status-response" : { "source" : "iana"}, "application/tamp-update" : { "source" : "iana"}, "application/tamp-update-confirm" : { "source" : "iana"}, "application/tar" : { "compressible" : true}, "application/taxii+json" : { "source" : "iana", "compressible" : true}, "application/tei+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["tei","teicorpus"]}, "application/tetra_isi" : { "source" : "iana"}, "application/thraud+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["tfi"]}, "application/timestamp-query" : { "source" : "iana"}, "application/timestamp-reply" : { "source" : "iana"}, "application/timestamped-data" : { "source" : "iana", "extensions" : ["tsd"]}, "application/tlsrpt+gzip" : { "source" : "iana"}, "application/tlsrpt+json" : { "source" : "iana", "compressible" : true}, "application/tnauthlist" : { "source" : "iana"}, "application/trickle-ice-sdpfrag" : { "source" : "iana"}, "application/trig" : { "source" : "iana"}, "application/ttml+xml" : { "source" : "iana", "compressible" : true}, "application/tve-trigger" : { "source" : "iana"}, "application/tzif" : { "source" : "iana"}, "application/tzif-leap" : { "source" : "iana"}, "application/ulpfec" : { "source" : "iana"}, "application/urc-grpsheet+xml" : { "source" : "iana", "compressible" : true}, "application/urc-ressheet+xml" : { "source" : "iana", "compressible" : true}, "application/urc-targetdesc+xml" : { "source" : "iana", "compressible" : true}, "application/urc-uisocketdesc+xml" : { "source" : "iana", "compressible" : true}, "application/vcard+json" : { "source" : "iana", "compressible" : true}, "application/vcard+xml" : { "source" : "iana", "compressible" : true}, "application/vemmi" : { "source" : "iana"}, "application/vividence.scriptfile" : { "source" : "apache"}, "application/vnd.1000minds.decision-model+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-prose+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-prose-pc3ch+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp-v2x-local-service-information" : { "source" : "iana"}, "application/vnd.3gpp.access-transfer-events+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.bsf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.gmop+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mc-signalling-ear" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-payload" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-signalling" : { "source" : "iana"}, "application/vnd.3gpp.mcdata-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcdata-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-floor-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-location-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-mbms-usage-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-signed+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-ue-init-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcptt-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-affiliation-command+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-affiliation-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-location-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-mbms-usage-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-service-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-transmission-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-ue-config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mcvideo-user-profile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.mid-call+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.pic-bw-large" : { "source" : "iana", "extensions" : ["plb"]}, "application/vnd.3gpp.pic-bw-small" : { "source" : "iana", "extensions" : ["psb"]}, "application/vnd.3gpp.pic-bw-var" : { "source" : "iana", "extensions" : ["pvb"]}, "application/vnd.3gpp.sms" : { "source" : "iana"}, "application/vnd.3gpp.sms+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.srvcc-ext+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.srvcc-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.state-and-event-info+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp.ussd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp2.bcmcsinfo+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.3gpp2.sms" : { "source" : "iana"}, "application/vnd.3gpp2.tcap" : { "source" : "iana", "extensions" : ["tcap"]}, "application/vnd.3lightssoftware.imagescal" : { "source" : "iana"}, "application/vnd.3m.post-it-notes" : { "source" : "iana", "extensions" : ["pwn"]}, "application/vnd.accpac.simply.aso" : { "source" : "iana", "extensions" : ["aso"]}, "application/vnd.accpac.simply.imp" : { "source" : "iana", "extensions" : ["imp"]}, "application/vnd.acucobol" : { "source" : "iana", "extensions" : ["acu"]}, "application/vnd.acucorp" : { "source" : "iana", "extensions" : ["atc","acutc"]}, "application/vnd.adobe.air-application-installer-package+zip" : { "source" : "apache", "compressible" : false, "extensions" : ["air"]}, "application/vnd.adobe.flash.movie" : { "source" : "iana"}, "application/vnd.adobe.formscentral.fcdt" : { "source" : "iana", "extensions" : ["fcdt"]}, "application/vnd.adobe.fxp" : { "source" : "iana", "extensions" : ["fxp","fxpl"]}, "application/vnd.adobe.partial-upload" : { "source" : "iana"}, "application/vnd.adobe.xdp+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdp"]}, "application/vnd.adobe.xfdf" : { "source" : "iana", "extensions" : ["xfdf"]}, "application/vnd.aether.imp" : { "source" : "iana"}, "application/vnd.afpc.afplinedata" : { "source" : "iana"}, "application/vnd.afpc.modca" : { "source" : "iana"}, "application/vnd.ah-barcode" : { "source" : "iana"}, "application/vnd.ahead.space" : { "source" : "iana", "extensions" : ["ahead"]}, "application/vnd.airzip.filesecure.azf" : { "source" : "iana", "extensions" : ["azf"]}, "application/vnd.airzip.filesecure.azs" : { "source" : "iana", "extensions" : ["azs"]}, "application/vnd.amadeus+json" : { "source" : "iana", "compressible" : true}, "application/vnd.amazon.ebook" : { "source" : "apache", "extensions" : ["azw"]}, "application/vnd.amazon.mobi8-ebook" : { "source" : "iana"}, "application/vnd.americandynamics.acc" : { "source" : "iana", "extensions" : ["acc"]}, "application/vnd.amiga.ami" : { "source" : "iana", "extensions" : ["ami"]}, "application/vnd.amundsen.maze+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.android.package-archive" : { "source" : "apache", "compressible" : false, "extensions" : ["apk"]}, "application/vnd.anki" : { "source" : "iana"}, "application/vnd.anser-web-certificate-issue-initiation" : { "source" : "iana", "extensions" : ["cii"]}, "application/vnd.anser-web-funds-transfer-initiation" : { "source" : "apache", "extensions" : ["fti"]}, "application/vnd.antix.game-component" : { "source" : "iana", "extensions" : ["atx"]}, "application/vnd.apache.thrift.binary" : { "source" : "iana"}, "application/vnd.apache.thrift.compact" : { "source" : "iana"}, "application/vnd.apache.thrift.json" : { "source" : "iana"}, "application/vnd.api+json" : { "source" : "iana", "compressible" : true}, "application/vnd.apothekende.reservation+json" : { "source" : "iana", "compressible" : true}, "application/vnd.apple.installer+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mpkg"]}, "application/vnd.apple.keynote" : { "source" : "iana", "extensions" : ["keynote"]}, "application/vnd.apple.mpegurl" : { "source" : "iana", "extensions" : ["m3u8"]}, "application/vnd.apple.numbers" : { "source" : "iana", "extensions" : ["numbers"]}, "application/vnd.apple.pages" : { "source" : "iana", "extensions" : ["pages"]}, "application/vnd.apple.pkpass" : { "compressible" : false, "extensions" : ["pkpass"]}, "application/vnd.arastra.swi" : { "source" : "iana"}, "application/vnd.aristanetworks.swi" : { "source" : "iana", "extensions" : ["swi"]}, "application/vnd.artisan+json" : { "source" : "iana", "compressible" : true}, "application/vnd.artsquare" : { "source" : "iana"}, "application/vnd.astraea-software.iota" : { "source" : "iana", "extensions" : ["iota"]}, "application/vnd.audiograph" : { "source" : "iana", "extensions" : ["aep"]}, "application/vnd.autopackage" : { "source" : "iana"}, "application/vnd.avalon+json" : { "source" : "iana", "compressible" : true}, "application/vnd.avistar+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.balsamiq.bmml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.balsamiq.bmpr" : { "source" : "iana"}, "application/vnd.banana-accounting" : { "source" : "iana"}, "application/vnd.bbf.usp.msg" : { "source" : "iana"}, "application/vnd.bbf.usp.msg+json" : { "source" : "iana", "compressible" : true}, "application/vnd.bekitzur-stech+json" : { "source" : "iana", "compressible" : true}, "application/vnd.bint.med-content" : { "source" : "iana"}, "application/vnd.biopax.rdf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.blink-idb-value-wrapper" : { "source" : "iana"}, "application/vnd.blueice.multipass" : { "source" : "iana", "extensions" : ["mpm"]}, "application/vnd.bluetooth.ep.oob" : { "source" : "iana"}, "application/vnd.bluetooth.le.oob" : { "source" : "iana"}, "application/vnd.bmi" : { "source" : "iana", "extensions" : ["bmi"]}, "application/vnd.businessobjects" : { "source" : "iana", "extensions" : ["rep"]}, "application/vnd.byu.uapi+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cab-jscript" : { "source" : "iana"}, "application/vnd.canon-cpdl" : { "source" : "iana"}, "application/vnd.canon-lips" : { "source" : "iana"}, "application/vnd.capasystems-pg+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cendio.thinlinc.clientconf" : { "source" : "iana"}, "application/vnd.century-systems.tcp_stream" : { "source" : "iana"}, "application/vnd.chemdraw+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["cdxml"]}, "application/vnd.chess-pgn" : { "source" : "iana"}, "application/vnd.chipnuts.karaoke-mmd" : { "source" : "iana", "extensions" : ["mmd"]}, "application/vnd.cinderella" : { "source" : "iana", "extensions" : ["cdy"]}, "application/vnd.cirpack.isdn-ext" : { "source" : "iana"}, "application/vnd.citationstyles.style+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["csl"]}, "application/vnd.claymore" : { "source" : "iana", "extensions" : ["cla"]}, "application/vnd.cloanto.rp9" : { "source" : "iana", "extensions" : ["rp9"]}, "application/vnd.clonk.c4group" : { "source" : "iana", "extensions" : ["c4g","c4d","c4f","c4p","c4u"]}, "application/vnd.cluetrust.cartomobile-config" : { "source" : "iana", "extensions" : ["c11amc"]}, "application/vnd.cluetrust.cartomobile-config-pkg" : { "source" : "iana", "extensions" : ["c11amz"]}, "application/vnd.coffeescript" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.document" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.document-template" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.presentation" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.presentation-template" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.spreadsheet" : { "source" : "iana"}, "application/vnd.collabio.xodocuments.spreadsheet-template" : { "source" : "iana"}, "application/vnd.collection+json" : { "source" : "iana", "compressible" : true}, "application/vnd.collection.doc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.collection.next+json" : { "source" : "iana", "compressible" : true}, "application/vnd.comicbook+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.comicbook-rar" : { "source" : "iana"}, "application/vnd.commerce-battelle" : { "source" : "iana"}, "application/vnd.commonspace" : { "source" : "iana", "extensions" : ["csp"]}, "application/vnd.contact.cmsg" : { "source" : "iana", "extensions" : ["cdbcmsg"]}, "application/vnd.coreos.ignition+json" : { "source" : "iana", "compressible" : true}, "application/vnd.cosmocaller" : { "source" : "iana", "extensions" : ["cmc"]}, "application/vnd.crick.clicker" : { "source" : "iana", "extensions" : ["clkx"]}, "application/vnd.crick.clicker.keyboard" : { "source" : "iana", "extensions" : ["clkk"]}, "application/vnd.crick.clicker.palette" : { "source" : "iana", "extensions" : ["clkp"]}, "application/vnd.crick.clicker.template" : { "source" : "iana", "extensions" : ["clkt"]}, "application/vnd.crick.clicker.wordbank" : { "source" : "iana", "extensions" : ["clkw"]}, "application/vnd.criticaltools.wbs+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wbs"]}, "application/vnd.ctc-posml" : { "source" : "iana", "extensions" : ["pml"]}, "application/vnd.ctct.ws+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.cups-pdf" : { "source" : "iana"}, "application/vnd.cups-postscript" : { "source" : "iana"}, "application/vnd.cups-ppd" : { "source" : "iana", "extensions" : ["ppd"]}, "application/vnd.cups-raster" : { "source" : "iana"}, "application/vnd.cups-raw" : { "source" : "iana"}, "application/vnd.curl" : { "source" : "iana"}, "application/vnd.curl.car" : { "source" : "apache", "extensions" : ["car"]}, "application/vnd.curl.pcurl" : { "source" : "apache", "extensions" : ["pcurl"]}, "application/vnd.cyan.dean.root+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.cybank" : { "source" : "iana"}, "application/vnd.d2l.coursepackage1p0+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.dart" : { "source" : "iana", "compressible" : true, "extensions" : ["dart"]}, "application/vnd.data-vision.rdz" : { "source" : "iana", "extensions" : ["rdz"]}, "application/vnd.datapackage+json" : { "source" : "iana", "compressible" : true}, "application/vnd.dataresource+json" : { "source" : "iana", "compressible" : true}, "application/vnd.debian.binary-package" : { "source" : "iana"}, "application/vnd.dece.data" : { "source" : "iana", "extensions" : ["uvf","uvvf","uvd","uvvd"]}, "application/vnd.dece.ttml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["uvt","uvvt"]}, "application/vnd.dece.unspecified" : { "source" : "iana", "extensions" : ["uvx","uvvx"]}, "application/vnd.dece.zip" : { "source" : "iana", "extensions" : ["uvz","uvvz"]}, "application/vnd.denovo.fcselayout-link" : { "source" : "iana", "extensions" : ["fe_launch"]}, "application/vnd.desmume.movie" : { "source" : "iana"}, "application/vnd.dir-bi.plate-dl-nosuffix" : { "source" : "iana"}, "application/vnd.dm.delegation+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dna" : { "source" : "iana", "extensions" : ["dna"]}, "application/vnd.document+json" : { "source" : "iana", "compressible" : true}, "application/vnd.dolby.mlp" : { "source" : "apache", "extensions" : ["mlp"]}, "application/vnd.dolby.mobile.1" : { "source" : "iana"}, "application/vnd.dolby.mobile.2" : { "source" : "iana"}, "application/vnd.doremir.scorecloud-binary-document" : { "source" : "iana"}, "application/vnd.dpgraph" : { "source" : "iana", "extensions" : ["dpg"]}, "application/vnd.dreamfactory" : { "source" : "iana", "extensions" : ["dfac"]}, "application/vnd.drive+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ds-keypoint" : { "source" : "apache", "extensions" : ["kpxx"]}, "application/vnd.dtg.local" : { "source" : "iana"}, "application/vnd.dtg.local.flash" : { "source" : "iana"}, "application/vnd.dtg.local.html" : { "source" : "iana"}, "application/vnd.dvb.ait" : { "source" : "iana", "extensions" : ["ait"]}, "application/vnd.dvb.dvbj" : { "source" : "iana"}, "application/vnd.dvb.esgcontainer" : { "source" : "iana"}, "application/vnd.dvb.ipdcdftnotifaccess" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgaccess" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgaccess2" : { "source" : "iana"}, "application/vnd.dvb.ipdcesgpdd" : { "source" : "iana"}, "application/vnd.dvb.ipdcroaming" : { "source" : "iana"}, "application/vnd.dvb.iptv.alfec-base" : { "source" : "iana"}, "application/vnd.dvb.iptv.alfec-enhancement" : { "source" : "iana"}, "application/vnd.dvb.notif-aggregate-root+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-container+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-generic+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-msglist+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-registration-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-ia-registration-response+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.notif-init+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.dvb.pfr" : { "source" : "iana"}, "application/vnd.dvb.service" : { "source" : "iana", "extensions" : ["svc"]}, "application/vnd.dxr" : { "source" : "iana"}, "application/vnd.dynageo" : { "source" : "iana", "extensions" : ["geo"]}, "application/vnd.dzr" : { "source" : "iana"}, "application/vnd.easykaraoke.cdgdownload" : { "source" : "iana"}, "application/vnd.ecdis-update" : { "source" : "iana"}, "application/vnd.ecip.rlp" : { "source" : "iana"}, "application/vnd.ecowin.chart" : { "source" : "iana", "extensions" : ["mag"]}, "application/vnd.ecowin.filerequest" : { "source" : "iana"}, "application/vnd.ecowin.fileupdate" : { "source" : "iana"}, "application/vnd.ecowin.series" : { "source" : "iana"}, "application/vnd.ecowin.seriesrequest" : { "source" : "iana"}, "application/vnd.ecowin.seriesupdate" : { "source" : "iana"}, "application/vnd.efi.img" : { "source" : "iana"}, "application/vnd.efi.iso" : { "source" : "iana"}, "application/vnd.emclient.accessrequest+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.enliven" : { "source" : "iana", "extensions" : ["nml"]}, "application/vnd.enphase.envoy" : { "source" : "iana"}, "application/vnd.eprints.data+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.epson.esf" : { "source" : "iana", "extensions" : ["esf"]}, "application/vnd.epson.msf" : { "source" : "iana", "extensions" : ["msf"]}, "application/vnd.epson.quickanime" : { "source" : "iana", "extensions" : ["qam"]}, "application/vnd.epson.salt" : { "source" : "iana", "extensions" : ["slt"]}, "application/vnd.epson.ssf" : { "source" : "iana", "extensions" : ["ssf"]}, "application/vnd.ericsson.quickcall" : { "source" : "iana"}, "application/vnd.espass-espass+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.eszigno3+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["es3","et3"]}, "application/vnd.etsi.aoc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.asic-e+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.etsi.asic-s+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.etsi.cug+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvcommand+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvdiscovery+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-bc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-cod+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsad-npvr+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvservice+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvsync+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.iptvueprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.mcid+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.mheg5" : { "source" : "iana"}, "application/vnd.etsi.overload-control-policy-dataset+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.pstn+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.sci+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.simservs+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.timestamp-token" : { "source" : "iana"}, "application/vnd.etsi.tsl+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.etsi.tsl.der" : { "source" : "iana"}, "application/vnd.eudora.data" : { "source" : "iana"}, "application/vnd.evolv.ecig.profile" : { "source" : "iana"}, "application/vnd.evolv.ecig.settings" : { "source" : "iana"}, "application/vnd.evolv.ecig.theme" : { "source" : "iana"}, "application/vnd.exstream-empower+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.exstream-package" : { "source" : "iana"}, "application/vnd.ezpix-album" : { "source" : "iana", "extensions" : ["ez2"]}, "application/vnd.ezpix-package" : { "source" : "iana", "extensions" : ["ez3"]}, "application/vnd.f-secure.mobile" : { "source" : "iana"}, "application/vnd.fastcopy-disk-image" : { "source" : "iana"}, "application/vnd.fdf" : { "source" : "iana", "extensions" : ["fdf"]}, "application/vnd.fdsn.mseed" : { "source" : "iana", "extensions" : ["mseed"]}, "application/vnd.fdsn.seed" : { "source" : "iana", "extensions" : ["seed","dataless"]}, "application/vnd.ffsns" : { "source" : "iana"}, "application/vnd.filmit.zfc" : { "source" : "iana"}, "application/vnd.fints" : { "source" : "iana"}, "application/vnd.firemonkeys.cloudcell" : { "source" : "iana"}, "application/vnd.flographit" : { "source" : "iana", "extensions" : ["gph"]}, "application/vnd.fluxtime.clip" : { "source" : "iana", "extensions" : ["ftc"]}, "application/vnd.font-fontforge-sfd" : { "source" : "iana"}, "application/vnd.framemaker" : { "source" : "iana", "extensions" : ["fm","frame","maker","book"]}, "application/vnd.frogans.fnc" : { "source" : "iana", "extensions" : ["fnc"]}, "application/vnd.frogans.ltf" : { "source" : "iana", "extensions" : ["ltf"]}, "application/vnd.fsc.weblaunch" : { "source" : "iana", "extensions" : ["fsc"]}, "application/vnd.fujitsu.oasys" : { "source" : "iana", "extensions" : ["oas"]}, "application/vnd.fujitsu.oasys2" : { "source" : "iana", "extensions" : ["oa2"]}, "application/vnd.fujitsu.oasys3" : { "source" : "iana", "extensions" : ["oa3"]}, "application/vnd.fujitsu.oasysgp" : { "source" : "iana", "extensions" : ["fg5"]}, "application/vnd.fujitsu.oasysprs" : { "source" : "iana", "extensions" : ["bh2"]}, "application/vnd.fujixerox.art-ex" : { "source" : "iana"}, "application/vnd.fujixerox.art4" : { "source" : "iana"}, "application/vnd.fujixerox.ddd" : { "source" : "iana", "extensions" : ["ddd"]}, "application/vnd.fujixerox.docuworks" : { "source" : "iana", "extensions" : ["xdw"]}, "application/vnd.fujixerox.docuworks.binder" : { "source" : "iana", "extensions" : ["xbd"]}, "application/vnd.fujixerox.docuworks.container" : { "source" : "iana"}, "application/vnd.fujixerox.hbpl" : { "source" : "iana"}, "application/vnd.fut-misnet" : { "source" : "iana"}, "application/vnd.futoin+cbor" : { "source" : "iana"}, "application/vnd.futoin+json" : { "source" : "iana", "compressible" : true}, "application/vnd.fuzzysheet" : { "source" : "iana", "extensions" : ["fzs"]}, "application/vnd.genomatix.tuxedo" : { "source" : "iana", "extensions" : ["txd"]}, "application/vnd.geo+json" : { "source" : "iana", "compressible" : true}, "application/vnd.geocube+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.geogebra.file" : { "source" : "iana", "extensions" : ["ggb"]}, "application/vnd.geogebra.tool" : { "source" : "iana", "extensions" : ["ggt"]}, "application/vnd.geometry-explorer" : { "source" : "iana", "extensions" : ["gex","gre"]}, "application/vnd.geonext" : { "source" : "iana", "extensions" : ["gxt"]}, "application/vnd.geoplan" : { "source" : "iana", "extensions" : ["g2w"]}, "application/vnd.geospace" : { "source" : "iana", "extensions" : ["g3w"]}, "application/vnd.gerber" : { "source" : "iana"}, "application/vnd.globalplatform.card-content-mgt" : { "source" : "iana"}, "application/vnd.globalplatform.card-content-mgt-response" : { "source" : "iana"}, "application/vnd.gmx" : { "source" : "iana", "extensions" : ["gmx"]}, "application/vnd.google-apps.document" : { "compressible" : false, "extensions" : ["gdoc"]}, "application/vnd.google-apps.presentation" : { "compressible" : false, "extensions" : ["gslides"]}, "application/vnd.google-apps.spreadsheet" : { "compressible" : false, "extensions" : ["gsheet"]}, "application/vnd.google-earth.kml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["kml"]}, "application/vnd.google-earth.kmz" : { "source" : "iana", "compressible" : false, "extensions" : ["kmz"]}, "application/vnd.gov.sk.e-form+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.gov.sk.e-form+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.gov.sk.xmldatacontainer+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.grafeq" : { "source" : "iana", "extensions" : ["gqf","gqs"]}, "application/vnd.gridmp" : { "source" : "iana"}, "application/vnd.groove-account" : { "source" : "iana", "extensions" : ["gac"]}, "application/vnd.groove-help" : { "source" : "iana", "extensions" : ["ghf"]}, "application/vnd.groove-identity-message" : { "source" : "iana", "extensions" : ["gim"]}, "application/vnd.groove-injector" : { "source" : "iana", "extensions" : ["grv"]}, "application/vnd.groove-tool-message" : { "source" : "iana", "extensions" : ["gtm"]}, "application/vnd.groove-tool-template" : { "source" : "iana", "extensions" : ["tpl"]}, "application/vnd.groove-vcard" : { "source" : "iana", "extensions" : ["vcg"]}, "application/vnd.hal+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hal+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["hal"]}, "application/vnd.handheld-entertainment+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["zmm"]}, "application/vnd.hbci" : { "source" : "iana", "extensions" : ["hbci"]}, "application/vnd.hc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hcl-bireports" : { "source" : "iana"}, "application/vnd.hdt" : { "source" : "iana"}, "application/vnd.heroku+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hhe.lesson-player" : { "source" : "iana", "extensions" : ["les"]}, "application/vnd.hp-hpgl" : { "source" : "iana", "extensions" : ["hpgl"]}, "application/vnd.hp-hpid" : { "source" : "iana", "extensions" : ["hpid"]}, "application/vnd.hp-hps" : { "source" : "iana", "extensions" : ["hps"]}, "application/vnd.hp-jlyt" : { "source" : "iana", "extensions" : ["jlt"]}, "application/vnd.hp-pcl" : { "source" : "iana", "extensions" : ["pcl"]}, "application/vnd.hp-pclxl" : { "source" : "iana", "extensions" : ["pclxl"]}, "application/vnd.httphone" : { "source" : "iana"}, "application/vnd.hydrostatix.sof-data" : { "source" : "iana", "extensions" : ["sfd-hdstx"]}, "application/vnd.hyper+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hyper-item+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hyperdrive+json" : { "source" : "iana", "compressible" : true}, "application/vnd.hzn-3d-crossword" : { "source" : "iana"}, "application/vnd.ibm.afplinedata" : { "source" : "iana"}, "application/vnd.ibm.electronic-media" : { "source" : "iana"}, "application/vnd.ibm.minipay" : { "source" : "iana", "extensions" : ["mpy"]}, "application/vnd.ibm.modcap" : { "source" : "iana", "extensions" : ["afp","listafp","list3820"]}, "application/vnd.ibm.rights-management" : { "source" : "iana", "extensions" : ["irm"]}, "application/vnd.ibm.secure-container" : { "source" : "iana", "extensions" : ["sc"]}, "application/vnd.iccprofile" : { "source" : "iana", "extensions" : ["icc","icm"]}, "application/vnd.ieee.1905" : { "source" : "iana"}, "application/vnd.igloader" : { "source" : "iana", "extensions" : ["igl"]}, "application/vnd.imagemeter.folder+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.imagemeter.image+zip" : { "source" : "iana", "compressible" : false}, "application/vnd.immervision-ivp" : { "source" : "iana", "extensions" : ["ivp"]}, "application/vnd.immervision-ivu" : { "source" : "iana", "extensions" : ["ivu"]}, "application/vnd.ims.imsccv1p1" : { "source" : "iana"}, "application/vnd.ims.imsccv1p2" : { "source" : "iana"}, "application/vnd.ims.imsccv1p3" : { "source" : "iana"}, "application/vnd.ims.lis.v2.result+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolconsumerprofile+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolproxy+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolproxy.id+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolsettings+json" : { "source" : "iana", "compressible" : true}, "application/vnd.ims.lti.v2.toolsettings.simple+json" : { "source" : "iana", "compressible" : true}, "application/vnd.informedcontrol.rms+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.informix-visionary" : { "source" : "iana"}, "application/vnd.infotech.project" : { "source" : "iana"}, "application/vnd.infotech.project+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.innopath.wamp.notification" : { "source" : "iana"}, "application/vnd.insors.igm" : { "source" : "iana", "extensions" : ["igm"]}, "application/vnd.intercon.formnet" : { "source" : "iana", "extensions" : ["xpw","xpx"]}, "application/vnd.intergeo" : { "source" : "iana", "extensions" : ["i2g"]}, "application/vnd.intertrust.digibox" : { "source" : "iana"}, "application/vnd.intertrust.nncp" : { "source" : "iana"}, "application/vnd.intu.qbo" : { "source" : "iana", "extensions" : ["qbo"]}, "application/vnd.intu.qfx" : { "source" : "iana", "extensions" : ["qfx"]}, "application/vnd.iptc.g2.catalogitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.conceptitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.knowledgeitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.newsitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.newsmessage+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.packageitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.iptc.g2.planningitem+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ipunplugged.rcprofile" : { "source" : "iana", "extensions" : ["rcprofile"]}, "application/vnd.irepository.package+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["irp"]}, "application/vnd.is-xpr" : { "source" : "iana", "extensions" : ["xpr"]}, "application/vnd.isac.fcs" : { "source" : "iana", "extensions" : ["fcs"]}, "application/vnd.jam" : { "source" : "iana", "extensions" : ["jam"]}, "application/vnd.japannet-directory-service" : { "source" : "iana"}, "application/vnd.japannet-jpnstore-wakeup" : { "source" : "iana"}, "application/vnd.japannet-payment-wakeup" : { "source" : "iana"}, "application/vnd.japannet-registration" : { "source" : "iana"}, "application/vnd.japannet-registration-wakeup" : { "source" : "iana"}, "application/vnd.japannet-setstore-wakeup" : { "source" : "iana"}, "application/vnd.japannet-verification" : { "source" : "iana"}, "application/vnd.japannet-verification-wakeup" : { "source" : "iana"}, "application/vnd.jcp.javame.midlet-rms" : { "source" : "iana", "extensions" : ["rms"]}, "application/vnd.jisp" : { "source" : "iana", "extensions" : ["jisp"]}, "application/vnd.joost.joda-archive" : { "source" : "iana", "extensions" : ["joda"]}, "application/vnd.jsk.isdn-ngn" : { "source" : "iana"}, "application/vnd.kahootz" : { "source" : "iana", "extensions" : ["ktz","ktr"]}, "application/vnd.kde.karbon" : { "source" : "iana", "extensions" : ["karbon"]}, "application/vnd.kde.kchart" : { "source" : "iana", "extensions" : ["chrt"]}, "application/vnd.kde.kformula" : { "source" : "iana", "extensions" : ["kfo"]}, "application/vnd.kde.kivio" : { "source" : "iana", "extensions" : ["flw"]}, "application/vnd.kde.kontour" : { "source" : "iana", "extensions" : ["kon"]}, "application/vnd.kde.kpresenter" : { "source" : "iana", "extensions" : ["kpr","kpt"]}, "application/vnd.kde.kspread" : { "source" : "iana", "extensions" : ["ksp"]}, "application/vnd.kde.kword" : { "source" : "iana", "extensions" : ["kwd","kwt"]}, "application/vnd.kenameaapp" : { "source" : "iana", "extensions" : ["htke"]}, "application/vnd.kidspiration" : { "source" : "iana", "extensions" : ["kia"]}, "application/vnd.kinar" : { "source" : "iana", "extensions" : ["kne","knp"]}, "application/vnd.koan" : { "source" : "iana", "extensions" : ["skp","skd","skt","skm"]}, "application/vnd.kodak-descriptor" : { "source" : "iana", "extensions" : ["sse"]}, "application/vnd.las.las+json" : { "source" : "iana", "compressible" : true}, "application/vnd.las.las+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lasxml"]}, "application/vnd.leap+json" : { "source" : "iana", "compressible" : true}, "application/vnd.liberty-request+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.llamagraphics.life-balance.desktop" : { "source" : "iana", "extensions" : ["lbd"]}, "application/vnd.llamagraphics.life-balance.exchange+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["lbe"]}, "application/vnd.lotus-1-2-3" : { "source" : "iana", "extensions" : ["123"]}, "application/vnd.lotus-approach" : { "source" : "iana", "extensions" : ["apr"]}, "application/vnd.lotus-freelance" : { "source" : "iana", "extensions" : ["pre"]}, "application/vnd.lotus-notes" : { "source" : "iana", "extensions" : ["nsf"]}, "application/vnd.lotus-organizer" : { "source" : "iana", "extensions" : ["org"]}, "application/vnd.lotus-screencam" : { "source" : "iana", "extensions" : ["scm"]}, "application/vnd.lotus-wordpro" : { "source" : "iana", "extensions" : ["lwp"]}, "application/vnd.macports.portpkg" : { "source" : "iana", "extensions" : ["portpkg"]}, "application/vnd.mapbox-vector-tile" : { "source" : "iana"}, "application/vnd.marlin.drm.actiontoken+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.conftoken+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.license+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.marlin.drm.mdcf" : { "source" : "iana"}, "application/vnd.mason+json" : { "source" : "iana", "compressible" : true}, "application/vnd.maxmind.maxmind-db" : { "source" : "iana"}, "application/vnd.mcd" : { "source" : "iana", "extensions" : ["mcd"]}, "application/vnd.medcalcdata" : { "source" : "iana", "extensions" : ["mc1"]}, "application/vnd.mediastation.cdkey" : { "source" : "iana", "extensions" : ["cdkey"]}, "application/vnd.meridian-slingshot" : { "source" : "iana"}, "application/vnd.mfer" : { "source" : "iana", "extensions" : ["mwf"]}, "application/vnd.mfmp" : { "source" : "iana", "extensions" : ["mfm"]}, "application/vnd.micro+json" : { "source" : "iana", "compressible" : true}, "application/vnd.micrografx.flo" : { "source" : "iana", "extensions" : ["flo"]}, "application/vnd.micrografx.igx" : { "source" : "iana", "extensions" : ["igx"]}, "application/vnd.microsoft.portable-executable" : { "source" : "iana"}, "application/vnd.microsoft.windows.thumbnail-cache" : { "source" : "iana"}, "application/vnd.miele+json" : { "source" : "iana", "compressible" : true}, "application/vnd.mif" : { "source" : "iana", "extensions" : ["mif"]}, "application/vnd.minisoft-hp3000-save" : { "source" : "iana"}, "application/vnd.mitsubishi.misty-guard.trustweb" : { "source" : "iana"}, "application/vnd.mobius.daf" : { "source" : "iana", "extensions" : ["daf"]}, "application/vnd.mobius.dis" : { "source" : "iana", "extensions" : ["dis"]}, "application/vnd.mobius.mbk" : { "source" : "iana", "extensions" : ["mbk"]}, "application/vnd.mobius.mqy" : { "source" : "iana", "extensions" : ["mqy"]}, "application/vnd.mobius.msl" : { "source" : "iana", "extensions" : ["msl"]}, "application/vnd.mobius.plc" : { "source" : "iana", "extensions" : ["plc"]}, "application/vnd.mobius.txf" : { "source" : "iana", "extensions" : ["txf"]}, "application/vnd.mophun.application" : { "source" : "iana", "extensions" : ["mpn"]}, "application/vnd.mophun.certificate" : { "source" : "iana", "extensions" : ["mpc"]}, "application/vnd.motorola.flexsuite" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.adsi" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.fis" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.gotap" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.kmr" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.ttc" : { "source" : "iana"}, "application/vnd.motorola.flexsuite.wem" : { "source" : "iana"}, "application/vnd.motorola.iprm" : { "source" : "iana"}, "application/vnd.mozilla.xul+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xul"]}, "application/vnd.ms-3mfdocument" : { "source" : "iana"}, "application/vnd.ms-artgalry" : { "source" : "iana", "extensions" : ["cil"]}, "application/vnd.ms-asf" : { "source" : "iana"}, "application/vnd.ms-cab-compressed" : { "source" : "iana", "extensions" : ["cab"]}, "application/vnd.ms-color.iccprofile" : { "source" : "apache"}, "application/vnd.ms-excel" : { "source" : "iana", "compressible" : false, "extensions" : ["xls","xlm","xla","xlc","xlt","xlw"]}, "application/vnd.ms-excel.addin.macroenabled.12" : { "source" : "iana", "extensions" : ["xlam"]}, "application/vnd.ms-excel.sheet.binary.macroenabled.12" : { "source" : "iana", "extensions" : ["xlsb"]}, "application/vnd.ms-excel.sheet.macroenabled.12" : { "source" : "iana", "extensions" : ["xlsm"]}, "application/vnd.ms-excel.template.macroenabled.12" : { "source" : "iana", "extensions" : ["xltm"]}, "application/vnd.ms-fontobject" : { "source" : "iana", "compressible" : true, "extensions" : ["eot"]}, "application/vnd.ms-htmlhelp" : { "source" : "iana", "extensions" : ["chm"]}, "application/vnd.ms-ims" : { "source" : "iana", "extensions" : ["ims"]}, "application/vnd.ms-lrm" : { "source" : "iana", "extensions" : ["lrm"]}, "application/vnd.ms-office.activex+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-officetheme" : { "source" : "iana", "extensions" : ["thmx"]}, "application/vnd.ms-opentype" : { "source" : "apache", "compressible" : true}, "application/vnd.ms-outlook" : { "compressible" : false, "extensions" : ["msg"]}, "application/vnd.ms-package.obfuscated-opentype" : { "source" : "apache"}, "application/vnd.ms-pki.seccat" : { "source" : "apache", "extensions" : ["cat"]}, "application/vnd.ms-pki.stl" : { "source" : "apache", "extensions" : ["stl"]}, "application/vnd.ms-playready.initiator+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-powerpoint" : { "source" : "iana", "compressible" : false, "extensions" : ["ppt","pps","pot"]}, "application/vnd.ms-powerpoint.addin.macroenabled.12" : { "source" : "iana", "extensions" : ["ppam"]}, "application/vnd.ms-powerpoint.presentation.macroenabled.12" : { "source" : "iana", "extensions" : ["pptm"]}, "application/vnd.ms-powerpoint.slide.macroenabled.12" : { "source" : "iana", "extensions" : ["sldm"]}, "application/vnd.ms-powerpoint.slideshow.macroenabled.12" : { "source" : "iana", "extensions" : ["ppsm"]}, "application/vnd.ms-powerpoint.template.macroenabled.12" : { "source" : "iana", "extensions" : ["potm"]}, "application/vnd.ms-printdevicecapabilities+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-printing.printticket+xml" : { "source" : "apache", "compressible" : true}, "application/vnd.ms-printschematicket+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.ms-project" : { "source" : "iana", "extensions" : ["mpp","mpt"]}, "application/vnd.ms-tnef" : { "source" : "iana"}, "application/vnd.ms-windows.devicepairing" : { "source" : "iana"}, "application/vnd.ms-windows.nwprinting.oob" : { "source" : "iana"}, "application/vnd.ms-windows.printerpairing" : { "source" : "iana"}, "application/vnd.ms-windows.wsd.oob" : { "source" : "iana"}, "application/vnd.ms-wmdrm.lic-chlg-req" : { "source" : "iana"}, "application/vnd.ms-wmdrm.lic-resp" : { "source" : "iana"}, "application/vnd.ms-wmdrm.meter-chlg-req" : { "source" : "iana"}, "application/vnd.ms-wmdrm.meter-resp" : { "source" : "iana"}, "application/vnd.ms-word.document.macroenabled.12" : { "source" : "iana", "extensions" : ["docm"]}, "application/vnd.ms-word.template.macroenabled.12" : { "source" : "iana", "extensions" : ["dotm"]}, "application/vnd.ms-works" : { "source" : "iana", "extensions" : ["wps","wks","wcm","wdb"]}, "application/vnd.ms-wpl" : { "source" : "iana", "extensions" : ["wpl"]}, "application/vnd.ms-xpsdocument" : { "source" : "iana", "compressible" : false, "extensions" : ["xps"]}, "application/vnd.msa-disk-image" : { "source" : "iana"}, "application/vnd.mseq" : { "source" : "iana", "extensions" : ["mseq"]}, "application/vnd.msign" : { "source" : "iana"}, "application/vnd.multiad.creator" : { "source" : "iana"}, "application/vnd.multiad.creator.cif" : { "source" : "iana"}, "application/vnd.music-niff" : { "source" : "iana"}, "application/vnd.musician" : { "source" : "iana", "extensions" : ["mus"]}, "application/vnd.muvee.style" : { "source" : "iana", "extensions" : ["msty"]}, "application/vnd.mynfc" : { "source" : "iana", "extensions" : ["taglet"]}, "application/vnd.ncd.control" : { "source" : "iana"}, "application/vnd.ncd.reference" : { "source" : "iana"}, "application/vnd.nearst.inv+json" : { "source" : "iana", "compressible" : true}, "application/vnd.nervana" : { "source" : "iana"}, "application/vnd.netfpx" : { "source" : "iana"}, "application/vnd.neurolanguage.nlu" : { "source" : "iana", "extensions" : ["nlu"]}, "application/vnd.nimn" : { "source" : "iana"}, "application/vnd.nintendo.nitro.rom" : { "source" : "iana"}, "application/vnd.nintendo.snes.rom" : { "source" : "iana"}, "application/vnd.nitf" : { "source" : "iana", "extensions" : ["ntf","nitf"]}, "application/vnd.noblenet-directory" : { "source" : "iana", "extensions" : ["nnd"]}, "application/vnd.noblenet-sealer" : { "source" : "iana", "extensions" : ["nns"]}, "application/vnd.noblenet-web" : { "source" : "iana", "extensions" : ["nnw"]}, "application/vnd.nokia.catalogs" : { "source" : "iana"}, "application/vnd.nokia.conml+wbxml" : { "source" : "iana"}, "application/vnd.nokia.conml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.iptv.config+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.isds-radio-presets" : { "source" : "iana"}, "application/vnd.nokia.landmark+wbxml" : { "source" : "iana"}, "application/vnd.nokia.landmark+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.landmarkcollection+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.n-gage.ac+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.n-gage.data" : { "source" : "iana", "extensions" : ["ngdat"]}, "application/vnd.nokia.n-gage.symbian.install" : { "source" : "iana", "extensions" : ["n-gage"]}, "application/vnd.nokia.ncd" : { "source" : "iana"}, "application/vnd.nokia.pcd+wbxml" : { "source" : "iana"}, "application/vnd.nokia.pcd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.nokia.radio-preset" : { "source" : "iana", "extensions" : ["rpst"]}, "application/vnd.nokia.radio-presets" : { "source" : "iana", "extensions" : ["rpss"]}, "application/vnd.novadigm.edm" : { "source" : "iana", "extensions" : ["edm"]}, "application/vnd.novadigm.edx" : { "source" : "iana", "extensions" : ["edx"]}, "application/vnd.novadigm.ext" : { "source" : "iana", "extensions" : ["ext"]}, "application/vnd.ntt-local.content-share" : { "source" : "iana"}, "application/vnd.ntt-local.file-transfer" : { "source" : "iana"}, "application/vnd.ntt-local.ogw_remote-access" : { "source" : "iana"}, "application/vnd.ntt-local.sip-ta_remote" : { "source" : "iana"}, "application/vnd.ntt-local.sip-ta_tcp_stream" : { "source" : "iana"}, "application/vnd.oasis.opendocument.chart" : { "source" : "iana", "extensions" : ["odc"]}, "application/vnd.oasis.opendocument.chart-template" : { "source" : "iana", "extensions" : ["otc"]}, "application/vnd.oasis.opendocument.database" : { "source" : "iana", "extensions" : ["odb"]}, "application/vnd.oasis.opendocument.formula" : { "source" : "iana", "extensions" : ["odf"]}, "application/vnd.oasis.opendocument.formula-template" : { "source" : "iana", "extensions" : ["odft"]}, "application/vnd.oasis.opendocument.graphics" : { "source" : "iana", "compressible" : false, "extensions" : ["odg"]}, "application/vnd.oasis.opendocument.graphics-template" : { "source" : "iana", "extensions" : ["otg"]}, "application/vnd.oasis.opendocument.image" : { "source" : "iana", "extensions" : ["odi"]}, "application/vnd.oasis.opendocument.image-template" : { "source" : "iana", "extensions" : ["oti"]}, "application/vnd.oasis.opendocument.presentation" : { "source" : "iana", "compressible" : false, "extensions" : ["odp"]}, "application/vnd.oasis.opendocument.presentation-template" : { "source" : "iana", "extensions" : ["otp"]}, "application/vnd.oasis.opendocument.spreadsheet" : { "source" : "iana", "compressible" : false, "extensions" : ["ods"]}, "application/vnd.oasis.opendocument.spreadsheet-template" : { "source" : "iana", "extensions" : ["ots"]}, "application/vnd.oasis.opendocument.text" : { "source" : "iana", "compressible" : false, "extensions" : ["odt"]}, "application/vnd.oasis.opendocument.text-master" : { "source" : "iana", "extensions" : ["odm"]}, "application/vnd.oasis.opendocument.text-template" : { "source" : "iana", "extensions" : ["ott"]}, "application/vnd.oasis.opendocument.text-web" : { "source" : "iana", "extensions" : ["oth"]}, "application/vnd.obn" : { "source" : "iana"}, "application/vnd.ocf+cbor" : { "source" : "iana"}, "application/vnd.oftn.l10n+json" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.contentaccessdownload+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.contentaccessstreaming+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.cspg-hexbinary" : { "source" : "iana"}, "application/vnd.oipf.dae.svg+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.dae.xhtml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.mippvcontrolmessage+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.pae.gem" : { "source" : "iana"}, "application/vnd.oipf.spdiscovery+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.spdlist+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.ueprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oipf.userprofile+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.olpc-sugar" : { "source" : "iana", "extensions" : ["xo"]}, "application/vnd.oma-scws-config" : { "source" : "iana"}, "application/vnd.oma-scws-http-request" : { "source" : "iana"}, "application/vnd.oma-scws-http-response" : { "source" : "iana"}, "application/vnd.oma.bcast.associated-procedure-parameter+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.drm-trigger+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.imd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.ltkm" : { "source" : "iana"}, "application/vnd.oma.bcast.notification+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.provisioningtrigger" : { "source" : "iana"}, "application/vnd.oma.bcast.sgboot" : { "source" : "iana"}, "application/vnd.oma.bcast.sgdd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.sgdu" : { "source" : "iana"}, "application/vnd.oma.bcast.simple-symbol-container" : { "source" : "iana"}, "application/vnd.oma.bcast.smartcard-trigger+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.sprov+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.bcast.stkm" : { "source" : "iana"}, "application/vnd.oma.cab-address-book+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-feature-handler+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-pcc+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-subs-invite+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.cab-user-prefs+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.dcd" : { "source" : "iana"}, "application/vnd.oma.dcdc" : { "source" : "iana"}, "application/vnd.oma.dd2+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["dd2"]}, "application/vnd.oma.drm.risd+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.group-usage-list+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.lwm2m+json" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.lwm2m+tlv" : { "source" : "iana"}, "application/vnd.oma.pal+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.detailed-progress-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.final-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.groups+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.invocation-descriptor+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.poc.optimized-progress-report+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.push" : { "source" : "iana"}, "application/vnd.oma.scidm.messages+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oma.xcap-directory+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-email+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-file+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omads-folder+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.omaloc-supl-init" : { "source" : "iana"}, "application/vnd.onepager" : { "source" : "iana"}, "application/vnd.onepagertamp" : { "source" : "iana"}, "application/vnd.onepagertamx" : { "source" : "iana"}, "application/vnd.onepagertat" : { "source" : "iana"}, "application/vnd.onepagertatp" : { "source" : "iana"}, "application/vnd.onepagertatx" : { "source" : "iana"}, "application/vnd.openblox.game+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openblox.game-binary" : { "source" : "iana"}, "application/vnd.openeye.oeb" : { "source" : "iana"}, "application/vnd.openofficeorg.extension" : { "source" : "apache", "extensions" : ["oxt"]}, "application/vnd.openstreetmap.data+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.custom-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.customxmlproperties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawing+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.chart+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.extended-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.presentation" : { "source" : "iana", "compressible" : false, "extensions" : ["pptx"]}, "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slide" : { "source" : "iana", "extensions" : ["sldx"]}, "application/vnd.openxmlformats-officedocument.presentationml.slide+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slideshow" : { "source" : "iana", "extensions" : ["ppsx"]}, "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.tags+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.template" : { "source" : "iana", "extensions" : ["potx"]}, "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" : { "source" : "iana", "compressible" : false, "extensions" : ["xlsx"]}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.template" : { "source" : "iana", "extensions" : ["xltx"]}, "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.theme+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.themeoverride+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.vmldrawing" : { "source" : "iana"}, "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document" : { "source" : "iana", "compressible" : false, "extensions" : ["docx"]}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.template" : { "source" : "iana", "extensions" : ["dotx"]}, "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.core-properties+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.openxmlformats-package.relationships+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oracle.resource+json" : { "source" : "iana", "compressible" : true}, "application/vnd.orange.indata" : { "source" : "iana"}, "application/vnd.osa.netdeploy" : { "source" : "iana"}, "application/vnd.osgeo.mapguide.package" : { "source" : "iana", "extensions" : ["mgp"]}, "application/vnd.osgi.bundle" : { "source" : "iana"}, "application/vnd.osgi.dp" : { "source" : "iana", "extensions" : ["dp"]}, "application/vnd.osgi.subsystem" : { "source" : "iana", "extensions" : ["esa"]}, "application/vnd.otps.ct-kip+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.oxli.countgraph" : { "source" : "iana"}, "application/vnd.pagerduty+json" : { "source" : "iana", "compressible" : true}, "application/vnd.palm" : { "source" : "iana", "extensions" : ["pdb","pqa","oprc"]}, "application/vnd.panoply" : { "source" : "iana"}, "application/vnd.paos.xml" : { "source" : "iana"}, "application/vnd.patentdive" : { "source" : "iana"}, "application/vnd.patientecommsdoc" : { "source" : "iana"}, "application/vnd.pawaafile" : { "source" : "iana", "extensions" : ["paw"]}, "application/vnd.pcos" : { "source" : "iana"}, "application/vnd.pg.format" : { "source" : "iana", "extensions" : ["str"]}, "application/vnd.pg.osasli" : { "source" : "iana", "extensions" : ["ei6"]}, "application/vnd.piaccess.application-licence" : { "source" : "iana"}, "application/vnd.picsel" : { "source" : "iana", "extensions" : ["efif"]}, "application/vnd.pmi.widget" : { "source" : "iana", "extensions" : ["wg"]}, "application/vnd.poc.group-advertisement+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.pocketlearn" : { "source" : "iana", "extensions" : ["plf"]}, "application/vnd.powerbuilder6" : { "source" : "iana", "extensions" : ["pbd"]}, "application/vnd.powerbuilder6-s" : { "source" : "iana"}, "application/vnd.powerbuilder7" : { "source" : "iana"}, "application/vnd.powerbuilder7-s" : { "source" : "iana"}, "application/vnd.powerbuilder75" : { "source" : "iana"}, "application/vnd.powerbuilder75-s" : { "source" : "iana"}, "application/vnd.preminet" : { "source" : "iana"}, "application/vnd.previewsystems.box" : { "source" : "iana", "extensions" : ["box"]}, "application/vnd.proteus.magazine" : { "source" : "iana", "extensions" : ["mgz"]}, "application/vnd.psfs" : { "source" : "iana"}, "application/vnd.publishare-delta-tree" : { "source" : "iana", "extensions" : ["qps"]}, "application/vnd.pvi.ptid1" : { "source" : "iana", "extensions" : ["ptid"]}, "application/vnd.pwg-multiplexed" : { "source" : "iana"}, "application/vnd.pwg-xhtml-print+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.qualcomm.brew-app-res" : { "source" : "iana"}, "application/vnd.quarantainenet" : { "source" : "iana"}, "application/vnd.quark.quarkxpress" : { "source" : "iana", "extensions" : ["qxd","qxt","qwd","qwt","qxl","qxb"]}, "application/vnd.quobject-quoxdocument" : { "source" : "iana"}, "application/vnd.radisys.moml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-conf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-conn+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-dialog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-audit-stream+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-conf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-base+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-fax-detect+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-fax-sendrecv+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-group+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-speech+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.radisys.msml-dialog-transform+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.rainstor.data" : { "source" : "iana"}, "application/vnd.rapid" : { "source" : "iana"}, "application/vnd.rar" : { "source" : "iana"}, "application/vnd.realvnc.bed" : { "source" : "iana", "extensions" : ["bed"]}, "application/vnd.recordare.musicxml" : { "source" : "iana", "extensions" : ["mxl"]}, "application/vnd.recordare.musicxml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["musicxml"]}, "application/vnd.renlearn.rlprint" : { "source" : "iana"}, "application/vnd.restful+json" : { "source" : "iana", "compressible" : true}, "application/vnd.rig.cryptonote" : { "source" : "iana", "extensions" : ["cryptonote"]}, "application/vnd.rim.cod" : { "source" : "apache", "extensions" : ["cod"]}, "application/vnd.rn-realmedia" : { "source" : "apache", "extensions" : ["rm"]}, "application/vnd.rn-realmedia-vbr" : { "source" : "apache", "extensions" : ["rmvb"]}, "application/vnd.route66.link66+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["link66"]}, "application/vnd.rs-274x" : { "source" : "iana"}, "application/vnd.ruckus.download" : { "source" : "iana"}, "application/vnd.s3sms" : { "source" : "iana"}, "application/vnd.sailingtracker.track" : { "source" : "iana", "extensions" : ["st"]}, "application/vnd.sbm.cid" : { "source" : "iana"}, "application/vnd.sbm.mid2" : { "source" : "iana"}, "application/vnd.scribus" : { "source" : "iana"}, "application/vnd.sealed.3df" : { "source" : "iana"}, "application/vnd.sealed.csf" : { "source" : "iana"}, "application/vnd.sealed.doc" : { "source" : "iana"}, "application/vnd.sealed.eml" : { "source" : "iana"}, "application/vnd.sealed.mht" : { "source" : "iana"}, "application/vnd.sealed.net" : { "source" : "iana"}, "application/vnd.sealed.ppt" : { "source" : "iana"}, "application/vnd.sealed.tiff" : { "source" : "iana"}, "application/vnd.sealed.xls" : { "source" : "iana"}, "application/vnd.sealedmedia.softseal.html" : { "source" : "iana"}, "application/vnd.sealedmedia.softseal.pdf" : { "source" : "iana"}, "application/vnd.seemail" : { "source" : "iana", "extensions" : ["see"]}, "application/vnd.sema" : { "source" : "iana", "extensions" : ["sema"]}, "application/vnd.semd" : { "source" : "iana", "extensions" : ["semd"]}, "application/vnd.semf" : { "source" : "iana", "extensions" : ["semf"]}, "application/vnd.shana.informed.formdata" : { "source" : "iana", "extensions" : ["ifm"]}, "application/vnd.shana.informed.formtemplate" : { "source" : "iana", "extensions" : ["itp"]}, "application/vnd.shana.informed.interchange" : { "source" : "iana", "extensions" : ["iif"]}, "application/vnd.shana.informed.package" : { "source" : "iana", "extensions" : ["ipk"]}, "application/vnd.shootproof+json" : { "source" : "iana", "compressible" : true}, "application/vnd.sigrok.session" : { "source" : "iana"}, "application/vnd.simtech-mindmapper" : { "source" : "iana", "extensions" : ["twd","twds"]}, "application/vnd.siren+json" : { "source" : "iana", "compressible" : true}, "application/vnd.smaf" : { "source" : "iana", "extensions" : ["mmf"]}, "application/vnd.smart.notebook" : { "source" : "iana"}, "application/vnd.smart.teacher" : { "source" : "iana", "extensions" : ["teacher"]}, "application/vnd.software602.filler.form+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.software602.filler.form-xml-zip" : { "source" : "iana"}, "application/vnd.solent.sdkm+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["sdkm","sdkd"]}, "application/vnd.spotfire.dxp" : { "source" : "iana", "extensions" : ["dxp"]}, "application/vnd.spotfire.sfs" : { "source" : "iana", "extensions" : ["sfs"]}, "application/vnd.sqlite3" : { "source" : "iana"}, "application/vnd.sss-cod" : { "source" : "iana"}, "application/vnd.sss-dtf" : { "source" : "iana"}, "application/vnd.sss-ntf" : { "source" : "iana"}, "application/vnd.stardivision.calc" : { "source" : "apache", "extensions" : ["sdc"]}, "application/vnd.stardivision.draw" : { "source" : "apache", "extensions" : ["sda"]}, "application/vnd.stardivision.impress" : { "source" : "apache", "extensions" : ["sdd"]}, "application/vnd.stardivision.math" : { "source" : "apache", "extensions" : ["smf"]}, "application/vnd.stardivision.writer" : { "source" : "apache", "extensions" : ["sdw","vor"]}, "application/vnd.stardivision.writer-global" : { "source" : "apache", "extensions" : ["sgl"]}, "application/vnd.stepmania.package" : { "source" : "iana", "extensions" : ["smzip"]}, "application/vnd.stepmania.stepchart" : { "source" : "iana", "extensions" : ["sm"]}, "application/vnd.street-stream" : { "source" : "iana"}, "application/vnd.sun.wadl+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wadl"]}, "application/vnd.sun.xml.calc" : { "source" : "apache", "extensions" : ["sxc"]}, "application/vnd.sun.xml.calc.template" : { "source" : "apache", "extensions" : ["stc"]}, "application/vnd.sun.xml.draw" : { "source" : "apache", "extensions" : ["sxd"]}, "application/vnd.sun.xml.draw.template" : { "source" : "apache", "extensions" : ["std"]}, "application/vnd.sun.xml.impress" : { "source" : "apache", "extensions" : ["sxi"]}, "application/vnd.sun.xml.impress.template" : { "source" : "apache", "extensions" : ["sti"]}, "application/vnd.sun.xml.math" : { "source" : "apache", "extensions" : ["sxm"]}, "application/vnd.sun.xml.writer" : { "source" : "apache", "extensions" : ["sxw"]}, "application/vnd.sun.xml.writer.global" : { "source" : "apache", "extensions" : ["sxg"]}, "application/vnd.sun.xml.writer.template" : { "source" : "apache", "extensions" : ["stw"]}, "application/vnd.sus-calendar" : { "source" : "iana", "extensions" : ["sus","susp"]}, "application/vnd.svd" : { "source" : "iana", "extensions" : ["svd"]}, "application/vnd.swiftview-ics" : { "source" : "iana"}, "application/vnd.symbian.install" : { "source" : "apache", "extensions" : ["sis","sisx"]}, "application/vnd.syncml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xsm"]}, "application/vnd.syncml.dm+wbxml" : { "source" : "iana", "extensions" : ["bdm"]}, "application/vnd.syncml.dm+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdm"]}, "application/vnd.syncml.dm.notification" : { "source" : "iana"}, "application/vnd.syncml.dmddf+wbxml" : { "source" : "iana"}, "application/vnd.syncml.dmddf+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.syncml.dmtnds+wbxml" : { "source" : "iana"}, "application/vnd.syncml.dmtnds+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.syncml.ds.notification" : { "source" : "iana"}, "application/vnd.tableschema+json" : { "source" : "iana", "compressible" : true}, "application/vnd.tao.intent-module-archive" : { "source" : "iana", "extensions" : ["tao"]}, "application/vnd.tcpdump.pcap" : { "source" : "iana", "extensions" : ["pcap","cap","dmp"]}, "application/vnd.think-cell.ppttc+json" : { "source" : "iana", "compressible" : true}, "application/vnd.tmd.mediaflex.api+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.tml" : { "source" : "iana"}, "application/vnd.tmobile-livetv" : { "source" : "iana", "extensions" : ["tmo"]}, "application/vnd.tri.onesource" : { "source" : "iana"}, "application/vnd.trid.tpt" : { "source" : "iana", "extensions" : ["tpt"]}, "application/vnd.triscape.mxs" : { "source" : "iana", "extensions" : ["mxs"]}, "application/vnd.trueapp" : { "source" : "iana", "extensions" : ["tra"]}, "application/vnd.truedoc" : { "source" : "iana"}, "application/vnd.ubisoft.webplayer" : { "source" : "iana"}, "application/vnd.ufdl" : { "source" : "iana", "extensions" : ["ufd","ufdl"]}, "application/vnd.uiq.theme" : { "source" : "iana", "extensions" : ["utz"]}, "application/vnd.umajin" : { "source" : "iana", "extensions" : ["umj"]}, "application/vnd.unity" : { "source" : "iana", "extensions" : ["unityweb"]}, "application/vnd.uoml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["uoml"]}, "application/vnd.uplanet.alert" : { "source" : "iana"}, "application/vnd.uplanet.alert-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.bearer-choice" : { "source" : "iana"}, "application/vnd.uplanet.bearer-choice-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.cacheop" : { "source" : "iana"}, "application/vnd.uplanet.cacheop-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.channel" : { "source" : "iana"}, "application/vnd.uplanet.channel-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.list" : { "source" : "iana"}, "application/vnd.uplanet.list-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.listcmd" : { "source" : "iana"}, "application/vnd.uplanet.listcmd-wbxml" : { "source" : "iana"}, "application/vnd.uplanet.signal" : { "source" : "iana"}, "application/vnd.uri-map" : { "source" : "iana"}, "application/vnd.valve.source.material" : { "source" : "iana"}, "application/vnd.vcx" : { "source" : "iana", "extensions" : ["vcx"]}, "application/vnd.vd-study" : { "source" : "iana"}, "application/vnd.vectorworks" : { "source" : "iana"}, "application/vnd.vel+json" : { "source" : "iana", "compressible" : true}, "application/vnd.verimatrix.vcas" : { "source" : "iana"}, "application/vnd.veryant.thin" : { "source" : "iana"}, "application/vnd.vidsoft.vidconference" : { "source" : "iana"}, "application/vnd.visio" : { "source" : "iana", "extensions" : ["vsd","vst","vss","vsw"]}, "application/vnd.visionary" : { "source" : "iana", "extensions" : ["vis"]}, "application/vnd.vividence.scriptfile" : { "source" : "iana"}, "application/vnd.vsf" : { "source" : "iana", "extensions" : ["vsf"]}, "application/vnd.wap.sic" : { "source" : "iana"}, "application/vnd.wap.slc" : { "source" : "iana"}, "application/vnd.wap.wbxml" : { "source" : "iana", "extensions" : ["wbxml"]}, "application/vnd.wap.wmlc" : { "source" : "iana", "extensions" : ["wmlc"]}, "application/vnd.wap.wmlscriptc" : { "source" : "iana", "extensions" : ["wmlsc"]}, "application/vnd.webturbo" : { "source" : "iana", "extensions" : ["wtb"]}, "application/vnd.wfa.p2p" : { "source" : "iana"}, "application/vnd.wfa.wsc" : { "source" : "iana"}, "application/vnd.windows.devicepairing" : { "source" : "iana"}, "application/vnd.wmc" : { "source" : "iana"}, "application/vnd.wmf.bootstrap" : { "source" : "iana"}, "application/vnd.wolfram.mathematica" : { "source" : "iana"}, "application/vnd.wolfram.mathematica.package" : { "source" : "iana"}, "application/vnd.wolfram.player" : { "source" : "iana", "extensions" : ["nbp"]}, "application/vnd.wordperfect" : { "source" : "iana", "extensions" : ["wpd"]}, "application/vnd.wqd" : { "source" : "iana", "extensions" : ["wqd"]}, "application/vnd.wrq-hp3000-labelled" : { "source" : "iana"}, "application/vnd.wt.stf" : { "source" : "iana", "extensions" : ["stf"]}, "application/vnd.wv.csp+wbxml" : { "source" : "iana"}, "application/vnd.wv.csp+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.wv.ssp+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.xacml+json" : { "source" : "iana", "compressible" : true}, "application/vnd.xara" : { "source" : "iana", "extensions" : ["xar"]}, "application/vnd.xfdl" : { "source" : "iana", "extensions" : ["xfdl"]}, "application/vnd.xfdl.webform" : { "source" : "iana"}, "application/vnd.xmi+xml" : { "source" : "iana", "compressible" : true}, "application/vnd.xmpie.cpkg" : { "source" : "iana"}, "application/vnd.xmpie.dpkg" : { "source" : "iana"}, "application/vnd.xmpie.plan" : { "source" : "iana"}, "application/vnd.xmpie.ppkg" : { "source" : "iana"}, "application/vnd.xmpie.xlim" : { "source" : "iana"}, "application/vnd.yamaha.hv-dic" : { "source" : "iana", "extensions" : ["hvd"]}, "application/vnd.yamaha.hv-script" : { "source" : "iana", "extensions" : ["hvs"]}, "application/vnd.yamaha.hv-voice" : { "source" : "iana", "extensions" : ["hvp"]}, "application/vnd.yamaha.openscoreformat" : { "source" : "iana", "extensions" : ["osf"]}, "application/vnd.yamaha.openscoreformat.osfpvg+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["osfpvg"]}, "application/vnd.yamaha.remote-setup" : { "source" : "iana"}, "application/vnd.yamaha.smaf-audio" : { "source" : "iana", "extensions" : ["saf"]}, "application/vnd.yamaha.smaf-phrase" : { "source" : "iana", "extensions" : ["spf"]}, "application/vnd.yamaha.through-ngn" : { "source" : "iana"}, "application/vnd.yamaha.tunnel-udpencap" : { "source" : "iana"}, "application/vnd.yaoweme" : { "source" : "iana"}, "application/vnd.yellowriver-custom-menu" : { "source" : "iana", "extensions" : ["cmp"]}, "application/vnd.youtube.yt" : { "source" : "iana"}, "application/vnd.zul" : { "source" : "iana", "extensions" : ["zir","zirz"]}, "application/vnd.zzazz.deck+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["zaz"]}, "application/voicexml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["vxml"]}, "application/voucher-cms+json" : { "source" : "iana", "compressible" : true}, "application/vq-rtcpxr" : { "source" : "iana"}, "application/wasm" : { "compressible" : true, "extensions" : ["wasm"]}, "application/watcherinfo+xml" : { "source" : "iana", "compressible" : true}, "application/webpush-options+json" : { "source" : "iana", "compressible" : true}, "application/whoispp-query" : { "source" : "iana"}, "application/whoispp-response" : { "source" : "iana"}, "application/widget" : { "source" : "iana", "extensions" : ["wgt"]}, "application/winhlp" : { "source" : "apache", "extensions" : ["hlp"]}, "application/wita" : { "source" : "iana"}, "application/wordperfect5.1" : { "source" : "iana"}, "application/wsdl+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wsdl"]}, "application/wspolicy+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["wspolicy"]}, "application/x-7z-compressed" : { "source" : "apache", "compressible" : false, "extensions" : ["7z"]}, "application/x-abiword" : { "source" : "apache", "extensions" : ["abw"]}, "application/x-ace-compressed" : { "source" : "apache", "extensions" : ["ace"]}, "application/x-amf" : { "source" : "apache"}, "application/x-apple-diskimage" : { "source" : "apache", "extensions" : ["dmg"]}, "application/x-arj" : { "compressible" : false, "extensions" : ["arj"]}, "application/x-authorware-bin" : { "source" : "apache", "extensions" : ["aab","x32","u32","vox"]}, "application/x-authorware-map" : { "source" : "apache", "extensions" : ["aam"]}, "application/x-authorware-seg" : { "source" : "apache", "extensions" : ["aas"]}, "application/x-bcpio" : { "source" : "apache", "extensions" : ["bcpio"]}, "application/x-bdoc" : { "compressible" : false, "extensions" : ["bdoc"]}, "application/x-bittorrent" : { "source" : "apache", "extensions" : ["torrent"]}, "application/x-blorb" : { "source" : "apache", "extensions" : ["blb","blorb"]}, "application/x-bzip" : { "source" : "apache", "compressible" : false, "extensions" : ["bz"]}, "application/x-bzip2" : { "source" : "apache", "compressible" : false, "extensions" : ["bz2","boz"]}, "application/x-cbr" : { "source" : "apache", "extensions" : ["cbr","cba","cbt","cbz","cb7"]}, "application/x-cdlink" : { "source" : "apache", "extensions" : ["vcd"]}, "application/x-cfs-compressed" : { "source" : "apache", "extensions" : ["cfs"]}, "application/x-chat" : { "source" : "apache", "extensions" : ["chat"]}, "application/x-chess-pgn" : { "source" : "apache", "extensions" : ["pgn"]}, "application/x-chrome-extension" : { "extensions" : ["crx"]}, "application/x-cocoa" : { "source" : "nginx", "extensions" : ["cco"]}, "application/x-compress" : { "source" : "apache"}, "application/x-conference" : { "source" : "apache", "extensions" : ["nsc"]}, "application/x-cpio" : { "source" : "apache", "extensions" : ["cpio"]}, "application/x-csh" : { "source" : "apache", "extensions" : ["csh"]}, "application/x-deb" : { "compressible" : false}, "application/x-debian-package" : { "source" : "apache", "extensions" : ["deb","udeb"]}, "application/x-dgc-compressed" : { "source" : "apache", "extensions" : ["dgc"]}, "application/x-director" : { "source" : "apache", "extensions" : ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]}, "application/x-doom" : { "source" : "apache", "extensions" : ["wad"]}, "application/x-dtbncx+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["ncx"]}, "application/x-dtbook+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["dtb"]}, "application/x-dtbresource+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["res"]}, "application/x-dvi" : { "source" : "apache", "compressible" : false, "extensions" : ["dvi"]}, "application/x-envoy" : { "source" : "apache", "extensions" : ["evy"]}, "application/x-eva" : { "source" : "apache", "extensions" : ["eva"]}, "application/x-font-bdf" : { "source" : "apache", "extensions" : ["bdf"]}, "application/x-font-dos" : { "source" : "apache"}, "application/x-font-framemaker" : { "source" : "apache"}, "application/x-font-ghostscript" : { "source" : "apache", "extensions" : ["gsf"]}, "application/x-font-libgrx" : { "source" : "apache"}, "application/x-font-linux-psf" : { "source" : "apache", "extensions" : ["psf"]}, "application/x-font-pcf" : { "source" : "apache", "extensions" : ["pcf"]}, "application/x-font-snf" : { "source" : "apache", "extensions" : ["snf"]}, "application/x-font-speedo" : { "source" : "apache"}, "application/x-font-sunos-news" : { "source" : "apache"}, "application/x-font-type1" : { "source" : "apache", "extensions" : ["pfa","pfb","pfm","afm"]}, "application/x-font-vfont" : { "source" : "apache"}, "application/x-freearc" : { "source" : "apache", "extensions" : ["arc"]}, "application/x-futuresplash" : { "source" : "apache", "extensions" : ["spl"]}, "application/x-gca-compressed" : { "source" : "apache", "extensions" : ["gca"]}, "application/x-glulx" : { "source" : "apache", "extensions" : ["ulx"]}, "application/x-gnumeric" : { "source" : "apache", "extensions" : ["gnumeric"]}, "application/x-gramps-xml" : { "source" : "apache", "extensions" : ["gramps"]}, "application/x-gtar" : { "source" : "apache", "extensions" : ["gtar"]}, "application/x-gzip" : { "source" : "apache"}, "application/x-hdf" : { "source" : "apache", "extensions" : ["hdf"]}, "application/x-httpd-php" : { "compressible" : true, "extensions" : ["php"]}, "application/x-install-instructions" : { "source" : "apache", "extensions" : ["install"]}, "application/x-iso9660-image" : { "source" : "apache", "extensions" : ["iso"]}, "application/x-java-archive-diff" : { "source" : "nginx", "extensions" : ["jardiff"]}, "application/x-java-jnlp-file" : { "source" : "apache", "compressible" : false, "extensions" : ["jnlp"]}, "application/x-javascript" : { "compressible" : true}, "application/x-latex" : { "source" : "apache", "compressible" : false, "extensions" : ["latex"]}, "application/x-lua-bytecode" : { "extensions" : ["luac"]}, "application/x-lzh-compressed" : { "source" : "apache", "extensions" : ["lzh","lha"]}, "application/x-makeself" : { "source" : "nginx", "extensions" : ["run"]}, "application/x-mie" : { "source" : "apache", "extensions" : ["mie"]}, "application/x-mobipocket-ebook" : { "source" : "apache", "extensions" : ["prc","mobi"]}, "application/x-mpegurl" : { "compressible" : false}, "application/x-ms-application" : { "source" : "apache", "extensions" : ["application"]}, "application/x-ms-shortcut" : { "source" : "apache", "extensions" : ["lnk"]}, "application/x-ms-wmd" : { "source" : "apache", "extensions" : ["wmd"]}, "application/x-ms-wmz" : { "source" : "apache", "extensions" : ["wmz"]}, "application/x-ms-xbap" : { "source" : "apache", "extensions" : ["xbap"]}, "application/x-msaccess" : { "source" : "apache", "extensions" : ["mdb"]}, "application/x-msbinder" : { "source" : "apache", "extensions" : ["obd"]}, "application/x-mscardfile" : { "source" : "apache", "extensions" : ["crd"]}, "application/x-msclip" : { "source" : "apache", "extensions" : ["clp"]}, "application/x-msdos-program" : { "extensions" : ["exe"]}, "application/x-msdownload" : { "source" : "apache", "extensions" : ["exe","dll","com","bat","msi"]}, "application/x-msmediaview" : { "source" : "apache", "extensions" : ["mvb","m13","m14"]}, "application/x-msmetafile" : { "source" : "apache", "extensions" : ["wmf","wmz","emf","emz"]}, "application/x-msmoney" : { "source" : "apache", "extensions" : ["mny"]}, "application/x-mspublisher" : { "source" : "apache", "extensions" : ["pub"]}, "application/x-msschedule" : { "source" : "apache", "extensions" : ["scd"]}, "application/x-msterminal" : { "source" : "apache", "extensions" : ["trm"]}, "application/x-mswrite" : { "source" : "apache", "extensions" : ["wri"]}, "application/x-netcdf" : { "source" : "apache", "extensions" : ["nc","cdf"]}, "application/x-ns-proxy-autoconfig" : { "compressible" : true, "extensions" : ["pac"]}, "application/x-nzb" : { "source" : "apache", "extensions" : ["nzb"]}, "application/x-perl" : { "source" : "nginx", "extensions" : ["pl","pm"]}, "application/x-pilot" : { "source" : "nginx", "extensions" : ["prc","pdb"]}, "application/x-pkcs12" : { "source" : "apache", "compressible" : false, "extensions" : ["p12","pfx"]}, "application/x-pkcs7-certificates" : { "source" : "apache", "extensions" : ["p7b","spc"]}, "application/x-pkcs7-certreqresp" : { "source" : "apache", "extensions" : ["p7r"]}, "application/x-rar-compressed" : { "source" : "apache", "compressible" : false, "extensions" : ["rar"]}, "application/x-redhat-package-manager" : { "source" : "nginx", "extensions" : ["rpm"]}, "application/x-research-info-systems" : { "source" : "apache", "extensions" : ["ris"]}, "application/x-sea" : { "source" : "nginx", "extensions" : ["sea"]}, "application/x-sh" : { "source" : "apache", "compressible" : true, "extensions" : ["sh"]}, "application/x-shar" : { "source" : "apache", "extensions" : ["shar"]}, "application/x-shockwave-flash" : { "source" : "apache", "compressible" : false, "extensions" : ["swf"]}, "application/x-silverlight-app" : { "source" : "apache", "extensions" : ["xap"]}, "application/x-sql" : { "source" : "apache", "extensions" : ["sql"]}, "application/x-stuffit" : { "source" : "apache", "compressible" : false, "extensions" : ["sit"]}, "application/x-stuffitx" : { "source" : "apache", "extensions" : ["sitx"]}, "application/x-subrip" : { "source" : "apache", "extensions" : ["srt"]}, "application/x-sv4cpio" : { "source" : "apache", "extensions" : ["sv4cpio"]}, "application/x-sv4crc" : { "source" : "apache", "extensions" : ["sv4crc"]}, "application/x-t3vm-image" : { "source" : "apache", "extensions" : ["t3"]}, "application/x-tads" : { "source" : "apache", "extensions" : ["gam"]}, "application/x-tar" : { "source" : "apache", "compressible" : true, "extensions" : ["tar"]}, "application/x-tcl" : { "source" : "apache", "extensions" : ["tcl","tk"]}, "application/x-tex" : { "source" : "apache", "extensions" : ["tex"]}, "application/x-tex-tfm" : { "source" : "apache", "extensions" : ["tfm"]}, "application/x-texinfo" : { "source" : "apache", "extensions" : ["texinfo","texi"]}, "application/x-tgif" : { "source" : "apache", "extensions" : ["obj"]}, "application/x-ustar" : { "source" : "apache", "extensions" : ["ustar"]}, "application/x-virtualbox-hdd" : { "compressible" : true, "extensions" : ["hdd"]}, "application/x-virtualbox-ova" : { "compressible" : true, "extensions" : ["ova"]}, "application/x-virtualbox-ovf" : { "compressible" : true, "extensions" : ["ovf"]}, "application/x-virtualbox-vbox" : { "compressible" : true, "extensions" : ["vbox"]}, "application/x-virtualbox-vbox-extpack" : { "compressible" : false, "extensions" : ["vbox-extpack"]}, "application/x-virtualbox-vdi" : { "compressible" : true, "extensions" : ["vdi"]}, "application/x-virtualbox-vhd" : { "compressible" : true, "extensions" : ["vhd"]}, "application/x-virtualbox-vmdk" : { "compressible" : true, "extensions" : ["vmdk"]}, "application/x-wais-source" : { "source" : "apache", "extensions" : ["src"]}, "application/x-web-app-manifest+json" : { "compressible" : true, "extensions" : ["webapp"]}, "application/x-www-form-urlencoded" : { "source" : "iana", "compressible" : true}, "application/x-x509-ca-cert" : { "source" : "apache", "extensions" : ["der","crt","pem"]}, "application/x-xfig" : { "source" : "apache", "extensions" : ["fig"]}, "application/x-xliff+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xlf"]}, "application/x-xpinstall" : { "source" : "apache", "compressible" : false, "extensions" : ["xpi"]}, "application/x-xz" : { "source" : "apache", "extensions" : ["xz"]}, "application/x-zmachine" : { "source" : "apache", "extensions" : ["z1","z2","z3","z4","z5","z6","z7","z8"]}, "application/x400-bp" : { "source" : "iana"}, "application/xacml+xml" : { "source" : "iana", "compressible" : true}, "application/xaml+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xaml"]}, "application/xcap-att+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-caps+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-diff+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xdf"]}, "application/xcap-el+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-error+xml" : { "source" : "iana", "compressible" : true}, "application/xcap-ns+xml" : { "source" : "iana", "compressible" : true}, "application/xcon-conference-info+xml" : { "source" : "iana", "compressible" : true}, "application/xcon-conference-info-diff+xml" : { "source" : "iana", "compressible" : true}, "application/xenc+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xenc"]}, "application/xhtml+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xhtml","xht"]}, "application/xhtml-voice+xml" : { "source" : "apache", "compressible" : true}, "application/xliff+xml" : { "source" : "iana", "compressible" : true}, "application/xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xml","xsl","xsd","rng"]}, "application/xml-dtd" : { "source" : "iana", "compressible" : true, "extensions" : ["dtd"]}, "application/xml-external-parsed-entity" : { "source" : "iana"}, "application/xml-patch+xml" : { "source" : "iana", "compressible" : true}, "application/xmpp+xml" : { "source" : "iana", "compressible" : true}, "application/xop+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xop"]}, "application/xproc+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xpl"]}, "application/xslt+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xslt"]}, "application/xspf+xml" : { "source" : "apache", "compressible" : true, "extensions" : ["xspf"]}, "application/xv+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["mxml","xhvml","xvml","xvm"]}, "application/yang" : { "source" : "iana", "extensions" : ["yang"]}, "application/yang-data+json" : { "source" : "iana", "compressible" : true}, "application/yang-data+xml" : { "source" : "iana", "compressible" : true}, "application/yang-patch+json" : { "source" : "iana", "compressible" : true}, "application/yang-patch+xml" : { "source" : "iana", "compressible" : true}, "application/yin+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["yin"]}, "application/zip" : { "source" : "iana", "compressible" : false, "extensions" : ["zip"]}, "application/zlib" : { "source" : "iana"}, "application/zstd" : { "source" : "iana"}, "audio/1d-interleaved-parityfec" : { "source" : "iana"}, "audio/32kadpcm" : { "source" : "iana"}, "audio/3gpp" : { "source" : "iana", "compressible" : false, "extensions" : ["3gpp"]}, "audio/3gpp2" : { "source" : "iana"}, "audio/aac" : { "source" : "iana"}, "audio/ac3" : { "source" : "iana"}, "audio/adpcm" : { "source" : "apache", "extensions" : ["adp"]}, "audio/amr" : { "source" : "iana"}, "audio/amr-wb" : { "source" : "iana"}, "audio/amr-wb+" : { "source" : "iana"}, "audio/aptx" : { "source" : "iana"}, "audio/asc" : { "source" : "iana"}, "audio/atrac-advanced-lossless" : { "source" : "iana"}, "audio/atrac-x" : { "source" : "iana"}, "audio/atrac3" : { "source" : "iana"}, "audio/basic" : { "source" : "iana", "compressible" : false, "extensions" : ["au","snd"]}, "audio/bv16" : { "source" : "iana"}, "audio/bv32" : { "source" : "iana"}, "audio/clearmode" : { "source" : "iana"}, "audio/cn" : { "source" : "iana"}, "audio/dat12" : { "source" : "iana"}, "audio/dls" : { "source" : "iana"}, "audio/dsr-es201108" : { "source" : "iana"}, "audio/dsr-es202050" : { "source" : "iana"}, "audio/dsr-es202211" : { "source" : "iana"}, "audio/dsr-es202212" : { "source" : "iana"}, "audio/dv" : { "source" : "iana"}, "audio/dvi4" : { "source" : "iana"}, "audio/eac3" : { "source" : "iana"}, "audio/encaprtp" : { "source" : "iana"}, "audio/evrc" : { "source" : "iana"}, "audio/evrc-qcp" : { "source" : "iana"}, "audio/evrc0" : { "source" : "iana"}, "audio/evrc1" : { "source" : "iana"}, "audio/evrcb" : { "source" : "iana"}, "audio/evrcb0" : { "source" : "iana"}, "audio/evrcb1" : { "source" : "iana"}, "audio/evrcnw" : { "source" : "iana"}, "audio/evrcnw0" : { "source" : "iana"}, "audio/evrcnw1" : { "source" : "iana"}, "audio/evrcwb" : { "source" : "iana"}, "audio/evrcwb0" : { "source" : "iana"}, "audio/evrcwb1" : { "source" : "iana"}, "audio/evs" : { "source" : "iana"}, "audio/fwdred" : { "source" : "iana"}, "audio/g711-0" : { "source" : "iana"}, "audio/g719" : { "source" : "iana"}, "audio/g722" : { "source" : "iana"}, "audio/g7221" : { "source" : "iana"}, "audio/g723" : { "source" : "iana"}, "audio/g726-16" : { "source" : "iana"}, "audio/g726-24" : { "source" : "iana"}, "audio/g726-32" : { "source" : "iana"}, "audio/g726-40" : { "source" : "iana"}, "audio/g728" : { "source" : "iana"}, "audio/g729" : { "source" : "iana"}, "audio/g7291" : { "source" : "iana"}, "audio/g729d" : { "source" : "iana"}, "audio/g729e" : { "source" : "iana"}, "audio/gsm" : { "source" : "iana"}, "audio/gsm-efr" : { "source" : "iana"}, "audio/gsm-hr-08" : { "source" : "iana"}, "audio/ilbc" : { "source" : "iana"}, "audio/ip-mr_v2.5" : { "source" : "iana"}, "audio/isac" : { "source" : "apache"}, "audio/l16" : { "source" : "iana"}, "audio/l20" : { "source" : "iana"}, "audio/l24" : { "source" : "iana", "compressible" : false}, "audio/l8" : { "source" : "iana"}, "audio/lpc" : { "source" : "iana"}, "audio/melp" : { "source" : "iana"}, "audio/melp1200" : { "source" : "iana"}, "audio/melp2400" : { "source" : "iana"}, "audio/melp600" : { "source" : "iana"}, "audio/midi" : { "source" : "apache", "extensions" : ["mid","midi","kar","rmi"]}, "audio/mobile-xmf" : { "source" : "iana"}, "audio/mp3" : { "compressible" : false, "extensions" : ["mp3"]}, "audio/mp4" : { "source" : "iana", "compressible" : false, "extensions" : ["m4a","mp4a"]}, "audio/mp4a-latm" : { "source" : "iana"}, "audio/mpa" : { "source" : "iana"}, "audio/mpa-robust" : { "source" : "iana"}, "audio/mpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["mpga","mp2","mp2a","mp3","m2a","m3a"]}, "audio/mpeg4-generic" : { "source" : "iana"}, "audio/musepack" : { "source" : "apache"}, "audio/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["oga","ogg","spx"]}, "audio/opus" : { "source" : "iana"}, "audio/parityfec" : { "source" : "iana"}, "audio/pcma" : { "source" : "iana"}, "audio/pcma-wb" : { "source" : "iana"}, "audio/pcmu" : { "source" : "iana"}, "audio/pcmu-wb" : { "source" : "iana"}, "audio/prs.sid" : { "source" : "iana"}, "audio/qcelp" : { "source" : "iana"}, "audio/raptorfec" : { "source" : "iana"}, "audio/red" : { "source" : "iana"}, "audio/rtp-enc-aescm128" : { "source" : "iana"}, "audio/rtp-midi" : { "source" : "iana"}, "audio/rtploopback" : { "source" : "iana"}, "audio/rtx" : { "source" : "iana"}, "audio/s3m" : { "source" : "apache", "extensions" : ["s3m"]}, "audio/silk" : { "source" : "apache", "extensions" : ["sil"]}, "audio/smv" : { "source" : "iana"}, "audio/smv-qcp" : { "source" : "iana"}, "audio/smv0" : { "source" : "iana"}, "audio/sp-midi" : { "source" : "iana"}, "audio/speex" : { "source" : "iana"}, "audio/t140c" : { "source" : "iana"}, "audio/t38" : { "source" : "iana"}, "audio/telephone-event" : { "source" : "iana"}, "audio/tetra_acelp" : { "source" : "iana"}, "audio/tone" : { "source" : "iana"}, "audio/uemclip" : { "source" : "iana"}, "audio/ulpfec" : { "source" : "iana"}, "audio/usac" : { "source" : "iana"}, "audio/vdvi" : { "source" : "iana"}, "audio/vmr-wb" : { "source" : "iana"}, "audio/vnd.3gpp.iufp" : { "source" : "iana"}, "audio/vnd.4sb" : { "source" : "iana"}, "audio/vnd.audiokoz" : { "source" : "iana"}, "audio/vnd.celp" : { "source" : "iana"}, "audio/vnd.cisco.nse" : { "source" : "iana"}, "audio/vnd.cmles.radio-events" : { "source" : "iana"}, "audio/vnd.cns.anp1" : { "source" : "iana"}, "audio/vnd.cns.inf1" : { "source" : "iana"}, "audio/vnd.dece.audio" : { "source" : "iana", "extensions" : ["uva","uvva"]}, "audio/vnd.digital-winds" : { "source" : "iana", "extensions" : ["eol"]}, "audio/vnd.dlna.adts" : { "source" : "iana"}, "audio/vnd.dolby.heaac.1" : { "source" : "iana"}, "audio/vnd.dolby.heaac.2" : { "source" : "iana"}, "audio/vnd.dolby.mlp" : { "source" : "iana"}, "audio/vnd.dolby.mps" : { "source" : "iana"}, "audio/vnd.dolby.pl2" : { "source" : "iana"}, "audio/vnd.dolby.pl2x" : { "source" : "iana"}, "audio/vnd.dolby.pl2z" : { "source" : "iana"}, "audio/vnd.dolby.pulse.1" : { "source" : "iana"}, "audio/vnd.dra" : { "source" : "iana", "extensions" : ["dra"]}, "audio/vnd.dts" : { "source" : "iana", "extensions" : ["dts"]}, "audio/vnd.dts.hd" : { "source" : "iana", "extensions" : ["dtshd"]}, "audio/vnd.dts.uhd" : { "source" : "iana"}, "audio/vnd.dvb.file" : { "source" : "iana"}, "audio/vnd.everad.plj" : { "source" : "iana"}, "audio/vnd.hns.audio" : { "source" : "iana"}, "audio/vnd.lucent.voice" : { "source" : "iana", "extensions" : ["lvp"]}, "audio/vnd.ms-playready.media.pya" : { "source" : "iana", "extensions" : ["pya"]}, "audio/vnd.nokia.mobile-xmf" : { "source" : "iana"}, "audio/vnd.nortel.vbk" : { "source" : "iana"}, "audio/vnd.nuera.ecelp4800" : { "source" : "iana", "extensions" : ["ecelp4800"]}, "audio/vnd.nuera.ecelp7470" : { "source" : "iana", "extensions" : ["ecelp7470"]}, "audio/vnd.nuera.ecelp9600" : { "source" : "iana", "extensions" : ["ecelp9600"]}, "audio/vnd.octel.sbc" : { "source" : "iana"}, "audio/vnd.presonus.multitrack" : { "source" : "iana"}, "audio/vnd.qcelp" : { "source" : "iana"}, "audio/vnd.rhetorex.32kadpcm" : { "source" : "iana"}, "audio/vnd.rip" : { "source" : "iana", "extensions" : ["rip"]}, "audio/vnd.rn-realaudio" : { "compressible" : false}, "audio/vnd.sealedmedia.softseal.mpeg" : { "source" : "iana"}, "audio/vnd.vmx.cvsd" : { "source" : "iana"}, "audio/vnd.wave" : { "compressible" : false}, "audio/vorbis" : { "source" : "iana", "compressible" : false}, "audio/vorbis-config" : { "source" : "iana"}, "audio/wav" : { "compressible" : false, "extensions" : ["wav"]}, "audio/wave" : { "compressible" : false, "extensions" : ["wav"]}, "audio/webm" : { "source" : "apache", "compressible" : false, "extensions" : ["weba"]}, "audio/x-aac" : { "source" : "apache", "compressible" : false, "extensions" : ["aac"]}, "audio/x-aiff" : { "source" : "apache", "extensions" : ["aif","aiff","aifc"]}, "audio/x-caf" : { "source" : "apache", "compressible" : false, "extensions" : ["caf"]}, "audio/x-flac" : { "source" : "apache", "extensions" : ["flac"]}, "audio/x-m4a" : { "source" : "nginx", "extensions" : ["m4a"]}, "audio/x-matroska" : { "source" : "apache", "extensions" : ["mka"]}, "audio/x-mpegurl" : { "source" : "apache", "extensions" : ["m3u"]}, "audio/x-ms-wax" : { "source" : "apache", "extensions" : ["wax"]}, "audio/x-ms-wma" : { "source" : "apache", "extensions" : ["wma"]}, "audio/x-pn-realaudio" : { "source" : "apache", "extensions" : ["ram","ra"]}, "audio/x-pn-realaudio-plugin" : { "source" : "apache", "extensions" : ["rmp"]}, "audio/x-realaudio" : { "source" : "nginx", "extensions" : ["ra"]}, "audio/x-tta" : { "source" : "apache"}, "audio/x-wav" : { "source" : "apache", "extensions" : ["wav"]}, "audio/xm" : { "source" : "apache", "extensions" : ["xm"]}, "chemical/x-cdx" : { "source" : "apache", "extensions" : ["cdx"]}, "chemical/x-cif" : { "source" : "apache", "extensions" : ["cif"]}, "chemical/x-cmdf" : { "source" : "apache", "extensions" : ["cmdf"]}, "chemical/x-cml" : { "source" : "apache", "extensions" : ["cml"]}, "chemical/x-csml" : { "source" : "apache", "extensions" : ["csml"]}, "chemical/x-pdb" : { "source" : "apache"}, "chemical/x-xyz" : { "source" : "apache", "extensions" : ["xyz"]}, "font/collection" : { "source" : "iana", "extensions" : ["ttc"]}, "font/otf" : { "source" : "iana", "compressible" : true, "extensions" : ["otf"]}, "font/sfnt" : { "source" : "iana"}, "font/ttf" : { "source" : "iana", "extensions" : ["ttf"]}, "font/woff" : { "source" : "iana", "extensions" : ["woff"]}, "font/woff2" : { "source" : "iana", "extensions" : ["woff2"]}, "image/aces" : { "source" : "iana", "extensions" : ["exr"]}, "image/apng" : { "compressible" : false, "extensions" : ["apng"]}, "image/avci" : { "source" : "iana"}, "image/avcs" : { "source" : "iana"}, "image/bmp" : { "source" : "iana", "compressible" : true, "extensions" : ["bmp"]}, "image/cgm" : { "source" : "iana", "extensions" : ["cgm"]}, "image/dicom-rle" : { "source" : "iana", "extensions" : ["drle"]}, "image/emf" : { "source" : "iana", "extensions" : ["emf"]}, "image/fits" : { "source" : "iana", "extensions" : ["fits"]}, "image/g3fax" : { "source" : "iana", "extensions" : ["g3"]}, "image/gif" : { "source" : "iana", "compressible" : false, "extensions" : ["gif"]}, "image/heic" : { "source" : "iana", "extensions" : ["heic"]}, "image/heic-sequence" : { "source" : "iana", "extensions" : ["heics"]}, "image/heif" : { "source" : "iana", "extensions" : ["heif"]}, "image/heif-sequence" : { "source" : "iana", "extensions" : ["heifs"]}, "image/ief" : { "source" : "iana", "extensions" : ["ief"]}, "image/jls" : { "source" : "iana", "extensions" : ["jls"]}, "image/jp2" : { "source" : "iana", "compressible" : false, "extensions" : ["jp2","jpg2"]}, "image/jpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["jpeg","jpg","jpe"]}, "image/jpm" : { "source" : "iana", "compressible" : false, "extensions" : ["jpm"]}, "image/jpx" : { "source" : "iana", "compressible" : false, "extensions" : ["jpx","jpf"]}, "image/ktx" : { "source" : "iana", "extensions" : ["ktx"]}, "image/naplps" : { "source" : "iana"}, "image/pjpeg" : { "compressible" : false}, "image/png" : { "source" : "iana", "compressible" : false, "extensions" : ["png"]}, "image/prs.btif" : { "source" : "iana", "extensions" : ["btif"]}, "image/prs.pti" : { "source" : "iana", "extensions" : ["pti"]}, "image/pwg-raster" : { "source" : "iana"}, "image/sgi" : { "source" : "apache", "extensions" : ["sgi"]}, "image/svg+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["svg","svgz"]}, "image/t38" : { "source" : "iana", "extensions" : ["t38"]}, "image/tiff" : { "source" : "iana", "compressible" : false, "extensions" : ["tif","tiff"]}, "image/tiff-fx" : { "source" : "iana", "extensions" : ["tfx"]}, "image/vnd.adobe.photoshop" : { "source" : "iana", "compressible" : true, "extensions" : ["psd"]}, "image/vnd.airzip.accelerator.azv" : { "source" : "iana", "extensions" : ["azv"]}, "image/vnd.cns.inf2" : { "source" : "iana"}, "image/vnd.dece.graphic" : { "source" : "iana", "extensions" : ["uvi","uvvi","uvg","uvvg"]}, "image/vnd.djvu" : { "source" : "iana", "extensions" : ["djvu","djv"]}, "image/vnd.dvb.subtitle" : { "source" : "iana", "extensions" : ["sub"]}, "image/vnd.dwg" : { "source" : "iana", "extensions" : ["dwg"]}, "image/vnd.dxf" : { "source" : "iana", "extensions" : ["dxf"]}, "image/vnd.fastbidsheet" : { "source" : "iana", "extensions" : ["fbs"]}, "image/vnd.fpx" : { "source" : "iana", "extensions" : ["fpx"]}, "image/vnd.fst" : { "source" : "iana", "extensions" : ["fst"]}, "image/vnd.fujixerox.edmics-mmr" : { "source" : "iana", "extensions" : ["mmr"]}, "image/vnd.fujixerox.edmics-rlc" : { "source" : "iana", "extensions" : ["rlc"]}, "image/vnd.globalgraphics.pgb" : { "source" : "iana"}, "image/vnd.microsoft.icon" : { "source" : "iana", "extensions" : ["ico"]}, "image/vnd.mix" : { "source" : "iana"}, "image/vnd.mozilla.apng" : { "source" : "iana"}, "image/vnd.ms-modi" : { "source" : "iana", "extensions" : ["mdi"]}, "image/vnd.ms-photo" : { "source" : "apache", "extensions" : ["wdp"]}, "image/vnd.net-fpx" : { "source" : "iana", "extensions" : ["npx"]}, "image/vnd.radiance" : { "source" : "iana"}, "image/vnd.sealed.png" : { "source" : "iana"}, "image/vnd.sealedmedia.softseal.gif" : { "source" : "iana"}, "image/vnd.sealedmedia.softseal.jpg" : { "source" : "iana"}, "image/vnd.svf" : { "source" : "iana"}, "image/vnd.tencent.tap" : { "source" : "iana", "extensions" : ["tap"]}, "image/vnd.valve.source.texture" : { "source" : "iana", "extensions" : ["vtf"]}, "image/vnd.wap.wbmp" : { "source" : "iana", "extensions" : ["wbmp"]}, "image/vnd.xiff" : { "source" : "iana", "extensions" : ["xif"]}, "image/vnd.zbrush.pcx" : { "source" : "iana", "extensions" : ["pcx"]}, "image/webp" : { "source" : "apache", "extensions" : ["webp"]}, "image/wmf" : { "source" : "iana", "extensions" : ["wmf"]}, "image/x-3ds" : { "source" : "apache", "extensions" : ["3ds"]}, "image/x-cmu-raster" : { "source" : "apache", "extensions" : ["ras"]}, "image/x-cmx" : { "source" : "apache", "extensions" : ["cmx"]}, "image/x-freehand" : { "source" : "apache", "extensions" : ["fh","fhc","fh4","fh5","fh7"]}, "image/x-icon" : { "source" : "apache", "compressible" : true, "extensions" : ["ico"]}, "image/x-jng" : { "source" : "nginx", "extensions" : ["jng"]}, "image/x-mrsid-image" : { "source" : "apache", "extensions" : ["sid"]}, "image/x-ms-bmp" : { "source" : "nginx", "compressible" : true, "extensions" : ["bmp"]}, "image/x-pcx" : { "source" : "apache", "extensions" : ["pcx"]}, "image/x-pict" : { "source" : "apache", "extensions" : ["pic","pct"]}, "image/x-portable-anymap" : { "source" : "apache", "extensions" : ["pnm"]}, "image/x-portable-bitmap" : { "source" : "apache", "extensions" : ["pbm"]}, "image/x-portable-graymap" : { "source" : "apache", "extensions" : ["pgm"]}, "image/x-portable-pixmap" : { "source" : "apache", "extensions" : ["ppm"]}, "image/x-rgb" : { "source" : "apache", "extensions" : ["rgb"]}, "image/x-tga" : { "source" : "apache", "extensions" : ["tga"]}, "image/x-xbitmap" : { "source" : "apache", "extensions" : ["xbm"]}, "image/x-xcf" : { "compressible" : false}, "image/x-xpixmap" : { "source" : "apache", "extensions" : ["xpm"]}, "image/x-xwindowdump" : { "source" : "apache", "extensions" : ["xwd"]}, "message/cpim" : { "source" : "iana"}, "message/delivery-status" : { "source" : "iana"}, "message/disposition-notification" : { "source" : "iana", "extensions" : ["disposition-notification"]}, "message/external-body" : { "source" : "iana"}, "message/feedback-report" : { "source" : "iana"}, "message/global" : { "source" : "iana", "extensions" : ["u8msg"]}, "message/global-delivery-status" : { "source" : "iana", "extensions" : ["u8dsn"]}, "message/global-disposition-notification" : { "source" : "iana", "extensions" : ["u8mdn"]}, "message/global-headers" : { "source" : "iana", "extensions" : ["u8hdr"]}, "message/http" : { "source" : "iana", "compressible" : false}, "message/imdn+xml" : { "source" : "iana", "compressible" : true}, "message/news" : { "source" : "iana"}, "message/partial" : { "source" : "iana", "compressible" : false}, "message/rfc822" : { "source" : "iana", "compressible" : true, "extensions" : ["eml","mime"]}, "message/s-http" : { "source" : "iana"}, "message/sip" : { "source" : "iana"}, "message/sipfrag" : { "source" : "iana"}, "message/tracking-status" : { "source" : "iana"}, "message/vnd.si.simp" : { "source" : "iana"}, "message/vnd.wfa.wsc" : { "source" : "iana", "extensions" : ["wsc"]}, "model/3mf" : { "source" : "iana"}, "model/gltf+json" : { "source" : "iana", "compressible" : true, "extensions" : ["gltf"]}, "model/gltf-binary" : { "source" : "iana", "compressible" : true, "extensions" : ["glb"]}, "model/iges" : { "source" : "iana", "compressible" : false, "extensions" : ["igs","iges"]}, "model/mesh" : { "source" : "iana", "compressible" : false, "extensions" : ["msh","mesh","silo"]}, "model/stl" : { "source" : "iana"}, "model/vnd.collada+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["dae"]}, "model/vnd.dwf" : { "source" : "iana", "extensions" : ["dwf"]}, "model/vnd.flatland.3dml" : { "source" : "iana"}, "model/vnd.gdl" : { "source" : "iana", "extensions" : ["gdl"]}, "model/vnd.gs-gdl" : { "source" : "apache"}, "model/vnd.gs.gdl" : { "source" : "iana"}, "model/vnd.gtw" : { "source" : "iana", "extensions" : ["gtw"]}, "model/vnd.moml+xml" : { "source" : "iana", "compressible" : true}, "model/vnd.mts" : { "source" : "iana", "extensions" : ["mts"]}, "model/vnd.opengex" : { "source" : "iana"}, "model/vnd.parasolid.transmit.binary" : { "source" : "iana"}, "model/vnd.parasolid.transmit.text" : { "source" : "iana"}, "model/vnd.rosette.annotated-data-model" : { "source" : "iana"}, "model/vnd.usdz+zip" : { "source" : "iana", "compressible" : false}, "model/vnd.valve.source.compiled-map" : { "source" : "iana"}, "model/vnd.vtu" : { "source" : "iana", "extensions" : ["vtu"]}, "model/vrml" : { "source" : "iana", "compressible" : false, "extensions" : ["wrl","vrml"]}, "model/x3d+binary" : { "source" : "apache", "compressible" : false, "extensions" : ["x3db","x3dbz"]}, "model/x3d+fastinfoset" : { "source" : "iana"}, "model/x3d+vrml" : { "source" : "apache", "compressible" : false, "extensions" : ["x3dv","x3dvz"]}, "model/x3d+xml" : { "source" : "iana", "compressible" : true, "extensions" : ["x3d","x3dz"]}, "model/x3d-vrml" : { "source" : "iana"}, "multipart/alternative" : { "source" : "iana", "compressible" : false}, "multipart/appledouble" : { "source" : "iana"}, "multipart/byteranges" : { "source" : "iana"}, "multipart/digest" : { "source" : "iana"}, "multipart/encrypted" : { "source" : "iana", "compressible" : false}, "multipart/form-data" : { "source" : "iana", "compressible" : false}, "multipart/header-set" : { "source" : "iana"}, "multipart/mixed" : { "source" : "iana", "compressible" : false}, "multipart/multilingual" : { "source" : "iana"}, "multipart/parallel" : { "source" : "iana"}, "multipart/related" : { "source" : "iana", "compressible" : false}, "multipart/report" : { "source" : "iana"}, "multipart/signed" : { "source" : "iana", "compressible" : false}, "multipart/vnd.bint.med-plus" : { "source" : "iana"}, "multipart/voice-message" : { "source" : "iana"}, "multipart/x-mixed-replace" : { "source" : "iana"}, "text/1d-interleaved-parityfec" : { "source" : "iana"}, "text/cache-manifest" : { "source" : "iana", "compressible" : true, "extensions" : ["appcache","manifest"]}, "text/calendar" : { "source" : "iana", "extensions" : ["ics","ifb"]}, "text/calender" : { "compressible" : true}, "text/cmd" : { "compressible" : true}, "text/coffeescript" : { "extensions" : ["coffee","litcoffee"]}, "text/css" : { "source" : "iana", "charset" : "UTF-8", "compressible" : true, "extensions" : ["css"]}, "text/csv" : { "source" : "iana", "compressible" : true, "extensions" : ["csv"]}, "text/csv-schema" : { "source" : "iana"}, "text/directory" : { "source" : "iana"}, "text/dns" : { "source" : "iana"}, "text/ecmascript" : { "source" : "iana"}, "text/encaprtp" : { "source" : "iana"}, "text/enriched" : { "source" : "iana"}, "text/fwdred" : { "source" : "iana"}, "text/grammar-ref-list" : { "source" : "iana"}, "text/html" : { "source" : "iana", "compressible" : true, "extensions" : ["html","htm","shtml"]}, "text/jade" : { "extensions" : ["jade"]}, "text/javascript" : { "source" : "iana", "compressible" : true}, "text/jcr-cnd" : { "source" : "iana"}, "text/jsx" : { "compressible" : true, "extensions" : ["jsx"]}, "text/less" : { "compressible" : true, "extensions" : ["less"]}, "text/markdown" : { "source" : "iana", "compressible" : true, "extensions" : ["markdown","md"]}, "text/mathml" : { "source" : "nginx", "extensions" : ["mml"]}, "text/mizar" : { "source" : "iana"}, "text/n3" : { "source" : "iana", "compressible" : true, "extensions" : ["n3"]}, "text/parameters" : { "source" : "iana"}, "text/parityfec" : { "source" : "iana"}, "text/plain" : { "source" : "iana", "compressible" : true, "extensions" : ["txt","text","conf","def","list","log","in","ini"]}, "text/provenance-notation" : { "source" : "iana"}, "text/prs.fallenstein.rst" : { "source" : "iana"}, "text/prs.lines.tag" : { "source" : "iana", "extensions" : ["dsc"]}, "text/prs.prop.logic" : { "source" : "iana"}, "text/raptorfec" : { "source" : "iana"}, "text/red" : { "source" : "iana"}, "text/rfc822-headers" : { "source" : "iana"}, "text/richtext" : { "source" : "iana", "compressible" : true, "extensions" : ["rtx"]}, "text/rtf" : { "source" : "iana", "compressible" : true, "extensions" : ["rtf"]}, "text/rtp-enc-aescm128" : { "source" : "iana"}, "text/rtploopback" : { "source" : "iana"}, "text/rtx" : { "source" : "iana"}, "text/sgml" : { "source" : "iana", "extensions" : ["sgml","sgm"]}, "text/shex" : { "extensions" : ["shex"]}, "text/slim" : { "extensions" : ["slim","slm"]}, "text/strings" : { "source" : "iana"}, "text/stylus" : { "extensions" : ["stylus","styl"]}, "text/t140" : { "source" : "iana"}, "text/tab-separated-values" : { "source" : "iana", "compressible" : true, "extensions" : ["tsv"]}, "text/troff" : { "source" : "iana", "extensions" : ["t","tr","roff","man","me","ms"]}, "text/turtle" : { "source" : "iana", "charset" : "UTF-8", "extensions" : ["ttl"]}, "text/ulpfec" : { "source" : "iana"}, "text/uri-list" : { "source" : "iana", "compressible" : true, "extensions" : ["uri","uris","urls"]}, "text/vcard" : { "source" : "iana", "compressible" : true, "extensions" : ["vcard"]}, "text/vnd.a" : { "source" : "iana"}, "text/vnd.abc" : { "source" : "iana"}, "text/vnd.ascii-art" : { "source" : "iana"}, "text/vnd.curl" : { "source" : "iana", "extensions" : ["curl"]}, "text/vnd.curl.dcurl" : { "source" : "apache", "extensions" : ["dcurl"]}, "text/vnd.curl.mcurl" : { "source" : "apache", "extensions" : ["mcurl"]}, "text/vnd.curl.scurl" : { "source" : "apache", "extensions" : ["scurl"]}, "text/vnd.debian.copyright" : { "source" : "iana"}, "text/vnd.dmclientscript" : { "source" : "iana"}, "text/vnd.dvb.subtitle" : { "source" : "iana", "extensions" : ["sub"]}, "text/vnd.esmertec.theme-descriptor" : { "source" : "iana"}, "text/vnd.fly" : { "source" : "iana", "extensions" : ["fly"]}, "text/vnd.fmi.flexstor" : { "source" : "iana", "extensions" : ["flx"]}, "text/vnd.gml" : { "source" : "iana"}, "text/vnd.graphviz" : { "source" : "iana", "extensions" : ["gv"]}, "text/vnd.hgl" : { "source" : "iana"}, "text/vnd.in3d.3dml" : { "source" : "iana", "extensions" : ["3dml"]}, "text/vnd.in3d.spot" : { "source" : "iana", "extensions" : ["spot"]}, "text/vnd.iptc.newsml" : { "source" : "iana"}, "text/vnd.iptc.nitf" : { "source" : "iana"}, "text/vnd.latex-z" : { "source" : "iana"}, "text/vnd.motorola.reflex" : { "source" : "iana"}, "text/vnd.ms-mediapackage" : { "source" : "iana"}, "text/vnd.net2phone.commcenter.command" : { "source" : "iana"}, "text/vnd.radisys.msml-basic-layout" : { "source" : "iana"}, "text/vnd.senx.warpscript" : { "source" : "iana"}, "text/vnd.si.uricatalogue" : { "source" : "iana"}, "text/vnd.sun.j2me.app-descriptor" : { "source" : "iana", "extensions" : ["jad"]}, "text/vnd.trolltech.linguist" : { "source" : "iana"}, "text/vnd.wap.si" : { "source" : "iana"}, "text/vnd.wap.sl" : { "source" : "iana"}, "text/vnd.wap.wml" : { "source" : "iana", "extensions" : ["wml"]}, "text/vnd.wap.wmlscript" : { "source" : "iana", "extensions" : ["wmls"]}, "text/vtt" : { "charset" : "UTF-8", "compressible" : true, "extensions" : ["vtt"]}, "text/x-asm" : { "source" : "apache", "extensions" : ["s","asm"]}, "text/x-c" : { "source" : "apache", "extensions" : ["c","cc","cxx","cpp","h","hh","dic"]}, "text/x-component" : { "source" : "nginx", "extensions" : ["htc"]}, "text/x-fortran" : { "source" : "apache", "extensions" : ["f","for","f77","f90"]}, "text/x-gwt-rpc" : { "compressible" : true}, "text/x-handlebars-template" : { "extensions" : ["hbs"]}, "text/x-java-source" : { "source" : "apache", "extensions" : ["java"]}, "text/x-jquery-tmpl" : { "compressible" : true}, "text/x-lua" : { "extensions" : ["lua"]}, "text/x-markdown" : { "compressible" : true, "extensions" : ["mkd"]}, "text/x-nfo" : { "source" : "apache", "extensions" : ["nfo"]}, "text/x-opml" : { "source" : "apache", "extensions" : ["opml"]}, "text/x-org" : { "compressible" : true, "extensions" : ["org"]}, "text/x-pascal" : { "source" : "apache", "extensions" : ["p","pas"]}, "text/x-processing" : { "compressible" : true, "extensions" : ["pde"]}, "text/x-sass" : { "extensions" : ["sass"]}, "text/x-scss" : { "extensions" : ["scss"]}, "text/x-setext" : { "source" : "apache", "extensions" : ["etx"]}, "text/x-sfv" : { "source" : "apache", "extensions" : ["sfv"]}, "text/x-suse-ymp" : { "compressible" : true, "extensions" : ["ymp"]}, "text/x-uuencode" : { "source" : "apache", "extensions" : ["uu"]}, "text/x-vcalendar" : { "source" : "apache", "extensions" : ["vcs"]}, "text/x-vcard" : { "source" : "apache", "extensions" : ["vcf"]}, "text/xml" : { "source" : "iana", "compressible" : true, "extensions" : ["xml"]}, "text/xml-external-parsed-entity" : { "source" : "iana"}, "text/yaml" : { "extensions" : ["yaml","yml"]}, "video/1d-interleaved-parityfec" : { "source" : "iana"}, "video/3gpp" : { "source" : "iana", "extensions" : ["3gp","3gpp"]}, "video/3gpp-tt" : { "source" : "iana"}, "video/3gpp2" : { "source" : "iana", "extensions" : ["3g2"]}, "video/bmpeg" : { "source" : "iana"}, "video/bt656" : { "source" : "iana"}, "video/celb" : { "source" : "iana"}, "video/dv" : { "source" : "iana"}, "video/encaprtp" : { "source" : "iana"}, "video/h261" : { "source" : "iana", "extensions" : ["h261"]}, "video/h263" : { "source" : "iana", "extensions" : ["h263"]}, "video/h263-1998" : { "source" : "iana"}, "video/h263-2000" : { "source" : "iana"}, "video/h264" : { "source" : "iana", "extensions" : ["h264"]}, "video/h264-rcdo" : { "source" : "iana"}, "video/h264-svc" : { "source" : "iana"}, "video/h265" : { "source" : "iana"}, "video/iso.segment" : { "source" : "iana"}, "video/jpeg" : { "source" : "iana", "extensions" : ["jpgv"]}, "video/jpeg2000" : { "source" : "iana"}, "video/jpm" : { "source" : "apache", "extensions" : ["jpm","jpgm"]}, "video/mj2" : { "source" : "iana", "extensions" : ["mj2","mjp2"]}, "video/mp1s" : { "source" : "iana"}, "video/mp2p" : { "source" : "iana"}, "video/mp2t" : { "source" : "iana", "extensions" : ["ts"]}, "video/mp4" : { "source" : "iana", "compressible" : false, "extensions" : ["mp4","mp4v","mpg4"]}, "video/mp4v-es" : { "source" : "iana"}, "video/mpeg" : { "source" : "iana", "compressible" : false, "extensions" : ["mpeg","mpg","mpe","m1v","m2v"]}, "video/mpeg4-generic" : { "source" : "iana"}, "video/mpv" : { "source" : "iana"}, "video/nv" : { "source" : "iana"}, "video/ogg" : { "source" : "iana", "compressible" : false, "extensions" : ["ogv"]}, "video/parityfec" : { "source" : "iana"}, "video/pointer" : { "source" : "iana"}, "video/quicktime" : { "source" : "iana", "compressible" : false, "extensions" : ["qt","mov"]}, "video/raptorfec" : { "source" : "iana"}, "video/raw" : { "source" : "iana"}, "video/rtp-enc-aescm128" : { "source" : "iana"}, "video/rtploopback" : { "source" : "iana"}, "video/rtx" : { "source" : "iana"}, "video/smpte291" : { "source" : "iana"}, "video/smpte292m" : { "source" : "iana"}, "video/ulpfec" : { "source" : "iana"}, "video/vc1" : { "source" : "iana"}, "video/vc2" : { "source" : "iana"}, "video/vnd.cctv" : { "source" : "iana"}, "video/vnd.dece.hd" : { "source" : "iana", "extensions" : ["uvh","uvvh"]}, "video/vnd.dece.mobile" : { "source" : "iana", "extensions" : ["uvm","uvvm"]}, "video/vnd.dece.mp4" : { "source" : "iana"}, "video/vnd.dece.pd" : { "source" : "iana", "extensions" : ["uvp","uvvp"]}, "video/vnd.dece.sd" : { "source" : "iana", "extensions" : ["uvs","uvvs"]}, "video/vnd.dece.video" : { "source" : "iana", "extensions" : ["uvv","uvvv"]}, "video/vnd.directv.mpeg" : { "source" : "iana"}, "video/vnd.directv.mpeg-tts" : { "source" : "iana"}, "video/vnd.dlna.mpeg-tts" : { "source" : "iana"}, "video/vnd.dvb.file" : { "source" : "iana", "extensions" : ["dvb"]}, "video/vnd.fvt" : { "source" : "iana", "extensions" : ["fvt"]}, "video/vnd.hns.video" : { "source" : "iana"}, "video/vnd.iptvforum.1dparityfec-1010" : { "source" : "iana"}, "video/vnd.iptvforum.1dparityfec-2005" : { "source" : "iana"}, "video/vnd.iptvforum.2dparityfec-1010" : { "source" : "iana"}, "video/vnd.iptvforum.2dparityfec-2005" : { "source" : "iana"}, "video/vnd.iptvforum.ttsavc" : { "source" : "iana"}, "video/vnd.iptvforum.ttsmpeg2" : { "source" : "iana"}, "video/vnd.motorola.video" : { "source" : "iana"}, "video/vnd.motorola.videop" : { "source" : "iana"}, "video/vnd.mpegurl" : { "source" : "iana", "extensions" : ["mxu","m4u"]}, "video/vnd.ms-playready.media.pyv" : { "source" : "iana", "extensions" : ["pyv"]}, "video/vnd.nokia.interleaved-multimedia" : { "source" : "iana"}, "video/vnd.nokia.mp4vr" : { "source" : "iana"}, "video/vnd.nokia.videovoip" : { "source" : "iana"}, "video/vnd.objectvideo" : { "source" : "iana"}, "video/vnd.radgamettools.bink" : { "source" : "iana"}, "video/vnd.radgamettools.smacker" : { "source" : "iana"}, "video/vnd.sealed.mpeg1" : { "source" : "iana"}, "video/vnd.sealed.mpeg4" : { "source" : "iana"}, "video/vnd.sealed.swf" : { "source" : "iana"}, "video/vnd.sealedmedia.softseal.mov" : { "source" : "iana"}, "video/vnd.uvvu.mp4" : { "source" : "iana", "extensions" : ["uvu","uvvu"]}, "video/vnd.vivo" : { "source" : "iana", "extensions" : ["viv"]}, "video/vp8" : { "source" : "iana"}, "video/webm" : { "source" : "apache", "compressible" : false, "extensions" : ["webm"]}, "video/x-f4v" : { "source" : "apache", "extensions" : ["f4v"]}, "video/x-fli" : { "source" : "apache", "extensions" : ["fli"]}, "video/x-flv" : { "source" : "apache", "compressible" : false, "extensions" : ["flv"]}, "video/x-m4v" : { "source" : "apache", "extensions" : ["m4v"]}, "video/x-matroska" : { "source" : "apache", "compressible" : false, "extensions" : ["mkv","mk3d","mks"]}, "video/x-mng" : { "source" : "apache", "extensions" : ["mng"]}, "video/x-ms-asf" : { "source" : "apache", "extensions" : ["asf","asx"]}, "video/x-ms-vob" : { "source" : "apache", "extensions" : ["vob"]}, "video/x-ms-wm" : { "source" : "apache", "extensions" : ["wm"]}, "video/x-ms-wmv" : { "source" : "apache", "compressible" : false, "extensions" : ["wmv"]}, "video/x-ms-wmx" : { "source" : "apache", "extensions" : ["wmx"]}, "video/x-ms-wvx" : { "source" : "apache", "extensions" : ["wvx"]}, "video/x-msvideo" : { "source" : "apache", "extensions" : ["avi"]}, "video/x-sgi-movie" : { "source" : "apache", "extensions" : ["movie"]}, "video/x-smv" : { "source" : "apache", "extensions" : ["smv"]}, "x-conference/x-cooltalk" : { "source" : "apache", "extensions" : ["ice"]}, "x-shader/x-fragment" : { "compressible" : true}, "x-shader/x-vertex" : { "compressible" : true}};
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink__$Stringly_Stringly_$Impl_$.SUPPORTED_DATE_REGEX = new EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})$","");
tink__$Url_Url_$Impl_$.SCHEME = 2;
tink__$Url_Url_$Impl_$.PAYLOAD = 3;
tink__$Url_Url_$Impl_$.AUTH = 6;
tink__$Url_Url_$Impl_$.HOSTNAMES = 7;
tink__$Url_Url_$Impl_$.PATH = 8;
tink__$Url_Url_$Impl_$.QUERY = 10;
tink__$Url_Url_$Impl_$.HASH = 12;
tink_chunk_nodejs_BufferChunk.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_http_ChunkedParser.LINEBREAK = tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString("\r\n"));
tink_http__$Header_HeaderValue_$Impl_$.DAYS = "Sun,Mon,Tue,Wen,Thu,Fri,Sat".split(",");
tink_http__$Header_HeaderValue_$Impl_$.MONTHS = "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(",");
tink_http__$Header_HeaderName_$Impl_$.REFERER = "referer";
tink_http__$Header_HeaderName_$Impl_$.HOST = "host";
tink_http__$Header_HeaderName_$Impl_$.SET_COOKIE = "set-cookie";
tink_http__$Header_HeaderName_$Impl_$.COOKIE = "cookie";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_TYPE = "content-type";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_LENGTH = "content-length";
tink_http__$Header_HeaderName_$Impl_$.CONTENT_DISPOSITION = "content-disposition";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT = "accept";
tink_http__$Header_HeaderName_$Impl_$.ACCEPT_ENCODING = "accept-encoding";
tink_http__$Header_HeaderName_$Impl_$.TRANSFER_ENCODING = "transfer-encoding";
tink_http__$Header_HeaderName_$Impl_$.LOCATION = "location";
tink_http__$Header_HeaderName_$Impl_$.AUTHORIZATION = "authorization";
tink_http__$Header_HeaderName_$Impl_$.ORIGIN = "origin";
tink_http__$Header_HeaderName_$Impl_$.VARY = "vary";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_REQUEST_METHOD = "access-control-request-method";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_REQUEST_HEADERS = "access-control-request-headers";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_ORIGIN = "access-control-allow-origin";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_CREDENTIALS = "access-control-allow-credentials";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_EXPOSE_HEADERS = "access-control-expose-headers";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_MAX_AGE = "access-control-max-age";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_METHODS = "access-control-allow-methods";
tink_http__$Header_HeaderName_$Impl_$.ACCESS_CONTROL_ALLOW_HEADERS = "access-control-allow-headers";
tink_http_HeaderParser.INVALID = tink_io_ParseStep.Failed(new tink_core_TypedError(422,"Invalid HTTP header",{ fileName : "tink/http/Header.hx", lineNumber : 300, className : "tink.http.HeaderParser", methodName : "INVALID"}));
tink_http__$Method_Method_$Impl_$.GET = "GET";
tink_http__$Method_Method_$Impl_$.HEAD = "HEAD";
tink_http__$Method_Method_$Impl_$.OPTIONS = "OPTIONS";
tink_http__$Method_Method_$Impl_$.POST = "POST";
tink_http__$Method_Method_$Impl_$.PUT = "PUT";
tink_http__$Method_Method_$Impl_$.PATCH = "PATCH";
tink_http__$Method_Method_$Impl_$.DELETE = "DELETE";
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io__$Sink_SinkYielding_$Impl_$.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
tink_io__$Worker_Worker_$Impl_$.EAGER = new tink_io__$Worker_EagerWorker();
tink_io__$Worker_Worker_$Impl_$.pool = [tink_io__$Worker_Worker_$Impl_$.EAGER];
tink_url__$Path_Path_$Impl_$.root = (function($this) {
	var $r;
	var this1 = "/";
	$r = this1;
	return $r;
}(this));
server_Api.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
